---
title: "Chapter 2"
subtitle: "First Steps"
author: "Aditya Dahiya"
date: 2023-10-26
format: 
  html: 
    code-fold: true
    code-copy: hover
    code-link: true
execute: 
  echo: true
  warning: false
  error: false
  cache: true
filters:
  - social-share
share:
  permalink: "https://aditya-dahiya.github.io/ggplot2book3e/Chapter2.html"
  description: "Solutions Manual (and Beyond) for ggplot2: Elegant Graphics for Data Analysis (3e)"
  twitter: true
  facebook: true
  linkedin: true
  email: true
  mastodon: true
editor_options: 
  chunk_output_type: console
bibliography: references.bib
---

::: callout-warning
Solutions for this chapter are under construction.
:::

```{r}
#| label: setup

# Loading required libraries
library(tidyverse)           # tidyverse and ggplot2
data("mpg")                  # loading the "mpg" dataset
library(gt)                  # beautiful tables in output
library(gtExtras)            # extended beautiful tables' themes
library(ggthemes)            # ggplot2 themes
```

# **2.2.1 Exercises**

## Question 1

**List five functions that you could use to get more information about the `mpg` dataset.**

Here are the five functions for exploring the `mpg` dataset from the `ggplot2` package in `R`, along with example code: --

1.  Use **`str(mpg)`** to display the structure of the dataset `mpg` telling what is the class of each variable.

    ```{r}
    str(mpg)
    ```

2.  Employ **`glimpse(mpg)`** to obtain a concise overview of the dataset's structure and its first few rows, offering a detailed glimpse of the data. It is similar to the previous function `str()`

    ```{r}
    glimpse(mpg)
    ```

3.  Run **`summary(mpg)`** to generate a statistical summary of the variables within the `mpg` dataset, providing measures like mean, median, and quartiles.

    ```{r}
    summary(mpg)
    ```

4.  Utilize **`dfSummary(mpg)`** from the `summarytools` package to obtain a comprehensive summary report with various statistics and visualizations for the `mpg` dataset.

    ```{r}
    #| plain.ascii: FALSE

    library(summarytools)
    st_options(plain.ascii = FALSE)
    print(
      summarytools::dfSummary(mpg,
                            plain.ascii = FALSE,
                            headings = FALSE,
                            display.labels = FALSE,
                            silent = TRUE),
      method = "render")
    ```

5.  Enhance data exploration with **`vis_dat(mpg)`** from the `visdat` package, which offers interactive visualizations to better understand the data-set's contents and identify missing values.

    ```{r}
    library(visdat)

    visdat::vis_dat(mpg) + scale_fill_brewer(palette = "Pastel1") +
      labs(title = "An overview of the data using vis_dat() from visdat package")
    ```

## Question 2

**How can you find out what other datasets are included with `ggplot2`?**

To find out what datasets are included with the `ggplot2` package, you can use the `data()` function. You can use the `data()` function to list all the datasets available in the ggplot2 package.

```{r}
data(package = "ggplot2")
```

## Question 3

**Apart from the US, most countries use fuel consumption (fuel consumed over fixed distance) rather than fuel economy (distance travelled with fixed amount of fuel). How could you convert `cty` and `hwy` into the European standard of l/100km?**

In the `R` formula, we convert miles per gallon (mpg) to liters per 100 kilometers (L/100km). The conversion factor, 235.21, is used to perform the conversion. To convert mpg to L/100km, we divide the conversion factor by the mpg value.

$$ \text{L/100km} = \frac{235.21}{\text{mpg}} $$ {#eq-1} The conversion factor of 235.21 is derived from the following logic:

1.  1 mile is equal to approximately 1.609 kilometers.
2.  1 gallon is equal to approximately 3.785 liters.

To convert from miles per gallon (mpg) to liters per 100 kilometers (L/100km), we need to reverse the units. So, we divide the number of miles (1 mile) by the number of gallons (1 gallon) to get the number of kilometers per liter. This can be expressed as:

$$ \text{Kilometers per Liter} = \frac{1 \text{ mile}}{1 \text{ gallon}} \times \frac{1.609 \text{ kilometers}}{1 \text{ mile}} \times \frac{1 \text{ liter}}{3.785 \text{ gallons}} \approx 0.4251 \text{ kilometers per liter} $$ {#eq-2}

Now, to express fuel efficiency in liters per 100 kilometers, we need to scale up by 100:

$$ \text{L/100km} = \frac{1}{0.4251} \times 100 \approx 235.21 \text{ L/100km per 1 kilometer per liter} $$ {#eq-3}

So, when you divide 235.21 by miles per gallon (mpg), you are effectively converting from miles per gallon to liters per 100 kilometers, accounting for the differences in units and scaling by 100 to express the consumption over a distance of 100 kilometers.

Now, you can include the `R` code and **LaTeX** explanation in an R Markdown document for a more structured presentation. When you knit the R Markdown document, it will generate a formatted document with both the code and explanations.

```{r}
#| label: tbl-q3-ex2
#| tbl-cap: "mpg dataset with mileage in Liters per 100 km"


# Conversion factor from mpg to L/100km
conversion_factor <- 235.21

mpg |> 
  mutate(
    cty = conversion_factor/cty,
    hwy = conversion_factor/hwy
  ) |> 
  slice_head(n = 5) |> 
  gt() |> gtExtras::gt_theme_538() |> 
  fmt_number(columns = cty:hwy,
             decimals = 2)
```

## Question 4

**Which manufacturer has the most models in this dataset? Which model has the most variations? Does your answer change if you remove the redundant specification of drive train (e.g. "pathfinder 4wd", "a4 quattro") from the model name?**

As we can see below in @tbl-q4a-ex2, Toyota has the most models in the data-set.

```{r}
#| label: tbl-q4a-ex2
#| tbl-cap: "Top 5 manufacturers in mpg data-set as per number of models"

# Group 'mpg' data by 'manufacturer.'
mpg |> 
  group_by(manufacturer) |> 

  # Count distinct 'model' values for each manufacturer.
  summarize(models = n_distinct(model)) |> 

  # Sort in descending order based on 'n_models.'
  arrange(desc(models)) |> 
  
  # Select the top 5 manufacturers.
  slice_head(n = 5) |> 
  
  # Create a table and apply a specific theme to it.
  gt() |> gt_theme_538()
```

And, as we can see in the @tbl-q4b-ex2 below, the Dodge Caravan (2 wheel drive) model has the most variations, i.e., 11 in number.

```{r}
#| label: tbl-q4b-ex2
#| tbl-cap: "Number of variations in the different models of cars - top 5"

mpg |> 
  count(manufacturer, model, sort = TRUE) |> 
  slice_head(n = 5) |> 
  rename(variations = n) |> 
  gt() |> gt_theme_538()
```

# **2.3.1 Exercises**

## Question 1

**How would you describe the relationship between `cty` and `hwy`? Do you have any concerns about drawing conclusions from that plot?**

There is a positive correlation between `cty` and `hwy` , as shown in @fig-q1-ex3. However, one concern we have is whether this correlation is causative in nature, or is it a direct correlation, or is it caused by a third unknown variable, i.e. confounding.

Confounding is **a distortion of the association between independent and dependent variables**. It occurs when a third variable is independently associated with both. This can happen when the primary exposure of interest is mixed up with some other factor that is associated with the outcome.

For example, perhaps it is the engine displacement that determines both city and highway mileage, and both have a common link, rather than a direct association.

Note: I am using `theme_ipsum()` from the `hrbrthemes` package [@hrbrthemes].

```{r}
#| label: fig-q1-ex3
#| fig-cap: "A Scatter-plot of city and highway milea for the mpg dataset"

mpg |> 
  ggplot(aes(x = cty, y = hwy)) +
  geom_point() +
  labs(x = "City mileage (cty)", 
       y = "Highway mileage (hwy)",
       title = "Scatter-plot: hwy vs. cty",
       caption = "Data-set: mpg from ggplot2") +
  hrbrthemes::theme_ipsum()
```

## Question 2

**What does `ggplot(mpg, aes(model, manufacturer)) + geom_point()` show? Is it useful? How could you modify the data to make it more informative?**

The code `ggplot(mpg, aes(model, manufacturer)) + geom_point()` is used to create a scatter plot, where the `mpg` dataset is being used, and it's mapping the `model` variable to the x-axis and the `manufacturer` variable to the y-axis. The `geom_point()` function is responsible for adding points to the plot.

```{r}
#| label: fig-q2a-ex3
#| fig-cap: "Plot produced by the code given in Question 2"

ggplot(mpg, aes(model, manufacturer)) + geom_point()
```

Here's a detailed explanation of why this code and its resulting @fig-q2a-ex3 isn't useful:

1.  **Data Mapping**:

    -   `model` is mapped to the x-axis: The car models don't have a specific order, i.e. it is a categorical variable, not an ordinal or continuous variable.
    -   `manufacturer` is mapped to the y-axis: Again, manufacturer is a categorical variable with no specific order. Thus, representing it on y-axis is not advisable.

2.  **Visualization**:

    -   The plot will consist of multiple points where each point represents a combination of a car model and its manufacturer. As, we can expect, each observation will have a unique model. There is no specific information or pattern being displayed as scatter plot doesn't connect the points.
    -   The plot suffers from over-plotting if there are many data points when a single model has many variants (`alpha` aesthetic has not been defined here). Further, since each unique model and manufacturer combination will be displayed as a separate point, it is difficult to discern patterns or relationships.
    -   Thus, this plot has very limited usefulness is identifying trends or make specific insights.

**Modifications for More Informativeness**: To make the plot more informative, you can consider the following modifications:

a.  **Changing the plot geom:** If our purpose is to show the number of model variants for each manufacturer, we might shift to a bar plot, with faceting on the manufacturer as shown in @fig-q2b-ex3 .

    ```{r}
    #| label: fig-q2b-ex3
    #| fig-cap: "Grouped horizontal bar plot showing number of variants for different car models in mpg dataset"
    #| fig-asp: 1.5
    #| fig-width: 10

    mpg |> 
      
      # Counting number of variants for each model
      count(manufacturer, model) |> 
      
      # Nicer looking names
      mutate(manufacturer = snakecase::to_title_case(manufacturer),
             model = snakecase::to_title_case(model, numerals = "left")) |> 
      
      # Plot
      ggplot(aes(x = n, 
                 y = manufacturer,
                 group = model, 
                 fill = manufacturer)) +
      
      # Grouped bar chart
      geom_bar(position = "dodge2",
               stat = "identity") +
      
      # Adding names of models
      geom_text(aes(label = model,
                    x = 0),
                position = position_dodge2(width = 1),
                hjust = "left") +
      theme_minimal() +
      theme(panel.grid.major.y = element_blank(),
            legend.position = "none",
            plot.title.position = "plot") +
      labs(y = NULL, x = NULL,
           title = "Number of model variants for manufacturers in mpg dataset")
    ```

b.  **Labels, Title, Color and Size Aesthetics**: If we insist on using the same plot as given in the question, we can use additional aesthetics like color or point size to encode more information. For instance, you could use color to represent a third variable, such as "class" (economy, midsize, compact, etc.), and point size to represent another variable, like "displacement." We can further sort the manufacturers and models alphabetically.

    ```{r}
    #| label: fig-q2c-ex3
    #| fig-cap: "Adding other informative aesthetics to the points in given plot"

    # Create some factors to order the manufacturers and model names in a specific order
    man_lev <- mpg |> 
      distinct(manufacturer) |> pull(manufacturer)

    mod_lev <- mpg |> 
      group_by(manufacturer) |> 
      arrange(manufacturer, model) |> pull(model) |> unique()

    # Start the plot
    mpg |> 
      
      # reorder the manufacturers by alphabetically and models by numbers
        mutate(
        manufacturer = fct(manufacturer, levels = man_lev),
        model = fct(model, levels = mod_lev)
      ) |> 
      
      # Create the same scatter plot, adding size and color aesthetic
        ggplot(aes(x = model,
                 y = manufacturer,
                 size = displ,
                 col = manufacturer)) +
      
      # A geom_jitter instead of geom_point to avoid overlap of variants of a model
      geom_jitter(alpha = 0.3,
                  width = 0,
                  height = 1) +
      
      # Plot beautification and customization
      
      labs(x = NULL, y = NULL) +
      theme_minimal() +
      theme(legend.position = "none",
            panel.grid.minor.x = element_blank(),
            panel.grid.major.x = element_blank(),
            axis.text.x = element_text(angle = 90, 
                                       hjust = 1,
                                       vjust = 0.5))

    ```

These modifications can help you gain more insight from your data and make your visualization more informative. The choice of modifications should depend on the specific questions you want to answer and the nature of your dataset.

## Question 3

**Describe the data, aesthetic mappings and layers used for each of the following plots. You'll need to guess a little because you haven't seen all the datasets and functions yet, but use your common sense! See if you can predict what the plot will look like before running the code.**

1.  **`ggplot(mpg, aes(cty, hwy)) + geom_point()`**

2.  **`ggplot(diamonds, aes(carat, price)) + geom_point()`**

3.  **`ggplot(economics, aes(date, unemploy)) + geom_line()`**

4.  **`ggplot(mpg, aes(cty)) + geom_histogram()`**

Let's break down each of the provided ggplot2 code snippets and describe the data, aesthetic mappings, and layers used for the plots:

1.  **`ggplot(mpg, aes(cty, hwy)) + geom_point()`**
    -   **Data**: The data for this plot comes from the 'mpg' dataset, which is typically included in the ggplot2 package. This dataset contains information about the fuel efficiency of various car models.
    -   **Aesthetic Mappings**: It uses aesthetic mappings to represent the 'cty' (city miles per gallon) variable on the x-axis and the 'hwy' (highway miles per gallon) variable on the y-axis.
    -   **Layers**: This plot consists of a single layer represented by `geom_point()`, which adds points to the plot, creating a scatter plot of 'cty' against 'hwy'.
2.  **`ggplot(diamonds, aes(carat, price)) + geom_point()`**
    -   **Data**: The data for this plot comes from the '`diamonds`' dataset, another built-in dataset in `ggplot2`, containing information about diamonds, including their carat weight and price.
    -   **Aesthetic Mappings**: It uses aesthetic mappings to represent the '`carat`' variable on the x-axis and the '`price`' variable on the y-axis.
    -   **Layers**: This plot also consists of a single layer represented by `geom_point()`, which adds points to the plot, creating a scatter plot of diamond carat weight against their prices.
3.  **`ggplot(economics, aes(date, unemploy)) + geom_line()`**
    -   **Data**: The data for this plot comes from the 'economics' dataset, which is included in the ggplot2 package. This dataset contains economic data, including the '`date`' and '`unemploy`' (number of unemployed individuals) variables.
    -   **Aesthetic Mappings**: It uses aesthetic mappings to represent the '`date`' variable on the x-axis and the '`unemploy`' variable on the y-axis.
    -   **Layers**: This plot consists of a single layer represented by `geom_line()`, which connects points with lines, creating a time series line plot of the number of unemployed individuals over time.
4.  **`ggplot(mpg, aes(cty)) + geom_histogram()`**
    -   **Data**: The data for this plot also comes from the '`mpg`' dataset.
    -   **Aesthetic Mappings**: It uses an aesthetic mapping to represent only the '`cty`' variable, which will be plotted on the x-axis. Since it's a histogram, the y-axis represents the count of observations in each bin.
    -   **Layers**: This plot consists of a single layer represented by `geom_histogram()`, which creates a histogram of the `cty` variable, showing the distribution of city miles per gallon in the dataset.

Each of these plots uses different datasets and aesthetic mappings, and they employ different types of geoms (layers) to represent the data in various ways, such as scatter plots, line plots, and histograms, depending on the specific data and the analysis or visualization goals.

# **2.4.1 Exercises**

## Question 1

**Experiment with the colour, shape and size aesthetics. What happens when you map them to continuous values? What about categorical values? What happens when you use more than one aesthetic in a plot?**

We can experiment with the `colour`, `shape`, and `size` aesthetics using both continuous and categorical variables in the `mpg` dataset. @fig-q1-ex4 shows six separate scatter plots using different combinations of `colour`, `shape`, and `size` aesthetics, with both continuous and categorical variables: --

```{r}
#| label: fig-q1-ex4
#| fig-cap: "Using continuous and categorical variables on the three aesthetics - colour, shape and size"
#| fig-subcap: 
#|   - "Continuous Variable with Color Aesthetic"
#|   - "Continuous Variable with Shape Aesthetic"
#|   - "Continuous Variable with Size Aesthetic"
#|   - "Categorical Variable with Color Aesthetic"
#|   - "Categorical Variable with Shape Aesthetic"
#|   - "Categorical Variable with Size Aesthetic"
#| fig-width: 4
#| fig-asp: 0.6
#| layout-ncol: 2
#| layout-nrow: 3

# Create a ggplot2 plot with 'mpg' dataset
p <- ggplot(mpg, aes(x = cty, y = hwy)) + theme_minimal()

# Continuous variable with color, shape, and size aesthetics
p + geom_point(aes(color = displ))
  
p + geom_text(aes(x = 20, y = 30),
    label = "Error: Shape aesthetic does not \nwork with a continuous variable")

p + geom_point(aes(size = displ), alpha = 0.2)

# Categorical variable with color, shape, and size aesthetics
p + geom_point(aes(color = factor(class)))

p + geom_point(aes(shape = factor(class)))

p + geom_point(aes(size = factor(class)), alpha = 0.2)
```

Insights:

-   `size` aesthetic works well with continuous variable (or, at worse, an ordinal variable). It should not be used with categorical variable.

-   `shape` aesthetic works only with categorical variable. It simply does not work with a continuous variable.

-   `color` works well with categorical and continuous variables.

When you use more than one aesthetic in a plot, you can create a plot that contains multiple layers of information, with each aesthetic conveying a different aspect of the data. While this can provide a rich and detailed representation of your data, it can also lead to a plot that becomes too complex and difficult to perceive for several reasons:

1.  **Clutter**: Multiple aesthetics, such as color, shape, size, and others, can lead to visual clutter, especially when you have a large dataset. This can make it challenging for viewers to discern patterns and relationships within the data.

2.  **Cognitive Overload**: When a plot contains too many aesthetics, viewers may struggle to process the information efficiently. It requires more cognitive effort to interpret the various aesthetic mappings, leading to information overload.

3.  **Reduced Clarity**: Complex plots can reduce the clarity and simplicity that is often desirable in data visualization. Clutter and complexity can obscure the main message you want to convey, making it harder for the audience to understand the key insights.

4.  **Color Confusion**: Overusing color can be particularly problematic. If multiple categories or variables are assigned distinct colors, it can be challenging to differentiate between them, especially if some colors are similar or hard to distinguish.

5.  **Interference**: When multiple aesthetics are used, there's a potential for interference or overlap between different visual elements. For example, if you use both color and size aesthetics, larger points with different colors may overlap, making it challenging to discern individual points.

6.  **Ineffectiveness**: Sometimes, adding multiple aesthetics may not actually enhance the plot's effectiveness or communicative power. Instead, it might complicate the plot without providing significant additional insights.

To avoid making a plot too complex and difficult to perceive, it's essential to carefully consider the goals of your visualization and the message you want to convey. It's often better to use a limited number of aesthetics thoughtfully, or using faceting.

## Question 2

**What happens if you map a continuous variable to shape? Why? What happens if you map `trans` to shape? Why?**

Mapping a continuous variable to the `shape` aesthetic in `ggplot2`, it throws up an error, because, the `shape` aesthetic is designed for categorical variables, not continuous ones. When you attempt to deliberately map a continuous variable to `shape`, ggplot2 will, at best, treat it as a categorical variable, which can lead to unintended and potentially confusing results.

Let's consider both scenarios using the `mpg` dataset:

1.  **Mapping a Continuous Variable (e.g., `displ`) to Shape Aesthetic:**

    ``` r
    ggplot(mpg, aes(x = cty, y = hwy, shape = displ)) + geom_point()

    # Error in `geom_point()`:
    # ! Problem while computing aesthetics.
    # ℹ Error occurred in the 1st layer.
    # Caused by error in `scale_f()`:
    # ! A continuous variable cannot be mapped to the shape aesthetic
    # ℹ choose a different aesthetic or use `scale_shape_binned()`
    # Run `rlang::last_trace()` to see where the error occurred.
    ```

    When you map a continuous variable like `displ` (engine displacement) to the `shape` aesthetic, ggplot2 will treat each unique value of 'displ' as a separate category and assign a different shape to each value. This can result in a plot with many unique shapes, which can be difficult to interpret. Thus, `ggplot2` throws up an error. The shapes do not have any inherent order or meaning in this context, so the plot may not provide clear insights.

2.  **Mapping a Categorical Variable (e.g., `trans`) to Shape:**

    ```{r}
    #| label: fig-q2-ex4
    #| fig-cap: "Mapping a Categorical Variable: Transmission (trans) to Shape aesthetic"

    ggplot(mpg, aes(x = cty, y = hwy, shape = trans)) + geom_point()
    ```

    When you map a categorical variable like 'trans' (transmission type) to the `shape` aesthetic, ggplot2 assigns a unique shape to each category in the 'trans' variable. However, there are a limited number of shapes in `ggplot2` and thus many shapes (like `auto(s5)` , `auto(s6)` , `manual(m5)` and `manual(m6)` ) go un-plotted thus leading to missing data. In any case, it is generally not advisable to plot more than 4-5 shapes in a plot to keep it nice and simple.

In summary, mapping a continuous variable to the `shape` aesthetic may not be possible. However, mapping a categorical variable to `shape` can be useful, provided the number of categories is not too much.

## Question 3

**How is drive train related to fuel economy? How is drive train related to engine size and class?**

To understand the relationship between drive train, fuel economy, engine size, and class in the `mpg` dataset, you can create a series of plots. We'll use scatter plots and bar plots to visualize these relationships: --

1.  **Investigating how drive train (variable '`drv`') is related to fuel economy (variables '`cty`' and '`hwy`'):** In the figure below, we find that vehicles with "Front-Wheel" drive-train are more fuel efficient, as compared to rear and 4-wheel drive train: --

    ```{r}
    #| layout-ncol: 2

    ggplot(mpg, aes(x = drv, y = cty, fill = drv)) +
      geom_boxplot() +
      labs(title = "City MPG by Drive Train Type", x = "Drive Train", y = "City MPG") +
      theme_minimal()

    ggplot(mpg, aes(x = drv, y = hwy, fill = drv)) +
      geom_boxplot() +
      labs(title = "Highway MPG by Drive Train Type", x = "Drive Train", y = "Highway MPG") +
      theme_minimal()
    ```

2.  **Investigating how drive train is related to engine size (variable '`displ`') and vehicle class (variable '`class`'):** In the figure below, we observe that front-wheel drive vehicles have smallest engines, while rear-wheel drive vehicles have largest engines. This also partly explains the fuel economy of these vehicle classes. Further, we observe that front-wheel drive cars are 2-seaters, sub-compact or compact class. However, SUVs dominate the 4-wheel drive and rear-wheel drive cars.

    ```{r}
    #| layout-ncol: 2

    ggplot(mpg, aes(x = drv, y = displ, fill = drv)) +
      geom_boxplot() +
      labs(title = "Engine Size by Drive Train Type", x = "Drive Train", y = "Engine Size") +
      theme_minimal()

    ggplot(mpg, aes(x = drv, fill = class)) +
      geom_bar(position = "fill") +
      labs(title = "Vehicle Class Distribution by Drive Train Type", x = "Drive Train", y = "Proportion") +
      theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
      scale_fill_brewer(palette = "Pastel2") + 
      theme_minimal()
    ```
