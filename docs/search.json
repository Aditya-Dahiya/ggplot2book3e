[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Solutions Manual (and Beyond) for",
    "section": "",
    "text": "Welcome to the Solutions Manual (and much more!) for the third edition of ggplot2: Elegant Graphics for Data Analysis (3e) by Hadley Wickham, Danielle Navarro, and Thomas Lin Pedersen.\nThis manual is your indispensable companion for this amazing book on understanding the basics of ggplot2 graphics.\nInside these pages, you’ll find a rich trove of techniques to solve the exercises given in the book, and extend them beyond to improve the output.\nI emphasize not just the solving the exercises, but extending ggplot2 capabilities with add-on packages such as gganimate , ggthemes , ggplotly , patchwork , gridExtra , ggrepel , GGally , ggcorrplot , ggmap , magick and, the various extensions to ggplot2 at the ggplot2 extensions webpage.\nThis solutions manual is created by Aditya Dahiya. It is committed to fostering a collaborative learning environment and offers all it’s code and solutions for free. Happy learning!\n\n\n."
  },
  {
    "objectID": "index.html#author-aditya-dahiya",
    "href": "index.html#author-aditya-dahiya",
    "title": "Solutions Manual (and Beyond) for",
    "section": "",
    "text": "Welcome to the Solutions Manual and much more for the third edition of ggplot2: Elegant Graphics for Data Analysis (3e) by Hadley Wickham, Danielle Navarro, and Thomas Lin Pedersen.\nThis manual is your indispensable companion for this amazing book on ggplot2 and R graphics.\nInside these pages, you’ll find a rich trove of techniques to extend the extra-ordinary capabilities to ggplot2 and other packages developed by amazing people all over the world to solve the exercises given in the book, and extend them beyond to improve the output.\nI emphasize not just the solving the exercises, but extending ggplot2 capabilities with add-on packages such as gganimate , ggthemes , ggplotly , patchwork , gridExtra , ggrepel , GGally , ggcorrplot , ggmap , and, the various extensions to ggplot2 at the ggplot2 extensions webpage.\nThis website is committed to fostering a collaborative learning environment and offers all it’s code and solutions for free. Happy learning!\n\n\n."
  },
  {
    "objectID": "solutions.html",
    "href": "solutions.html",
    "title": "Chapter-wise Solutions",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nTitle\n\n\nSubtitle\n\n\n\n\n\n\nChapter 1\n\n\nIntroduction\n\n\n\n\nChapter 10\n\n\nPosition Scales and axes\n\n\n\n\nChapter 11\n\n\nColour Scales and Legends\n\n\n\n\nChapter 12\n\n\nOther aesthetics\n\n\n\n\nChapter 13\n\n\nBuild a plot layer by layer\n\n\n\n\nChapter 14\n\n\nScales and guides\n\n\n\n\nChapter 15\n\n\nCoordinate Systems\n\n\n\n\nChapter 16\n\n\nFaceting\n\n\n\n\nChapter 17\n\n\nThemes\n\n\n\n\nChapter 18\n\n\nProgramming with ggplot2\n\n\n\n\nChapter 19\n\n\nInternals of ggplot2\n\n\n\n\nChapter 2\n\n\nFirst Steps\n\n\n\n\nChapter 20\n\n\nExtending ggplot2\n\n\n\n\nChapter 21\n\n\nA case study\n\n\n\n\nChapter 3\n\n\nIndividual geoms\n\n\n\n\nChapter 4\n\n\nCollective geoms\n\n\n\n\nChapter 5\n\n\nStatistical Summaries\n\n\n\n\nChapter 6\n\n\nMaps\n\n\n\n\nChapter 7\n\n\nNetworks\n\n\n\n\nChapter 8\n\n\nAnnotations\n\n\n\n\nChapter 9\n\n\nArranging Plots\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Chapter8.html",
    "href": "Chapter8.html",
    "title": "Chapter 8",
    "section": "",
    "text": "Warning\n\n\n\nSolutions for this chapter are under construction."
  },
  {
    "objectID": "Chapter6.html",
    "href": "Chapter6.html",
    "title": "Chapter 6",
    "section": "",
    "text": "Warning\n\n\n\nSolutions for this chapter are under construction."
  },
  {
    "objectID": "Chapter4.html",
    "href": "Chapter4.html",
    "title": "Chapter 4",
    "section": "",
    "text": "Warning\n\n\n\nSolutions for this chapter are under construction."
  },
  {
    "objectID": "Chapter21.html",
    "href": "Chapter21.html",
    "title": "Chapter 21",
    "section": "",
    "text": "Warning\n\n\n\nSolutions for this chapter are under construction."
  },
  {
    "objectID": "Chapter2.html",
    "href": "Chapter2.html",
    "title": "Chapter 2",
    "section": "",
    "text": "Warning\n\n\n\nSolutions for this chapter are under construction.\nCode# Loading required libraries\nlibrary(tidyverse)           # tidyverse and ggplot2\ndata(\"mpg\")                  # loading the \"mpg\" dataset\nlibrary(gt)                  # beautiful tables in output\nlibrary(gtExtras)            # extended beautiful tables' themes"
  },
  {
    "objectID": "Chapter18.html",
    "href": "Chapter18.html",
    "title": "Chapter 18",
    "section": "",
    "text": "Warning\n\n\n\nSolutions for this chapter are under construction."
  },
  {
    "objectID": "Chapter16.html",
    "href": "Chapter16.html",
    "title": "Chapter 16",
    "section": "",
    "text": "Warning\n\n\n\nSolutions for this chapter are under construction."
  },
  {
    "objectID": "Chapter14.html",
    "href": "Chapter14.html",
    "title": "Chapter 14",
    "section": "",
    "text": "Warning\n\n\n\nSolutions for this chapter are under construction."
  },
  {
    "objectID": "Chapter12.html",
    "href": "Chapter12.html",
    "title": "Chapter 12",
    "section": "",
    "text": "Warning\n\n\n\nSolutions for this chapter are under construction."
  },
  {
    "objectID": "Chapter10.html",
    "href": "Chapter10.html",
    "title": "Chapter 10",
    "section": "",
    "text": "Warning\n\n\n\nSolutions for this chapter are under construction."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Welcome to the quirky realm of Aditya Dahiya, your friendly neighborhood Indian Administrative Service (IAS) officer, currently working as the Director and Special Secretary in the Government of Haryana, India. Amidst the daily avalanche of files and meetings that could rival a paper mountain, Aditya somehow manages to sneak in quality time with his true loves: data visualization and health financing data. Think of him as your data-wrangling, file-taming, bureaucracy-battling guide with a slightly skewed sense of humor. Need more bureaucratic banter or data insights? Connect with Aditya on LinkedIn or shoot him an email – he promises it won’t be as formal as a government memo!"
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "About",
    "section": "Education",
    "text": "Education\nHarvard University | Boston, MA MPH in Global Health | Aug 2021 - May 2022\nAll India Institute of Medical Sciences | New Delhi, India MBBS in Medicine | Aug 2005-Dec 2010"
  },
  {
    "objectID": "about.html#experience",
    "href": "about.html#experience",
    "title": "About",
    "section": "Experience",
    "text": "Experience\nIndian Administrative Service | Director | Aug 2011 - present\nNeuro-Radiology, AIIMS New Delhi | Junior Resident Doctor | Jan 2011 - Aug 2011"
  },
  {
    "objectID": "Chapter1.html",
    "href": "Chapter1.html",
    "title": "Chapter 1",
    "section": "",
    "text": "Note\n\n\n\nThis chapter has no exercises, hence there are no solutions to display. Instead, we delve into various ggplot2 add-on packages installed in Section 1.5"
  },
  {
    "objectID": "Chapter11.html",
    "href": "Chapter11.html",
    "title": "Chapter 11",
    "section": "",
    "text": "Warning\n\n\n\nSolutions for this chapter are under construction."
  },
  {
    "objectID": "Chapter13.html",
    "href": "Chapter13.html",
    "title": "Chapter 13",
    "section": "",
    "text": "Warning\n\n\n\nSolutions for this chapter are under construction."
  },
  {
    "objectID": "Chapter15.html",
    "href": "Chapter15.html",
    "title": "Chapter 15",
    "section": "",
    "text": "Warning\n\n\n\nSolutions for this chapter are under construction."
  },
  {
    "objectID": "Chapter17.html",
    "href": "Chapter17.html",
    "title": "Chapter 17",
    "section": "",
    "text": "Warning\n\n\n\nSolutions for this chapter are under construction."
  },
  {
    "objectID": "Chapter19.html",
    "href": "Chapter19.html",
    "title": "Chapter 19",
    "section": "",
    "text": "Warning\n\n\n\nSolutions for this chapter are under construction."
  },
  {
    "objectID": "Chapter20.html",
    "href": "Chapter20.html",
    "title": "Chapter 20",
    "section": "",
    "text": "Warning\n\n\n\nSolutions for this chapter are under construction."
  },
  {
    "objectID": "Chapter3.html",
    "href": "Chapter3.html",
    "title": "Chapter 3",
    "section": "",
    "text": "Warning\n\n\n\nSolutions for this chapter are under construction."
  },
  {
    "objectID": "Chapter5.html",
    "href": "Chapter5.html",
    "title": "Chapter 5",
    "section": "",
    "text": "Warning\n\n\n\nSolutions for this chapter are under construction."
  },
  {
    "objectID": "Chapter7.html",
    "href": "Chapter7.html",
    "title": "Chapter 7",
    "section": "",
    "text": "Warning\n\n\n\nSolutions for this chapter are under construction."
  },
  {
    "objectID": "Chapter9.html",
    "href": "Chapter9.html",
    "title": "Chapter 9",
    "section": "",
    "text": "Warning\n\n\n\nSolutions for this chapter are under construction."
  },
  {
    "objectID": "Chapter1.html#colorblindness-colorblindness",
    "href": "Chapter1.html#colorblindness-colorblindness",
    "title": "Chapter 1",
    "section": "colorBlindness (Ou 2021)",
    "text": "colorBlindness (Ou 2021)\nThe colorBlindness R package is specifically crafted to curate a diverse array of secure color palettes suitable for various plot types like heatmaps and pie charts. Its aim is to ensure that the resulting visualizations are accessible and comprehensible to all users. Additionally, it features a Color Vision Deficiency (CVD) simulator, a tool that facilitates the emulation of color vision deficiencies for improved accessibility.\n\n\nCode\nlibrary(colorBlindness)\ng1 &lt;- flights |&gt; \n  group_by(month, day) |&gt; \n  count() |&gt; \n  ggplot(aes(x = day,\n             y = month,\n             fill = n)) +\n  geom_tile() +\n  theme_minimal() +\n  labs(y = \"Month\", x = \"Day of the month\") +\n  scale_y_continuous(breaks = 1:12,\n                     labels = month.name) +\n  scale_x_continuous(breaks = seq(1, 31, 5)) +\n  theme(panel.grid = element_blank(),\n        plot.title.position = \"plot\")\n\n\nFigure 1 shows a basic heat-map created with geom_tile() and nycflights13 (Wickham 2021) data-set.\n\n\nCode\ng1 + labs(title = \"Default ggplot2 colours\")\n\n\n\n\n\nFigure 1: Heat-map with default ggplot2 colours\n\n\n\n\nFigure 2 shows a basic heat-map created with geom_tile() and nycflights13 (Wickham 2021) data-set.\n\n\nCode\ng1 + scale_fill_viridis_c() + labs(title = \"Viridis Colours\")\n\n\n\n\n\nFigure 2: Same heat map with viridis colours\n\n\n\n\nNow, using cvdPlot() from the package colorBlindness to check the plot’s view ( Figure 3 ) to different people.\n\n\nCode\ncvdPlot(g1 + scale_fill_viridis_c())\n\n\n\n\n\nFigure 3: Showing heat-map with different color blindness types using cvdPlot()"
  },
  {
    "objectID": "Chapter1.html#directlabels-directlabels",
    "href": "Chapter1.html#directlabels-directlabels",
    "title": "Chapter 1",
    "section": "directlabels (Hocking 2023)",
    "text": "directlabels (Hocking 2023)\nThis package allows us to label plots easily, using various methods listed here.\n\n\nCode\nlibrary(directlabels)\ng2 &lt;- flights |&gt; \n  filter(carrier %in% c(\"AA\", \"DL\", \"UA\", \"US\", \"WN\")) |&gt; \n  group_by(month, carrier) |&gt; \n  summarise(avg_delay = mean(dep_delay, na.rm = TRUE)) |&gt; \n  ggplot(aes(x = month, y = avg_delay,\n             group = carrier, \n             col = carrier)) +\n  geom_line() +\n  geom_point() +\n  theme_classic() +\n  labs(x = \"Month\", y = \"Average Departure Delay (min.)\") +\n  scale_x_continuous(breaks = 1:12, labels = month.abb) +\n  scale_color_viridis_d()\n\n\n`summarise()` has grouped output by 'month'. You can override using the\n`.groups` argument.\n\n\nCode\ngridExtra::grid.arrange(\ng2 |&gt; direct.label(method = \"angled.boxes\"), \n\ng2 |&gt; direct.label(method = \"last.polygons\"), \n\ng2 |&gt; direct.label(method = \"top.bumpup\"), \n\ng2 |&gt; direct.label(method = \"first.polygons\"),\nnrow = 2, ncol = 2)"
  },
  {
    "objectID": "Chapter1.html#colorblindness",
    "href": "Chapter1.html#colorblindness",
    "title": "Chapter 1",
    "section": "colorBlindness",
    "text": "colorBlindness\nThe colorBlindness R package (Ou 2021) is specifically crafted to curate a diverse array of secure color palettes suitable for various plot types like heat-maps and pie charts. Its aim is to ensure that the resulting visualizations are accessible and comprehensible to all users. Additionally, it features a Color Vision Deficiency (CVD) simulator, a tool that facilitates the emulation of color vision deficiencies for improved accessibility.\nFigure 1 shows a basic heat-map created with geom_tile() and nycflights13 (Wickham 2021) data-set with different colour schemes.\n\nCodelibrary(colorBlindness)\ng1 &lt;- flights |&gt; \n  group_by(month, day) |&gt; \n  count() |&gt; \n  ggplot(aes(x = day,\n             y = month,\n             fill = n)) +\n  geom_tile() +\n  theme_minimal() +\n  labs(y = \"Month\", x = \"Day of the month\") +\n  scale_y_continuous(breaks = 1:12,\n                     labels = month.name) +\n  scale_x_continuous(breaks = seq(1, 31, 5)) +\n  theme(panel.grid = element_blank(),\n        plot.title.position = \"plot\")\n\ng1 + labs(title = \"Default ggplot2 colours\")\n\ng1 + scale_fill_viridis_c() + labs(title = \"Viridis Colours\")\n\n\n\n\n\n(a) Using default ggplot2 colour scheme\n\n\n\n\n\n(b) Using viridis colour scheme for colorblindness\n\n\n\nFigure 1: Heat-map of number of flights ever day in different months of 2013\n\n\n\nNow, using cvdPlot() from the package colorBlindness to check the plot’s view ( Figure 2 ) to different people.\n\nCodecvdPlot(g1 + scale_fill_viridis_c())\n\n\n\nFigure 2: Showing heat-map with different color blindness types using cvdPlot()"
  },
  {
    "objectID": "Chapter1.html#directlabels",
    "href": "Chapter1.html#directlabels",
    "title": "Chapter 1",
    "section": "directlabels",
    "text": "directlabels\nThe directlabels package (Hocking 2023) allows us to label plots easily, using various methods listed here. An example is shown in Figure 3 .\n\nCodelibrary(directlabels)\ng2 &lt;- flights |&gt; \n  filter(carrier %in% c(\"AA\", \"DL\", \"UA\", \"US\", \"WN\")) |&gt; \n  group_by(month, carrier) |&gt; \n  summarise(avg_delay = mean(dep_delay, na.rm = TRUE)) |&gt; \n  ggplot(aes(x = month, y = avg_delay,\n             group = carrier, \n             col = carrier)) +\n  geom_line() +\n  geom_point() +\n  theme_classic() +\n  labs(x = \"Month\", y = \"Average Departure Delay (min.)\") +\n  scale_x_continuous(breaks = 1:12, labels = month.abb) +\n  scale_color_brewer(palette = \"Set1\")\n\ngridExtra::grid.arrange(\ng2 |&gt; direct.label(method = \"angled.boxes\") + \n  labs(title = \"method = \\\"angled.boxes\\\"\"), \n\ng2 |&gt; direct.label(method = \"last.polygons\") + \n  labs(title = \"method = \\\"last.polygons\\\"\"), \n\ng2 |&gt; direct.label(method = \"top.bumpup\") + \n  labs(title = \"method = \\\"top.bumpup\\\"\"), \n\ng2 |&gt; direct.label(method = \"first.polygons\") + \n  labs(title = \"method = \\\"first.polygons\\\"\") ,\nnrow = 2, ncol = 2)\n\n\n\nFigure 3: Using direct labels in a line plot of average delay of five major airline carriers in different months over the course of 2013"
  },
  {
    "objectID": "Chapter1.html#ggforce",
    "href": "Chapter1.html#ggforce",
    "title": "Chapter 1",
    "section": "ggforce",
    "text": "ggforce\nThe ggforce package (Pedersen 2022) is, in effect, a collection of geoms and other features to add on to the ggplot2 collection. Once particularly nice one is facet_zoom() as depicted in Figure 4 . This feature allows you to focus on a specific portion of the data by creating a zoomed-in view, while preserving the complete dataset in a separate panel. We can zoom in on either the x-axis, the y-axis, or both simultaneously.\n\nCodelibrary(ggforce)\nlibrary(ggthemes)\n\nflights |&gt; \n  filter(carrier == \"AA\" & month == 1) |&gt;\n  ggplot(aes(x = dep_delay,\n             y = arr_delay)) +\n  geom_jitter(alpha = 0.2) +\n  geom_smooth(se = FALSE, col = \"red\") + \n  facet_zoom(y = arr_delay &lt; 0,\n             x = dep_delay &lt; 0) + \n  labs(y = \"Arrival Delay (minutes)\", x = \"Departure Delay (minutes)\")\n\n\n\nFigure 4: Use of facet_zoom() to show that relation between Departure Delay and Arrival Delay of American Airlines flights holds true even for flights landing earlier than scheduled\n\n\n\nAnother nice one is facet_wrap_paginate() which enables you to break down a faceted plot into multiple pages. You can specify the number of rows and columns per page, along with the page number you want to plot. The function will automatically generate only the appropriate panels. The Figure 5 shows an example with a for(){} loop.\n\nCodefor (i in 1:2) {\n\n  print(\n    flights |&gt; \n      filter(carrier == \"AA\") |&gt;\n      ggplot(aes(x = dep_time, \n                 y = dep_delay)) +\n      geom_jitter(alpha = 0.1, \n                 shape = 19) +\n      geom_smooth(col = \"red\") +\n      facet_wrap_paginate(~ month,\n                          nrow = 3,\n                          ncol = 2,\n                          scales = \"free_y\",\n                          page = i) +\n      scale_x_continuous(limits = c(500, 2400)) +\n      theme_classic() +\n      labs(x = \"Departure Time (hrs)\", y = \"Departure delay (min.)\")\n  )\n}\n\n\n\n\n\n(a) First half of the year: Jan-Jun\n\n\n\n\n\n\n\n(b) Second half of the year: Jul-Dec\n\n\n\nFigure 5: Use of facet_wrap_paginate() to create plots of realtion between American Airlines flights’ departure time and departure delay for different months"
  },
  {
    "objectID": "Chapter1.html#gghighlight",
    "href": "Chapter1.html#gghighlight",
    "title": "Chapter 1",
    "section": "gghighlight",
    "text": "gghighlight\nThe gghighlight package (Yutani 2022) is an amazing tool to highlight only types of groups in a plot, and can even be used with faceting. The Figure 6 shows an example with a single plot, and Figure 7 shows the same example with faceting.\n\nCodeflights |&gt; \n  mutate(dep_hour = dep_time %/% 100) |&gt; \n  group_by(carrier, dep_hour) |&gt; \n  summarize(avg_delay = mean(dep_delay, na.rm = TRUE)) |&gt; \n  ggplot(aes(x = dep_hour,\n             y = avg_delay,\n             col = carrier,\n             group = carrier)) + \n  geom_line(lwd = 1, alpha = 0.75) +\n  xlim(c(5, 24)) + ylim(c(-10, 300)) +\n  labs(x = \"Departure Time (hr.)\", y = \"Average Departure Delay (min.)\") + \n  theme_minimal()\n\nflights |&gt; \n  mutate(dep_hour = dep_time %/% 100) |&gt; \n  group_by(carrier, dep_hour) |&gt; \n  summarize(avg_delay = mean(dep_delay, na.rm = TRUE)) |&gt; \n  ggplot(aes(x = dep_hour,\n             y = avg_delay,\n             col = carrier,\n             group = carrier)) + \n  geom_line(lwd = 1, alpha = 0.75) +\n  xlim(c(5, 24)) + ylim(c(-10, 300)) +\n  labs(x = \"Departure Time (hr.)\", y = \"Average Departure Delay (min.)\") + \n  theme_minimal() +\n  gghighlight::gghighlight(carrier == \"AA\")\n\n\n\n\n\n(a) Without any gghighlight: it is tough to make comparisons, say, for example of American Airlines with others\n\n\n\n\n\n\n\n(b) With use of gghighlight: we can easily compare American Airlines to others\n\n\n\nFigure 6: Line graph showing the average departure delay (in minutes) of different airliens at different departure times during the day\n\n\n\n\nCodeflights |&gt; \n  mutate(dep_hour = dep_time %/% 100) |&gt; \n  group_by(carrier, dep_hour) |&gt; \n  summarize(avg_delay = mean(dep_delay, na.rm = TRUE)) |&gt; \n  ggplot(aes(x = dep_hour,\n             y = avg_delay,\n             col = carrier,\n             group = carrier)) + \n  geom_line(lwd = 1, alpha = 0.75) +\n  xlim(c(5, 24)) + ylim(c(-10, 300)) +\n  theme_minimal() +\n  gghighlight::gghighlight(carrier %in% c(\"AA\", \"UA\", \"US\", \"DL\")) +\n  facet_wrap(~ carrier) +\n  scale_color_brewer(palette = \"Dark2\") +\n  labs(x = \"Departure Time (hr.)\", y = \"Average Departure Delay (min.)\",\n       title = \"Comparing depature delays of 4 major carriers with others\") \n\n\n\nFigure 7: Using gghighlight with faceting allows use to see the average departure delay (over the course of a typical day) for 4 major airlines compared to others"
  },
  {
    "objectID": "Chapter1.html#ggnewscale",
    "href": "Chapter1.html#ggnewscale",
    "title": "Chapter 1",
    "section": "ggnewscale",
    "text": "ggnewscale\nThe ggnewscale package (Campitelli 2023) allows you to use two or more different color scales (or, any other scales like fill, shape, linetype etc. in the same plot. The Figure 8 is directly copied from the website of the package, and credits to\n\nCodelibrary(ggnewscale)\n# Equivalent to melt(volcano)\ntopography &lt;- expand.grid(x = 1:nrow(volcano),\n                          y = 1:ncol(volcano))\ntopography$z &lt;- c(volcano)\n\n# point measurements of something at a few locations\nset.seed(42)\nmeasurements &lt;- data.frame(x = runif(30, 1, 80),\n                           y = runif(30, 1, 60),\n                           thing = rnorm(30))\n\nggplot(mapping = aes(x, y)) +\n  geom_contour(data = topography, aes(z = z, color = stat(level))) +\n  # Color scale for topography\n  scale_color_viridis_c(option = \"D\") +\n  # geoms below will use another color scale\n  new_scale_color() +\n  geom_point(data = measurements, size = 3, aes(color = thing)) +\n  # Color scale applied to geoms added after new_scale_color()\n  scale_color_viridis_c(option = \"A\") +\n  theme_void() + \n  labs(title = \"The ggnewscale package allows use of multiple color scales\") +\n  theme(legend.position = \"bottom\")\n\n\n\nFigure 8: An example of using two different color scales in a single ggplot2 object with ggnewscale package"
  },
  {
    "objectID": "Chapter1.html#magick",
    "href": "Chapter1.html#magick",
    "title": "Chapter 1",
    "section": "magick",
    "text": "magick\n\n\nThe magick package (Ooms 2023) is a tool to handle and process images in R. It can be used to read .png , .jpeg , .svg and other images. While there are a plethora of features, the primary one I use are given below. Note that I have created the logo for this book solutions using magick and cropcircles .\n\nCodelibrary(magick)\n\n# Reading in the image\nbook_logo &lt;- image_read(\"https://ggplot2-book.org/cover.jpg\")\n\n# Looking at the image in your computer's browser or default app\nimage_browse(book_logo)\n\n# Editing the image to add 3rd Edition and Solutions Manual words\nbook_logo &lt;- book_logo |&gt; \n  image_annotate(\"Solutions Manual (& beyond)\\nfor                   \",\n                 color = \"white\",\n                 location = \"+80+125\",\n                 size = 30,\n                 font = \"helvetica\",\n                 weight = 700) |&gt; \n  image_annotate(\"Third Edition\",\n             strokecolor = \"white\",\n             color = \"white\",\n             boxcolor = \"#EEB301\",\n             location = \"+75+480\",\n             style = \"italic\",\n             size = 35)\n\n# Saving the image\nimage_write(book_logo, \n            \"book_cover.jpg\",\n            format = \"jpeg\")\n\n\n\n\n\n\nBook cover for Solutions Manual (and more!) created with magick package"
  },
  {
    "objectID": "Chapter1.html#cropcircles",
    "href": "Chapter1.html#cropcircles",
    "title": "Chapter 1",
    "section": "cropcircles",
    "text": "cropcircles\n\n\nWe can use the cropcircles package (Oehm 2023) to crop images into a rounded and hexagonal logo for my current book, as an example. (Note: the package generated a transparent background for me only in .png format).\nWe can also create hexagonal logos with this, as shown here.\n\n\n\n\nA rounded logo for the solutions website\n\n\nCodelibrary(cropcircles)\n\n# A round logo\nround_logo &lt;- book_logo |&gt; \n  image_crop(\"600x600+0+30\")\n  \nimage_read(\n  circle_crop(round_logo, \n              just = \"top\",\n              border_colour = \"black\",\n              border_size = 7)) |&gt; \n  image_write(\"book_logo.png\", \n            format = \"png\")\n\n\n\n\n\n\nA Hexagonal logo\n\n\nCodelibrary(magick)\n# Creating a hex \nbook_logo &lt;- image_read(\"https://ggplot2-book.org/cover.jpg\")\n\nbook_logo &lt;- book_logo |&gt; \n  image_annotate(\"Solutions Manual \\n  (& beyond) for\",\n                 color = \"white\",\n                 location = \"+150+105\",\n                 size = 30,\n                 font = \"helvetica\",\n                 weight = 700) |&gt; \n  image_annotate(\"        Third Edition\",\n             strokecolor = \"white\",\n             color = \"white\",\n             boxcolor = \"#EEB301\",\n             location = \"+75+480\",\n             style = \"italic\",\n             size = 35) |&gt; \n  image_crop(\"600x600+0+30\")\n\nimage_read(\n  hex_crop(\n    book_logo,\n    just = \"top\",\n    border_size = 8,\n    border_colour = \"black\"\n  )\n) |&gt; \n  image_write(\"hex_logo.png\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nI intend to add more packages as and when I come across them. Watch out for this space in the future too."
  },
  {
    "objectID": "Chapter2.html#question-1",
    "href": "Chapter2.html#question-1",
    "title": "Chapter 2",
    "section": "Question 1",
    "text": "Question 1\nList five functions that you could use to get more information about the mpg dataset.\nHere are the five functions for exploring the mpg dataset from the ggplot2 package in R, along with example code: –\n\n\nUse str(mpg) to display the structure of the dataset mpg telling what is the class of each variable.\n\nCodestr(mpg)\n\ntibble [234 × 11] (S3: tbl_df/tbl/data.frame)\n $ manufacturer: chr [1:234] \"audi\" \"audi\" \"audi\" \"audi\" ...\n $ model       : chr [1:234] \"a4\" \"a4\" \"a4\" \"a4\" ...\n $ displ       : num [1:234] 1.8 1.8 2 2 2.8 2.8 3.1 1.8 1.8 2 ...\n $ year        : int [1:234] 1999 1999 2008 2008 1999 1999 2008 1999 1999 2008 ...\n $ cyl         : int [1:234] 4 4 4 4 6 6 6 4 4 4 ...\n $ trans       : chr [1:234] \"auto(l5)\" \"manual(m5)\" \"manual(m6)\" \"auto(av)\" ...\n $ drv         : chr [1:234] \"f\" \"f\" \"f\" \"f\" ...\n $ cty         : int [1:234] 18 21 20 21 16 18 18 18 16 20 ...\n $ hwy         : int [1:234] 29 29 31 30 26 26 27 26 25 28 ...\n $ fl          : chr [1:234] \"p\" \"p\" \"p\" \"p\" ...\n $ class       : chr [1:234] \"compact\" \"compact\" \"compact\" \"compact\" ...\n\n\n\n\nEmploy glimpse(mpg) to obtain a concise overview of the dataset’s structure and its first few rows, offering a detailed glimpse of the data. It is similar to the previous function str()\n\nCodeglimpse(mpg)\n\nRows: 234\nColumns: 11\n$ manufacturer &lt;chr&gt; \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"…\n$ model        &lt;chr&gt; \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4 quattro\", \"…\n$ displ        &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.…\n$ year         &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, 200…\n$ cyl          &lt;int&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, …\n$ trans        &lt;chr&gt; \"auto(l5)\", \"manual(m5)\", \"manual(m6)\", \"auto(av)\", \"auto…\n$ drv          &lt;chr&gt; \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"4\", \"4\", \"4\", \"4\", \"4…\n$ cty          &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 1…\n$ hwy          &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25, 2…\n$ fl           &lt;chr&gt; \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p…\n$ class        &lt;chr&gt; \"compact\", \"compact\", \"compact\", \"compact\", \"compact\", \"c…\n\n\n\n\nRun summary(mpg) to generate a statistical summary of the variables within the mpg dataset, providing measures like mean, median, and quartiles.\n\nCodesummary(mpg)\n\n manufacturer          model               displ            year     \n Length:234         Length:234         Min.   :1.600   Min.   :1999  \n Class :character   Class :character   1st Qu.:2.400   1st Qu.:1999  \n Mode  :character   Mode  :character   Median :3.300   Median :2004  \n                                       Mean   :3.472   Mean   :2004  \n                                       3rd Qu.:4.600   3rd Qu.:2008  \n                                       Max.   :7.000   Max.   :2008  \n      cyl           trans               drv                 cty       \n Min.   :4.000   Length:234         Length:234         Min.   : 9.00  \n 1st Qu.:4.000   Class :character   Class :character   1st Qu.:14.00  \n Median :6.000   Mode  :character   Mode  :character   Median :17.00  \n Mean   :5.889                                         Mean   :16.86  \n 3rd Qu.:8.000                                         3rd Qu.:19.00  \n Max.   :8.000                                         Max.   :35.00  \n      hwy             fl               class          \n Min.   :12.00   Length:234         Length:234        \n 1st Qu.:18.00   Class :character   Class :character  \n Median :24.00   Mode  :character   Mode  :character  \n Mean   :23.44                                        \n 3rd Qu.:27.00                                        \n Max.   :44.00                                        \n\n\n\n\nUtilize dfSummary(mpg) from the summarytools package to obtain a comprehensive summary report with various statistics and visualizations for the mpg dataset.\n\nCodelibrary(summarytools)\nst_options(plain.ascii = FALSE)\nprint(\n  summarytools::dfSummary(mpg,\n                        plain.ascii = FALSE,\n                        headings = FALSE,\n                        display.labels = FALSE,\n                        silent = TRUE),\n  method = \"render\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo\nVariable\nStats / Values\nFreqs (% of Valid)\nGraph\nValid\nMissing\n\n\n\n1\nmanufacturer [character]\n\n\n1. dodge\n\n\n2. toyota\n\n\n3. volkswagen\n\n\n4. ford\n\n\n5. chevrolet\n\n\n6. audi\n\n\n7. hyundai\n\n\n8. subaru\n\n\n9. nissan\n\n\n10. honda\n\n\n[ 5 others ]\n\n\n\n\n37\n(\n15.8%\n)\n\n\n34\n(\n14.5%\n)\n\n\n27\n(\n11.5%\n)\n\n\n25\n(\n10.7%\n)\n\n\n19\n(\n8.1%\n)\n\n\n18\n(\n7.7%\n)\n\n\n14\n(\n6.0%\n)\n\n\n14\n(\n6.0%\n)\n\n\n13\n(\n5.6%\n)\n\n\n9\n(\n3.8%\n)\n\n\n24\n(\n10.3%\n)\n\n\n\n234 (100.0%)\n0 (0.0%)\n\n\n2\nmodel [character]\n\n\n1. caravan 2wd\n\n\n2. ram 1500 pickup 4wd\n\n\n3. civic\n\n\n4. dakota pickup 4wd\n\n\n5. jetta\n\n\n6. mustang\n\n\n7. a4 quattro\n\n\n8. grand cherokee 4wd\n\n\n9. impreza awd\n\n\n10. a4\n\n\n[ 28 others ]\n\n\n\n\n11\n(\n4.7%\n)\n\n\n10\n(\n4.3%\n)\n\n\n9\n(\n3.8%\n)\n\n\n9\n(\n3.8%\n)\n\n\n9\n(\n3.8%\n)\n\n\n9\n(\n3.8%\n)\n\n\n8\n(\n3.4%\n)\n\n\n8\n(\n3.4%\n)\n\n\n8\n(\n3.4%\n)\n\n\n7\n(\n3.0%\n)\n\n\n146\n(\n62.4%\n)\n\n\n\n234 (100.0%)\n0 (0.0%)\n\n\n3\ndispl [numeric]\n\n\nMean (sd) : 3.5 (1.3)\n\n\nmin ≤ med ≤ max:\n\n\n1.6 ≤ 3.3 ≤ 7\n\n\nIQR (CV) : 2.2 (0.4)\n\n\n35 distinct values\n\n234 (100.0%)\n0 (0.0%)\n\n\n4\nyear [integer]\n\n\nMin : 1999\n\n\nMean : 2003.5\n\n\nMax : 2008\n\n\n\n\n1999\n:\n117\n(\n50.0%\n)\n\n\n2008\n:\n117\n(\n50.0%\n)\n\n\n\n234 (100.0%)\n0 (0.0%)\n\n\n5\ncyl [integer]\n\n\nMean (sd) : 5.9 (1.6)\n\n\nmin ≤ med ≤ max:\n\n\n4 ≤ 6 ≤ 8\n\n\nIQR (CV) : 4 (0.3)\n\n\n\n\n4\n:\n81\n(\n34.6%\n)\n\n\n5\n:\n4\n(\n1.7%\n)\n\n\n6\n:\n79\n(\n33.8%\n)\n\n\n8\n:\n70\n(\n29.9%\n)\n\n\n\n234 (100.0%)\n0 (0.0%)\n\n\n6\ntrans [character]\n\n\n1. auto(av)\n\n\n2. auto(l3)\n\n\n3. auto(l4)\n\n\n4. auto(l5)\n\n\n5. auto(l6)\n\n\n6. auto(s4)\n\n\n7. auto(s5)\n\n\n8. auto(s6)\n\n\n9. manual(m5)\n\n\n10. manual(m6)\n\n\n\n\n5\n(\n2.1%\n)\n\n\n2\n(\n0.9%\n)\n\n\n83\n(\n35.5%\n)\n\n\n39\n(\n16.7%\n)\n\n\n6\n(\n2.6%\n)\n\n\n3\n(\n1.3%\n)\n\n\n3\n(\n1.3%\n)\n\n\n16\n(\n6.8%\n)\n\n\n58\n(\n24.8%\n)\n\n\n19\n(\n8.1%\n)\n\n\n\n234 (100.0%)\n0 (0.0%)\n\n\n7\ndrv [character]\n\n\n1. 4\n\n\n2. f\n\n\n3. r\n\n\n\n\n103\n(\n44.0%\n)\n\n\n106\n(\n45.3%\n)\n\n\n25\n(\n10.7%\n)\n\n\n\n234 (100.0%)\n0 (0.0%)\n\n\n8\ncty [integer]\n\n\nMean (sd) : 16.9 (4.3)\n\n\nmin ≤ med ≤ max:\n\n\n9 ≤ 17 ≤ 35\n\n\nIQR (CV) : 5 (0.3)\n\n\n21 distinct values\n\n234 (100.0%)\n0 (0.0%)\n\n\n9\nhwy [integer]\n\n\nMean (sd) : 23.4 (6)\n\n\nmin ≤ med ≤ max:\n\n\n12 ≤ 24 ≤ 44\n\n\nIQR (CV) : 9 (0.3)\n\n\n27 distinct values\n\n234 (100.0%)\n0 (0.0%)\n\n\n10\nfl [character]\n\n\n1. c\n\n\n2. d\n\n\n3. e\n\n\n4. p\n\n\n5. r\n\n\n\n\n1\n(\n0.4%\n)\n\n\n5\n(\n2.1%\n)\n\n\n8\n(\n3.4%\n)\n\n\n52\n(\n22.2%\n)\n\n\n168\n(\n71.8%\n)\n\n\n\n234 (100.0%)\n0 (0.0%)\n\n\n11\nclass [character]\n\n\n1. 2seater\n\n\n2. compact\n\n\n3. midsize\n\n\n4. minivan\n\n\n5. pickup\n\n\n6. subcompact\n\n\n7. suv\n\n\n\n\n5\n(\n2.1%\n)\n\n\n47\n(\n20.1%\n)\n\n\n41\n(\n17.5%\n)\n\n\n11\n(\n4.7%\n)\n\n\n33\n(\n14.1%\n)\n\n\n35\n(\n15.0%\n)\n\n\n62\n(\n26.5%\n)\n\n\n\n234 (100.0%)\n0 (0.0%)\n\n\n\nGenerated by summarytools 1.0.1 (R version 4.3.1)2023-10-23\n\n\n\n\n\nEnhance data exploration with vis_dat(mpg) from the visdat package, which offers interactive visualizations to better understand the data-set’s contents and identify missing values.\n\nCodelibrary(visdat)\nvisdat::vis_dat(mpg) + scale_fill_brewer(palette = \"Pastel1\") +\n  labs(title = \"A \")"
  },
  {
    "objectID": "Chapter2.html#question-2",
    "href": "Chapter2.html#question-2",
    "title": "Chapter 2",
    "section": "Question 2",
    "text": "Question 2\nHow can you find out what other datasets are included with ggplot2?\nTo find out what datasets are included with the ggplot2 package, you can use the data() function. You can use the data() function to list all the datasets available in the ggplot2 package.\n\nCodedata(package = \"ggplot2\")"
  },
  {
    "objectID": "Chapter2.html#question-3",
    "href": "Chapter2.html#question-3",
    "title": "Chapter 2",
    "section": "Question 3",
    "text": "Question 3\nApart from the US, most countries use fuel consumption (fuel consumed over fixed distance) rather than fuel economy (distance travelled with fixed amount of fuel). How could you convert cty and hwy into the European standard of l/100km?\nIn the R formula, we convert miles per gallon (mpg) to liters per 100 kilometers (L/100km). The conversion factor, 235.21, is used to perform the conversion. To convert mpg to L/100km, we divide the conversion factor by the mpg value.\n\\[ \\text{L/100km} = \\frac{235.21}{\\text{mpg}}  \\tag{1}\\] The conversion factor of 235.21 is derived from the following logic:\n\n1 mile is equal to approximately 1.609 kilometers.\n1 gallon is equal to approximately 3.785 liters.\n\nTo convert from miles per gallon (mpg) to liters per 100 kilometers (L/100km), we need to reverse the units. So, we divide the number of miles (1 mile) by the number of gallons (1 gallon) to get the number of kilometers per liter. This can be expressed as:\n\\[ \\text{Kilometers per Liter} = \\frac{1 \\text{ mile}}{1 \\text{ gallon}} \\times \\frac{1.609 \\text{ kilometers}}{1 \\text{ mile}} \\times \\frac{1 \\text{ liter}}{3.785 \\text{ gallons}} \\approx 0.4251 \\text{ kilometers per liter}  \\tag{2}\\]\nNow, to express fuel efficiency in liters per 100 kilometers, we need to scale up by 100:\n\\[ \\text{L/100km} = \\frac{1}{0.4251} \\times 100 \\approx 235.21 \\text{ L/100km per 1 kilometer per liter}  \\tag{3}\\]\nSo, when you divide 235.21 by miles per gallon (mpg), you are effectively converting from miles per gallon to liters per 100 kilometers, accounting for the differences in units and scaling by 100 to express the consumption over a distance of 100 kilometers.\nNow, you can include the R code and LaTeX explanation in an R Markdown document for a more structured presentation. When you knit the R Markdown document, it will generate a formatted document with both the code and explanations.\n\nCode# Conversion factor from mpg to L/100km\nconversion_factor &lt;- 235.21\n\nmpg |&gt; \n  mutate(\n    cty = conversion_factor/cty,\n    hwy = conversion_factor/hwy\n  ) |&gt; \n  slice_head(n = 5) |&gt; \n  gt() |&gt; gtExtras::gt_theme_538() |&gt; \n  fmt_number(columns = cty:hwy,\n             decimals = 2)\n\n\n\n\n\n\nTable 1:  mpg dataset with mileage in Liters per 100 km \n  \nmanufacturer\n      model\n      displ\n      year\n      cyl\n      trans\n      drv\n      cty\n      hwy\n      fl\n      class\n    \n\n\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n13.07\n8.11\np\ncompact\n\n\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n11.20\n8.11\np\ncompact\n\n\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n11.76\n7.59\np\ncompact\n\n\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n11.20\n7.84\np\ncompact\n\n\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n14.70\n9.05\np\ncompact"
  },
  {
    "objectID": "Chapter2.html#question-4",
    "href": "Chapter2.html#question-4",
    "title": "Chapter 2",
    "section": "Question 4",
    "text": "Question 4\nWhich manufacturer has the most models in this dataset? Which model has the most variations? Does your answer change if you remove the redundant specification of drive train (e.g. “pathfinder 4wd”, “a4 quattro”) from the model name?\nAs we can see below in Table 2, Toyota has the most models in the data-set.\n\nCode# Group 'mpg' data by 'manufacturer.'\nmpg |&gt; \n  group_by(manufacturer) |&gt; \n\n  # Count distinct 'model' values for each manufacturer.\n  summarize(n_models = n_distinct(model)) |&gt; \n\n  # Sort in descending order based on 'n_models.'\n  arrange(desc(n_models)) |&gt; \n  \n  # Select the top 5 manufacturers.\n  slice_head(n = 5) |&gt; \n  \n  # Create a table and apply a specific theme to it.\n  gt() |&gt; gt_theme_538()\n\n\n\n\n\n\nTable 2:  Top 5 manufacturers in mpg data-set as per number of models \n  \nmanufacturer\n      n_models\n    \n\n\ntoyota\n6\n\n\nchevrolet\n4\n\n\ndodge\n4\n\n\nford\n4\n\n\nvolkswagen\n4\n\n\n\n\n\n\n\nThe … model has the most variations.\n\nCodempg |&gt; \n  count(manufacturer, model, sort = TRUE)\n\n# A tibble: 38 × 3\n   manufacturer model                   n\n   &lt;chr&gt;        &lt;chr&gt;               &lt;int&gt;\n 1 dodge        caravan 2wd            11\n 2 dodge        ram 1500 pickup 4wd    10\n 3 dodge        dakota pickup 4wd       9\n 4 ford         mustang                 9\n 5 honda        civic                   9\n 6 volkswagen   jetta                   9\n 7 audi         a4 quattro              8\n 8 jeep         grand cherokee 4wd      8\n 9 subaru       impreza awd             8\n10 audi         a4                      7\n# ℹ 28 more rows"
  }
]