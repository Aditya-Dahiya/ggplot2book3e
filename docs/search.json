[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Solutions Manual (and Beyond) for",
    "section": "",
    "text": "Welcome to the Solutions Manual (and much more!) for the third edition of ggplot2: Elegant Graphics for Data Analysis (3e) by Hadley Wickham, Danielle Navarro, and Thomas Lin Pedersen.\nThis manual is your indispensable companion for this amazing book on understanding the basics of ggplot2 graphics.\nInside these pages, you’ll find a rich trove of techniques to solve the exercises given in the book, and extend them beyond to improve the output.\nI emphasize not just the solving the exercises, but extending ggplot2 capabilities with add-on packages such as gganimate , ggthemes , ggplotly , patchwork , gridExtra , ggrepel , GGally , ggcorrplot , ggmap , magick and, the various extensions to ggplot2 at the ggplot2 extensions webpage.\nThis solutions manual is created by Aditya Dahiya. It is committed to fostering a collaborative learning environment and offers all it’s code and solutions for free. Happy learning!\n\n\n."
  },
  {
    "objectID": "index.html#author-aditya-dahiya",
    "href": "index.html#author-aditya-dahiya",
    "title": "Solutions Manual (and Beyond) for",
    "section": "",
    "text": "Welcome to the Solutions Manual and much more for the third edition of ggplot2: Elegant Graphics for Data Analysis (3e) by Hadley Wickham, Danielle Navarro, and Thomas Lin Pedersen.\nThis manual is your indispensable companion for this amazing book on ggplot2 and R graphics.\nInside these pages, you’ll find a rich trove of techniques to extend the extra-ordinary capabilities to ggplot2 and other packages developed by amazing people all over the world to solve the exercises given in the book, and extend them beyond to improve the output.\nI emphasize not just the solving the exercises, but extending ggplot2 capabilities with add-on packages such as gganimate , ggthemes , ggplotly , patchwork , gridExtra , ggrepel , GGally , ggcorrplot , ggmap , and, the various extensions to ggplot2 at the ggplot2 extensions webpage.\nThis website is committed to fostering a collaborative learning environment and offers all it’s code and solutions for free. Happy learning!\n\n\n."
  },
  {
    "objectID": "solutions.html",
    "href": "solutions.html",
    "title": "Chapter-wise Solutions",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nTitle\n\n\nSubtitle\n\n\n\n\n\n\nChapter 1\n\n\nIntroduction\n\n\n\n\nChapter 10\n\n\nPosition Scales and axes\n\n\n\n\nChapter 11\n\n\nColour Scales and Legends\n\n\n\n\nChapter 12\n\n\nOther aesthetics\n\n\n\n\nChapter 13\n\n\nBuild a plot layer by layer\n\n\n\n\nChapter 14\n\n\nScales and guides\n\n\n\n\nChapter 15\n\n\nCoordinate Systems\n\n\n\n\nChapter 16\n\n\nFaceting\n\n\n\n\nChapter 17\n\n\nThemes\n\n\n\n\nChapter 18\n\n\nProgramming with ggplot2\n\n\n\n\nChapter 19\n\n\nInternals of ggplot2\n\n\n\n\nChapter 2\n\n\nFirst Steps\n\n\n\n\nChapter 20\n\n\nExtending ggplot2\n\n\n\n\nChapter 21\n\n\nA case study\n\n\n\n\nChapter 3\n\n\nIndividual geoms\n\n\n\n\nChapter 4\n\n\nCollective geoms\n\n\n\n\nChapter 5\n\n\nStatistical Summaries\n\n\n\n\nChapter 6\n\n\nMaps\n\n\n\n\nChapter 7\n\n\nNetworks\n\n\n\n\nChapter 8\n\n\nAnnotations\n\n\n\n\nChapter 9\n\n\nArranging Plots\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Chapter8.html",
    "href": "Chapter8.html",
    "title": "Chapter 8",
    "section": "",
    "text": "Warning\n\n\n\nThis Chapter has no exercises. So, we explore annotations and packages using Holiday Episodes data from #TidyTuesday All code is annotated to explain the steps.\nLoading Libraries and the Data-Set: —\nlibrary(tidyverse)         # data wrangling and ggplot2\nlibrary(summarytools)      # EDA\nlibrary(gt)                # Tables\nlibrary(ggthemes)          # Themes\nlibrary(ggtext)            # Text, Annotations and Markdown\nlibrary(magick)            # Images\n\ntuesdata &lt;- tidytuesdayR::tt_load('2023-12-19')\n\n\n    Downloading file 1 of 2: `holiday_episodes.csv`\n    Downloading file 2 of 2: `holiday_episode_genres.csv`\n\nholep &lt;- tuesdata$holiday_episodes\nholep_genres &lt;- tuesdata$holiday_episode_genres\nrm(tuesdata)\nA look at 5 rows of the complete data set: —\nCode# Pipe the 'holep' dataframe through a series of operations using the magrittr pipe operator %&gt;%\nholep |&gt; \n  \n  # Select the first 5 rows for top 5 highest votes received TV episodes\n  slice_max(num_votes, n = 5) |&gt; \n  \n  # Create a gt table\n  gt() |&gt; \n  \n  # Label columns using janitor::make_clean_names function\n  cols_label_with(fn = ~ janitor::make_clean_names(., case = \"title\")) |&gt; \n \n   # Apply styling to the table cells to make the text small\n  tab_style(\n    style = cell_text(size = \"small\"),\n    locations = cells_body()\n  ) |&gt; \n  \n  # Apply the gt theme from gtExtras package\n  gtExtras::gt_theme_nytimes()\n\n\n\n\n\n\nTconst\n      Parent Tconst\n      Season Number\n      Episode Number\n      Primary Title\n      Original Title\n      Year\n      Runtime Minutes\n      Genres\n      Simple Title\n      Average Rating\n      Num Votes\n      Parent Title Type\n      Parent Primary Title\n      Parent Original Title\n      Parent Start Year\n      Parent End Year\n      Parent Runtime Minutes\n      Parent Genres\n      Parent Simple Title\n      Parent Average Rating\n      Parent Num Votes\n      Christmas\n      Hanukkah\n      Kwanzaa\n      Holiday\n    \n\n\ntt3973198\ntt2085059\n2\n4\nWhite Christmas\nWhite Christmas\n2014\n73\nDrama,Mystery,Sci-Fi\nwhite christmas\n9.1\n66843\ntvSeries\nBlack Mirror\nBlack Mirror\n2011\nNA\n60\nDrama,Mystery,Sci-Fi\nblack mirror\n8.7\n620664\nTRUE\nFALSE\nFALSE\nFALSE\n\n\ntt10166582\ntt10160804\n1\n6\nSo This Is Christmas?\nSo This Is Christmas?\n2021\n61\nAction,Adventure,Crime\nso this is christmas\n8.0\n11460\ntvMiniSeries\nHawkeye\nHawkeye\n2021\n2021\n339\nAction,Adventure,Crime\nhawkeye\n7.5\n206915\nTRUE\nFALSE\nFALSE\nFALSE\n\n\ntt1672218\ntt0436992\n6\n0\nA Christmas Carol\nA Christmas Carol\n2010\n62\nAdventure,Drama,Sci-Fi\na christmas carol\n8.5\n8109\ntvSeries\nDoctor Who\nDoctor Who\n2005\nNA\n45\nAdventure,Drama,Sci-Fi\ndoctor who\n8.6\n239270\nTRUE\nFALSE\nFALSE\nFALSE\n\n\ntt0562994\ntt0436992\n2\n0\nThe Christmas Invasion\nThe Christmas Invasion\n2005\n60\nAdventure,Drama,Sci-Fi\nthe christmas invasion\n8.0\n8089\ntvSeries\nDoctor Who\nDoctor Who\n2005\nNA\n45\nAdventure,Drama,Sci-Fi\ndoctor who\n8.6\n239270\nTRUE\nFALSE\nFALSE\nFALSE\n\n\ntt0664513\ntt0386676\n2\n10\nChristmas Party\nChristmas Party\n2005\n22\nComedy\nchristmas party\n8.7\n7369\ntvSeries\nThe Office\nThe Office\n2005\n2013\n22\nComedy\nthe office\n9.0\n680216\nTRUE\nFALSE\nFALSE\nFALSE"
  },
  {
    "objectID": "Chapter6.html",
    "href": "Chapter6.html",
    "title": "Chapter 6",
    "section": "",
    "text": "Note\n\n\n\nThis Chapter does not have Exercises. The code and examples below show map plotting in R with tidyverse and sf with examples from India.\nCodelibrary(tidyverse)     # everything and ggplot2\nlibrary(sf)            # sf and shape files\nlibrary(ggthemes)      # for theme_map\nlibrary(ggspatial)     # map annotations\nlibrary(ggmap)         # to get base raster tiles for maps\n\n# Reading in the shape file of the map of India\nindia_map &lt;- read_sf(here::here(\"data\", \n                                \"india_map\", \n                                \"India_State_Boundary.shp\")) |&gt; \n  # tidy names of variables\n  rename(state = State_Name) |&gt; \n  # Renaming to official names. Official names taken from Government:\n  # https://knowindia.india.gov.in/states-uts/\n  mutate(state = case_when(\n    state == \"Andaman & Nicobar\" ~ \"Andaman and Nicobar Islands\",\n    state == \"Daman and Diu and Dadra and Nagar Haveli\" ~ \"Dadra and Nagar Haveli and Daman & Diu\",\n    state == \"Jammu and Kashmir\" ~ \"Jammu & Kashmir\",\n    state == \"Telengana\" ~ \"Telangana\",\n    .default = state\n  ))\n\n# Add names of Union Territories\nunion_territories &lt;- c(\n  \"Andaman and Nicobar Islands\",\n  \"Chandigarh\",\n  \"Dadra and Nagar Haveli and Daman & Diu\",\n  \"Delhi\",\n  \"Jammu & Kashmir\",\n  \"Ladakh\",\n  \"Lakshadweep\",\n  \"Puducherry\"\n)\n\n# Getting in a dataframe with map of State of Haryana in India\nharyana_map &lt;- read_sf(here::here(\"data\",\n                                  \"haryana_map\",\n                                  \"HARYANA_DISTRICT_BDY.shp\")) |&gt; \n  janitor::clean_names() |&gt; \n  mutate(\n    district = str_replace_all(district,\n                               pattern = \"&gt;\",\n                               replacement = \"A\"),\n    state = str_replace_all(state,\n                            pattern = \"&gt;\",\n                            replacement = \"A\"),\n    district = case_when(\n      district == \"FAR|DABAD\" ~ \"FARIDABAD\",\n      district == \"J|ND\" ~ \"JIND\",\n      district == \"PAN|PAT\" ~ \"PANIPAT\",\n      district == \"SON|PAT\" ~ \"SONIPAT\",\n      .default = district\n    ),\n    district = snakecase::to_title_case(district)\n      )"
  },
  {
    "objectID": "Chapter4.html",
    "href": "Chapter4.html",
    "title": "Chapter 4",
    "section": "",
    "text": "Codelibrary(tidyverse)"
  },
  {
    "objectID": "Chapter21.html",
    "href": "Chapter21.html",
    "title": "Chapter 21",
    "section": "",
    "text": "Warning\n\n\n\nSolutions for this chapter are under construction."
  },
  {
    "objectID": "Chapter2.html",
    "href": "Chapter2.html",
    "title": "Chapter 2",
    "section": "",
    "text": "List five functions that you could use to get more information about the mpg dataset.\nHere are the five functions for exploring the mpg dataset from the ggplot2 package in R, along with example code: –\n\n\nUse str(mpg) to display the structure of the dataset mpg telling what is the class of each variable.\n\nCodestr(mpg)\n\ntibble [234 × 11] (S3: tbl_df/tbl/data.frame)\n $ manufacturer: chr [1:234] \"audi\" \"audi\" \"audi\" \"audi\" ...\n $ model       : chr [1:234] \"a4\" \"a4\" \"a4\" \"a4\" ...\n $ displ       : num [1:234] 1.8 1.8 2 2 2.8 2.8 3.1 1.8 1.8 2 ...\n $ year        : int [1:234] 1999 1999 2008 2008 1999 1999 2008 1999 1999 2008 ...\n $ cyl         : int [1:234] 4 4 4 4 6 6 6 4 4 4 ...\n $ trans       : chr [1:234] \"auto(l5)\" \"manual(m5)\" \"manual(m6)\" \"auto(av)\" ...\n $ drv         : chr [1:234] \"f\" \"f\" \"f\" \"f\" ...\n $ cty         : int [1:234] 18 21 20 21 16 18 18 18 16 20 ...\n $ hwy         : int [1:234] 29 29 31 30 26 26 27 26 25 28 ...\n $ fl          : chr [1:234] \"p\" \"p\" \"p\" \"p\" ...\n $ class       : chr [1:234] \"compact\" \"compact\" \"compact\" \"compact\" ...\n\n\n\n\nEmploy glimpse(mpg) to obtain a concise overview of the dataset’s structure and its first few rows, offering a detailed glimpse of the data. It is similar to the previous function str()\n\nCodeglimpse(mpg)\n\nRows: 234\nColumns: 11\n$ manufacturer &lt;chr&gt; \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"…\n$ model        &lt;chr&gt; \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4 quattro\", \"…\n$ displ        &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.…\n$ year         &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, 200…\n$ cyl          &lt;int&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, …\n$ trans        &lt;chr&gt; \"auto(l5)\", \"manual(m5)\", \"manual(m6)\", \"auto(av)\", \"auto…\n$ drv          &lt;chr&gt; \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"4\", \"4\", \"4\", \"4\", \"4…\n$ cty          &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 1…\n$ hwy          &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25, 2…\n$ fl           &lt;chr&gt; \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p…\n$ class        &lt;chr&gt; \"compact\", \"compact\", \"compact\", \"compact\", \"compact\", \"c…\n\n\n\n\nRun summary(mpg) to generate a statistical summary of the variables within the mpg dataset, providing measures like mean, median, and quartiles.\n\nCodesummary(mpg)\n\n manufacturer          model               displ            year     \n Length:234         Length:234         Min.   :1.600   Min.   :1999  \n Class :character   Class :character   1st Qu.:2.400   1st Qu.:1999  \n Mode  :character   Mode  :character   Median :3.300   Median :2004  \n                                       Mean   :3.472   Mean   :2004  \n                                       3rd Qu.:4.600   3rd Qu.:2008  \n                                       Max.   :7.000   Max.   :2008  \n      cyl           trans               drv                 cty       \n Min.   :4.000   Length:234         Length:234         Min.   : 9.00  \n 1st Qu.:4.000   Class :character   Class :character   1st Qu.:14.00  \n Median :6.000   Mode  :character   Mode  :character   Median :17.00  \n Mean   :5.889                                         Mean   :16.86  \n 3rd Qu.:8.000                                         3rd Qu.:19.00  \n Max.   :8.000                                         Max.   :35.00  \n      hwy             fl               class          \n Min.   :12.00   Length:234         Length:234        \n 1st Qu.:18.00   Class :character   Class :character  \n Median :24.00   Mode  :character   Mode  :character  \n Mean   :23.44                                        \n 3rd Qu.:27.00                                        \n Max.   :44.00                                        \n\n\n\n\nUtilize dfSummary(mpg) from the summarytools package to obtain a comprehensive summary report with various statistics and visualizations for the mpg dataset.\n\nCodelibrary(summarytools)\nst_options(plain.ascii = FALSE)\nprint(\n  summarytools::dfSummary(mpg,\n                        plain.ascii = FALSE,\n                        headings = FALSE,\n                        display.labels = FALSE,\n                        silent = TRUE),\n  method = \"render\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo\nVariable\nStats / Values\nFreqs (% of Valid)\nGraph\nValid\nMissing\n\n\n\n1\nmanufacturer [character]\n\n\n1. dodge\n\n\n2. toyota\n\n\n3. volkswagen\n\n\n4. ford\n\n\n5. chevrolet\n\n\n6. audi\n\n\n7. hyundai\n\n\n8. subaru\n\n\n9. nissan\n\n\n10. honda\n\n\n[ 5 others ]\n\n\n\n\n37\n(\n15.8%\n)\n\n\n34\n(\n14.5%\n)\n\n\n27\n(\n11.5%\n)\n\n\n25\n(\n10.7%\n)\n\n\n19\n(\n8.1%\n)\n\n\n18\n(\n7.7%\n)\n\n\n14\n(\n6.0%\n)\n\n\n14\n(\n6.0%\n)\n\n\n13\n(\n5.6%\n)\n\n\n9\n(\n3.8%\n)\n\n\n24\n(\n10.3%\n)\n\n\n\n234 (100.0%)\n0 (0.0%)\n\n\n2\nmodel [character]\n\n\n1. caravan 2wd\n\n\n2. ram 1500 pickup 4wd\n\n\n3. civic\n\n\n4. dakota pickup 4wd\n\n\n5. jetta\n\n\n6. mustang\n\n\n7. a4 quattro\n\n\n8. grand cherokee 4wd\n\n\n9. impreza awd\n\n\n10. a4\n\n\n[ 28 others ]\n\n\n\n\n11\n(\n4.7%\n)\n\n\n10\n(\n4.3%\n)\n\n\n9\n(\n3.8%\n)\n\n\n9\n(\n3.8%\n)\n\n\n9\n(\n3.8%\n)\n\n\n9\n(\n3.8%\n)\n\n\n8\n(\n3.4%\n)\n\n\n8\n(\n3.4%\n)\n\n\n8\n(\n3.4%\n)\n\n\n7\n(\n3.0%\n)\n\n\n146\n(\n62.4%\n)\n\n\n\n234 (100.0%)\n0 (0.0%)\n\n\n3\ndispl [numeric]\n\n\nMean (sd) : 3.5 (1.3)\n\n\nmin ≤ med ≤ max:\n\n\n1.6 ≤ 3.3 ≤ 7\n\n\nIQR (CV) : 2.2 (0.4)\n\n\n35 distinct values\n\n234 (100.0%)\n0 (0.0%)\n\n\n4\nyear [integer]\n\n\nMin : 1999\n\n\nMean : 2003.5\n\n\nMax : 2008\n\n\n\n\n1999\n:\n117\n(\n50.0%\n)\n\n\n2008\n:\n117\n(\n50.0%\n)\n\n\n\n234 (100.0%)\n0 (0.0%)\n\n\n5\ncyl [integer]\n\n\nMean (sd) : 5.9 (1.6)\n\n\nmin ≤ med ≤ max:\n\n\n4 ≤ 6 ≤ 8\n\n\nIQR (CV) : 4 (0.3)\n\n\n\n\n4\n:\n81\n(\n34.6%\n)\n\n\n5\n:\n4\n(\n1.7%\n)\n\n\n6\n:\n79\n(\n33.8%\n)\n\n\n8\n:\n70\n(\n29.9%\n)\n\n\n\n234 (100.0%)\n0 (0.0%)\n\n\n6\ntrans [character]\n\n\n1. auto(av)\n\n\n2. auto(l3)\n\n\n3. auto(l4)\n\n\n4. auto(l5)\n\n\n5. auto(l6)\n\n\n6. auto(s4)\n\n\n7. auto(s5)\n\n\n8. auto(s6)\n\n\n9. manual(m5)\n\n\n10. manual(m6)\n\n\n\n\n5\n(\n2.1%\n)\n\n\n2\n(\n0.9%\n)\n\n\n83\n(\n35.5%\n)\n\n\n39\n(\n16.7%\n)\n\n\n6\n(\n2.6%\n)\n\n\n3\n(\n1.3%\n)\n\n\n3\n(\n1.3%\n)\n\n\n16\n(\n6.8%\n)\n\n\n58\n(\n24.8%\n)\n\n\n19\n(\n8.1%\n)\n\n\n\n234 (100.0%)\n0 (0.0%)\n\n\n7\ndrv [character]\n\n\n1. 4\n\n\n2. f\n\n\n3. r\n\n\n\n\n103\n(\n44.0%\n)\n\n\n106\n(\n45.3%\n)\n\n\n25\n(\n10.7%\n)\n\n\n\n234 (100.0%)\n0 (0.0%)\n\n\n8\ncty [integer]\n\n\nMean (sd) : 16.9 (4.3)\n\n\nmin ≤ med ≤ max:\n\n\n9 ≤ 17 ≤ 35\n\n\nIQR (CV) : 5 (0.3)\n\n\n21 distinct values\n\n234 (100.0%)\n0 (0.0%)\n\n\n9\nhwy [integer]\n\n\nMean (sd) : 23.4 (6)\n\n\nmin ≤ med ≤ max:\n\n\n12 ≤ 24 ≤ 44\n\n\nIQR (CV) : 9 (0.3)\n\n\n27 distinct values\n\n234 (100.0%)\n0 (0.0%)\n\n\n10\nfl [character]\n\n\n1. c\n\n\n2. d\n\n\n3. e\n\n\n4. p\n\n\n5. r\n\n\n\n\n1\n(\n0.4%\n)\n\n\n5\n(\n2.1%\n)\n\n\n8\n(\n3.4%\n)\n\n\n52\n(\n22.2%\n)\n\n\n168\n(\n71.8%\n)\n\n\n\n234 (100.0%)\n0 (0.0%)\n\n\n11\nclass [character]\n\n\n1. 2seater\n\n\n2. compact\n\n\n3. midsize\n\n\n4. minivan\n\n\n5. pickup\n\n\n6. subcompact\n\n\n7. suv\n\n\n\n\n5\n(\n2.1%\n)\n\n\n47\n(\n20.1%\n)\n\n\n41\n(\n17.5%\n)\n\n\n11\n(\n4.7%\n)\n\n\n33\n(\n14.1%\n)\n\n\n35\n(\n15.0%\n)\n\n\n62\n(\n26.5%\n)\n\n\n\n234 (100.0%)\n0 (0.0%)\n\n\n\nGenerated by summarytools 1.0.1 (R version 4.3.1)2023-10-23\n\n\n\n\n\nEnhance data exploration with vis_dat(mpg) from the visdat package, which offers interactive visualizations to better understand the data-set’s contents and identify missing values.\n\nCodelibrary(visdat)\n\nvisdat::vis_dat(mpg) + scale_fill_brewer(palette = \"Pastel1\") +\n  labs(title = \"An overview of the data using vis_dat() from visdat package\")\n\n\n\n\n\n\nHow can you find out what other datasets are included with ggplot2?\nTo find out what datasets are included with the ggplot2 package, you can use the data() function. You can use the data() function to list all the datasets available in the ggplot2 package.\n\nCodedata(package = \"ggplot2\")\n\n\n\nApart from the US, most countries use fuel consumption (fuel consumed over fixed distance) rather than fuel economy (distance travelled with fixed amount of fuel). How could you convert cty and hwy into the European standard of l/100km?\nIn the R formula, we convert miles per gallon (mpg) to liters per 100 kilometers (L/100km). The conversion factor, 235.21, is used to perform the conversion. To convert mpg to L/100km, we divide the conversion factor by the mpg value.\n\\[ \\text{L/100km} = \\frac{235.21}{\\text{mpg}}  \\tag{1}\\] The conversion factor of 235.21 is derived from the following logic:\n\n1 mile is equal to approximately 1.609 kilometers.\n1 gallon is equal to approximately 3.785 liters.\n\nTo convert from miles per gallon (mpg) to liters per 100 kilometers (L/100km), we need to reverse the units. So, we divide the number of miles (1 mile) by the number of gallons (1 gallon) to get the number of kilometers per liter. This can be expressed as:\n\\[ \\text{Kilometers per Liter} = \\frac{1 \\text{ mile}}{1 \\text{ gallon}} \\times \\frac{1.609 \\text{ kilometers}}{1 \\text{ mile}} \\times \\frac{1 \\text{ liter}}{3.785 \\text{ gallons}} \\approx 0.4251 \\text{ kilometers per liter}  \\tag{2}\\]\nNow, to express fuel efficiency in liters per 100 kilometers, we need to scale up by 100:\n\\[ \\text{L/100km} = \\frac{1}{0.4251} \\times 100 \\approx 235.21 \\text{ L/100km per 1 kilometer per liter}  \\tag{3}\\]\nSo, when you divide 235.21 by miles per gallon (mpg), you are effectively converting from miles per gallon to liters per 100 kilometers, accounting for the differences in units and scaling by 100 to express the consumption over a distance of 100 kilometers.\nNow, you can include the R code and LaTeX explanation in an R Markdown document for a more structured presentation. When you knit the R Markdown document, it will generate a formatted document with both the code and explanations.\n\nCode# Conversion factor from mpg to L/100km\nconversion_factor &lt;- 235.21\n\nmpg |&gt; \n  mutate(\n    cty = conversion_factor/cty,\n    hwy = conversion_factor/hwy\n  ) |&gt; \n  slice_head(n = 5) |&gt; \n  gt() |&gt; gtExtras::gt_theme_538() |&gt; \n  fmt_number(columns = cty:hwy,\n             decimals = 2)\n\n\n\n\n\n\nTable 1:  mpg dataset with mileage in Liters per 100 km \n  \nmanufacturer\n      model\n      displ\n      year\n      cyl\n      trans\n      drv\n      cty\n      hwy\n      fl\n      class\n    \n\n\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n13.07\n8.11\np\ncompact\n\n\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n11.20\n8.11\np\ncompact\n\n\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n11.76\n7.59\np\ncompact\n\n\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n11.20\n7.84\np\ncompact\n\n\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n14.70\n9.05\np\ncompact\n\n\n\n\n\n\n\n\nWhich manufacturer has the most models in this dataset? Which model has the most variations? Does your answer change if you remove the redundant specification of drive train (e.g. “pathfinder 4wd”, “a4 quattro”) from the model name?\nAs we can see below in Table 2, Toyota has the most models in the data-set.\n\nCode# Group 'mpg' data by 'manufacturer.'\nmpg |&gt; \n  group_by(manufacturer) |&gt; \n\n  # Count distinct 'model' values for each manufacturer.\n  summarize(models = n_distinct(model)) |&gt; \n\n  # Sort in descending order based on 'n_models.'\n  arrange(desc(models)) |&gt; \n  \n  # Select the top 5 manufacturers.\n  slice_head(n = 5) |&gt; \n  \n  # Create a table and apply a specific theme to it.\n  gt() |&gt; gt_theme_538()\n\n\n\n\n\n\nTable 2:  Top 5 manufacturers in mpg data-set as per number of models \n  \nmanufacturer\n      models\n    \n\n\ntoyota\n6\n\n\nchevrolet\n4\n\n\ndodge\n4\n\n\nford\n4\n\n\nvolkswagen\n4\n\n\n\n\n\n\n\nAnd, as we can see in the Table 3 below, the Dodge Caravan (2 wheel drive) model has the most variations, i.e., 11 in number.\n\nCodempg |&gt; \n  count(manufacturer, model, sort = TRUE) |&gt; \n  slice_head(n = 5) |&gt; \n  rename(variations = n) |&gt; \n  gt() |&gt; gt_theme_538()\n\n\n\n\n\n\nTable 3:  Number of variations in the different models of cars - top 5 \n  \nmanufacturer\n      model\n      variations\n    \n\n\ndodge\ncaravan 2wd\n11\n\n\ndodge\nram 1500 pickup 4wd\n10\n\n\ndodge\ndakota pickup 4wd\n9\n\n\nford\nmustang\n9\n\n\nhonda\ncivic\n9"
  },
  {
    "objectID": "Chapter18.html",
    "href": "Chapter18.html",
    "title": "Chapter 18",
    "section": "",
    "text": "Codelibrary(tidyverse)\nlibrary(ggthemes)\nlibrary(scales)\nlibrary(cowplot)\nlibrary(colorspace)",
    "crumbs": [
      "Home",
      "Advanced Topics",
      "Chapter 18"
    ]
  },
  {
    "objectID": "Chapter16.html",
    "href": "Chapter16.html",
    "title": "Chapter 16",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\nlibrary(gt)\nlibrary(scales)"
  },
  {
    "objectID": "Chapter14.html",
    "href": "Chapter14.html",
    "title": "Chapter 14",
    "section": "",
    "text": "This chapter has no exercises (yet!), so we show some examples to demonstrate the customization of scales.\nCodelibrary(tidyverse)\nlibrary(scales)\nlibrary(ggnewscale)\nlibrary(gt)\nlibrary(gtExtras)\nlibrary(cowplot)\nA dummy data set to use for demonstrating scales in ggplot2 is shown in Figure 1\nCodetb &lt;- tibble(\n  v_random_number = sample(0:100, size = 10, replace = FALSE),\n  v_continuous = 1:10,\n  v_discrete = sample(letters, 10),\n  v_expo = (1:10)^4\n)\n\ntb |&gt; gt() |&gt; gt_theme_538()\n\n\n\n\n\n\nv_random_number\nv_continuous\nv_discrete\nv_expo\n\n\n\n6\n1\ni\n1\n\n\n89\n2\nm\n16\n\n\n45\n3\nv\n81\n\n\n100\n4\nc\n256\n\n\n12\n5\ne\n625\n\n\n84\n6\nn\n1296\n\n\n2\n7\nu\n2401\n\n\n59\n8\nx\n4096\n\n\n55\n9\nw\n6561\n\n\n61\n10\nr\n10000\n\n\n\n\n\n\nFigure 1: Dummy data set created for demonstration of scales in ggplot2",
    "crumbs": [
      "Home",
      "The Grammer",
      "Chapter 14"
    ]
  },
  {
    "objectID": "Chapter12.html",
    "href": "Chapter12.html",
    "title": "Chapter 12",
    "section": "",
    "text": "This chapter has no exercises, so we use the plot created in Chapter 11 to customize some aesthetics explained in this Chapter.\n\n\n\n\nCodelibrary(tidyverse)\nlibrary(readxl)\nlibrary(ggwordcloud)\nlibrary(lubridate)\n\n\n12.1 Size & 12.2 Shape\nLet us customize the size and shape aesthetics in map of Delhi with Movie Theater Locations ( Figure 1 ), made in Chapter 11 (Section 11.7), and change the shapes, colours and sizes to produce Figure 2 .\n\nCode#==============================================================================#\n# Library Load-in---------------------------------------------------------------\n#==============================================================================#\nlibrary(tidyverse)      # Data wrangling and plotting\nlibrary(osmdata)        # Wrapper for Overpass API from Open Street Maps\nlibrary(janitor)        # Cleaning names\nlibrary(sf)             # For plotting maps\nlibrary(here)           # Files location and loading\nlibrary(paletteer)      # Lots of Color Palettes in R\nlibrary(colorspace)     # Lightening and Darkening Colors\nlibrary(showtext)       # Using Fonts More Easily in R Graphs\nlibrary(fontawesome)    # Social Media icons\nlibrary(ggtext)         # Markdown Text in ggplot2\nlibrary(patchwork)      # For compiling plots\nlibrary(magick)         # Work with Images and Logos\nlibrary(ggimage)        # Background Image\n\n\n#==============================================================================#\n# Data Load-in------------------------------------------------------------------\n#==============================================================================#\n\ndel_mov &lt;- read_csv(\"https://raw.githubusercontent.com/HarshaDevulapalli/indian-movie-theatres/master/indian-movie-theatres.csv\") |&gt; \n  filter(city == \"Delhi\")\n\nmain_roads &lt;- st_read(here::here(\"data\", \n                                 \"delhi_osm\",\n                                 \"delhi_main_roads.shp\"))\nst_crs(main_roads) &lt;- \"WGS 84\"\n\nminor_roads &lt;- st_read(here::here(\"data\", \n                                  \"delhi_osm\",\n                                  \"delhi_minor_roads.shp\")) \nst_crs(minor_roads) &lt;- \"WGS 84\"\n\nvery_minor_roads &lt;- st_read(here::here(\"data\", \n                                       \"delhi_osm\",\n                                       \"delhi_veryminor_roads.shp\")) \nst_crs(very_minor_roads) &lt;- \"WGS 84\"\n\n#==============================================================================#\n# Data Wrangling----------------------------------------------------------------\n#==============================================================================#\n\ncoords &lt;- del_mov |&gt; \n  summarise(\n    top = max(lat),\n    bottom = min(lat),\n    left = min(lon),\n    right = max(lon)\n  ) |&gt; \n  as_vector()\n\n# Adjust to remove the one leftmost (westward) cniema hall - outlier\npercentage_removal_factor = 0.2\ncoords[3] &lt;- coords[3] + \n  ((coords[4] - coords[3]) * percentage_removal_factor)\n\n# Impute average value to NAs\n\nimpute_na &lt;- median(del_mov$average_ticket_price, na.rm = TRUE)\ndel_mov &lt;- del_mov |&gt; \n  mutate(average_ticket_price = \n           if_else(is.na(average_ticket_price),\n                   impute_na,\n                   average_ticket_price))\n\n\n#==============================================================================#\n# Options & Visualization Parameters--------------------------------------------\n#==============================================================================#\n\n# Load fonts\nfont_add_google(\"Limelight\", \n                family = \"title_font\")       # Font for titles\nfont_add_google(\"Saira Extra Condensed\", \n                family = \"caption_font\")     # Font for the caption\nfont_add_google(\"Bree Serif\", \n                family = \"body_font\")        # Font for plot text\nshowtext_auto()\n\n# Colour Palette\nmypal_c &lt;- paletteer::scale_colour_paletteer_c(\"ggthemes::Purple\")\nmypal &lt;- paletteer::paletteer_d(\"rcartocolor::Purp\")\n\n# Define colours\nlow_col &lt;- mypal[4]                   # Low colour\nhi_col &lt;- mypal[6]                    # High colour\nbg_col &lt;- mypal[3] |&gt; lighten(0.9)    # Background Colour\ntext_col &lt;- mypal[1] |&gt; darken(0.6)   # Colour for the text\ntext_hil &lt;- mypal[6] |&gt; darken(0.4)   # Colour for the title\n\n# Caption stuff\nsysfonts::font_add(family = \"Font Awesome 6 Brands\",\n                   regular = here::here(\"docs\", \"Font Awesome 6 Brands-Regular-400.otf\"))\ngithub &lt;- \"&#xf09b\"\ngithub_username &lt;- \"aditya-dahiya\"\nxtwitter &lt;- \"&#xe61b\"\nxtwitter_username &lt;- \"@adityadahiyaias\"\nlinkedin &lt;- \"&#xf08c\"\nlinkedin_username &lt;- \"dr-aditya-dahiya-ias\"\nsocial_caption &lt;- glue::glue(\"&lt;span style='font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{github};&lt;/span&gt; &lt;span style='color: {text_col}'&gt;{github_username}  &lt;/span&gt; &lt;span style='font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{xtwitter};&lt;/span&gt; &lt;span style='color: {text_col}'&gt;{xtwitter_username}&lt;/span&gt; &lt;span style='font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{linkedin};&lt;/span&gt; &lt;span style='color: {text_col}'&gt;{linkedin_username}&lt;/span&gt;\")\n\n# Add text to plot--------------------------------------------------------------\nplot_title &lt;- \"Movie Theatres in Delhi\"\n\nsubtitle_text &lt;- \"Most theatres are in North or South Delhi, with a central vacant band around Lutyens Delhi !\"\nplot_subtitle &lt;- paste(strwrap(subtitle_text, 100), collapse = \"\\n\")\n\nplot_caption &lt;- paste0(\"**Data:** Harsha Devulapalli  |  \", \"**Graphics:** \", social_caption)\n\n#==============================================================================#\n# Data Visualization------------------------------------------------------------\n#==============================================================================#\n\n\n\n\n  \ng &lt;- ggplot() +\n  geom_sf(\n    data = \n      main_roads |&gt; \n      mutate(geometry = st_simplify(\n        geometry, \n        dTolerance = 50,\n        preserveTopology = TRUE)),\n    mapping = aes(geometry = geometry),\n    color = low_col,\n    linewidth = 1,\n    alpha = 0.4) +\n  geom_sf(\n    data = \n      minor_roads |&gt; \n      mutate(geometry = st_simplify(\n        geometry, \n        dTolerance = 1,\n        preserveTopology = TRUE)),\n    color = low_col,\n    linewidth = 0.7,\n    alpha = 0.3) +\n  geom_sf(\n    data = \n      very_minor_roads |&gt; \n      mutate(geometry = st_simplify(\n        geometry, \n        dTolerance = 10,\n        preserveTopology = TRUE)),\n    color = low_col,\n    linewidth = 0.3,\n    alpha = 0.2) +\n  geom_point(\n    data = del_mov,\n    mapping = aes(\n      x = lon,\n      y = lat,\n      size = total_seats,\n      fill = average_ticket_price\n    ),\n    pch = 21,\n    color = text_hil,\n    alpha = 0.6\n  ) +\n  ggrepel::geom_text_repel(\n    data = del_mov,\n    mapping = aes(\n      x = lon,\n      y = lat,\n      label = theatre_name\n    ),\n    alpha = 0.95,\n    family = \"body_font\",\n    colour = text_col,\n    seed = 42,\n    size = 10,\n    segment.color = text_col\n  ) +\n  coord_sf(\n    xlim = coords[c(\"left\", \"right\")],\n    ylim = coords[c(\"bottom\", \"top\")],\n    expand = FALSE) +\n  scale_fill_paletteer_c(\"ggthemes::Purple\") +\n  scale_size_continuous(range = c(1, 15)) +\n  labs(title = plot_title,\n       subtitle = plot_subtitle,\n       caption = plot_caption,\n       fill = \"Average Ticket Price (in Rs.)\",\n       size = \"Total Number of Seats\") +\n  theme_void() + \n  guides(fill = guide_colorbar(title.position = \"top\",\n                               barheight = unit(0.5, \"cm\"),\n                               barwidth = unit(8, \"cm\")),\n         size = guide_legend(title.position = \"top\",\n                             keywidth = unit(0.5, \"cm\"),\n                             keyheight = unit(0.5, \"cm\"),\n                             label.hjust = 0)) +\n  theme(\n    plot.caption =  element_textbox(family = \"caption_font\",\n                                    hjust = 0.5,\n                                    colour = text_col,\n                                    size = unit(40, \"cm\")),\n    plot.title   =     element_text(hjust = 0.5,\n                                    size = unit(175, \"cm\"),\n                                    margin = margin(0.3,0,0.2,0, \n                                                    unit = \"cm\"),\n                                    family = \"title_font\",\n                                    face = \"bold\",\n                                    colour = text_col),\n    plot.subtitle    = element_text(hjust = 0.5,\n                                    size = unit(50, \"cm\"),\n                                    family = \"body_font\",\n                                    colour = text_col,\n                                    margin = margin(0,0,0.2,0, \n                                                    unit = \"cm\")),\n    plot.background =  element_rect(fill = bg_col,\n                                    color = bg_col,\n                                    linewidth = 0),\n    legend.position = \"bottom\",\n    legend.text = element_text(hjust = 0.5,\n                               size = unit(40, \"cm\"),\n                               family = \"body_font\",\n                               colour = text_col),\n    legend.title = element_text(hjust = 0.5,\n                                size = 50,\n                                family = \"body_font\",\n                                colour = text_col,\n                                margin = margin(0,0,0,0)),\n    legend.box.margin = margin(0,0,0.5,0, unit = \"cm\"),\n    legend.box = \"horizontal\",\n    legend.spacing.y = unit(0.2, \"cm\")\n  )\n\n\n\n\n#=============================================================================#\n# Image Saving-----------------------------------------------------------------\n#=============================================================================#\n\n\nggsave(\n  filename = here::here(\"docs\", \"delhimovies_tidy.png\"),\n  plot = g,\n  device = \"png\", \n  dpi = \"retina\", \n  width = unit(10, \"cm\"), \n  height = unit(10, \"cm\"),\n  bg = bg_col\n)\n\n\n\n\nFigure 1: Original Plot produced in Chapter 11\n\n\n\nFigure 2: Plot produced by customizing the Shape and Size Scales in ggplot2\n\n12.3 Line width & 12.4 Line type\nThe Figure 3 shows the use of custom scales in line-type and line-width as aesthetics.\n\nCodeeconomics |&gt;\n  select(date, psavert, uempmed) |&gt; \n  pivot_longer(\n    cols = c(psavert, uempmed),\n    names_to = \"indicator\",\n    values_to = \"value\"\n  ) |&gt; \n  ggplot(aes(x = date,\n             y = value,\n             linetype = indicator, \n             linewidth = indicator)) +\n  geom_line() +\n  scale_linetype_manual(\n    values = c(1, 3),\n    labels = c(\n      \"Personal savings rate (%)\",\n      \"Median duration of unemployment, in weeks\"\n    ),\n    name = NULL\n  ) +\n  scale_linewidth_manual(\n    values = c(1, 0.5)\n  ) +\n  guides(\n    linewidth = \"none\",\n    linetype = guide_legend(\n      override.aes = list(linewidth = 1),\n      keywidth = unit(2, \"cm\")\n    )\n  ) +\n  labs(\n    x = NULL, y = NULL,\n    title = \"USA: Comparing Unemployment and Savings Rate trends\"\n  ) +\n  cowplot::theme_half_open() +\n  theme(\n    legend.position = \"bottom\",\n    axis.line = element_line(arrow = arrow(length = unit(3, \"mm\")))\n  )\n\n\n\nFigure 3: Using scale_linetype() to manually control linetype as an aesthetic"
  },
  {
    "objectID": "Chapter10.html",
    "href": "Chapter10.html",
    "title": "Chapter 10",
    "section": "",
    "text": "This Chapter has no exercises to solve, so we use #TidyTuesday webpage’s data-set on R Package Structure (from the paper Historical Trends in R Package Structure and Interdependency on CRAN by Mark Padgham and Noam Ross) to explore and customize Position Scales and axes."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Welcome to the quirky realm of Aditya Dahiya, your friendly neighborhood Indian Administrative Service (IAS) officer, currently working as the Director and Special Secretary in the Government of Haryana, India. Amidst the daily avalanche of files and meetings that could rival a paper mountain, Aditya somehow manages to sneak in quality time with his true loves: data visualization and health financing data. Think of him as your data-wrangling, file-taming, bureaucracy-battling guide with a slightly skewed sense of humor. Need more bureaucratic banter or data insights? Connect with Aditya on LinkedIn or shoot him an email – he promises it won’t be as formal as a government memo!"
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "About",
    "section": "Education",
    "text": "Education\nHarvard University | Boston, MA MPH in Global Health | Aug 2021 - May 2022\nAll India Institute of Medical Sciences | New Delhi, India MBBS in Medicine | Aug 2005-Dec 2010"
  },
  {
    "objectID": "about.html#experience",
    "href": "about.html#experience",
    "title": "About",
    "section": "Experience",
    "text": "Experience\nIndian Administrative Service | Director | Aug 2011 - present\nNeuro-Radiology, AIIMS New Delhi | Junior Resident Doctor | Jan 2011 - Aug 2011"
  },
  {
    "objectID": "Chapter1.html",
    "href": "Chapter1.html",
    "title": "Chapter 1",
    "section": "",
    "text": "Note\n\n\n\nThis chapter has no exercises, hence there are no solutions to display. Instead, we delve into various ggplot2 add-on packages installed in Section 1.5"
  },
  {
    "objectID": "Chapter11.html",
    "href": "Chapter11.html",
    "title": "Chapter 11",
    "section": "",
    "text": "This Chapter has no exercises to solve, so I use various datasets to explore and customize colour scales and legends in ggplot2.\n\n\n\nFor this Chapter, let’s use the data on Engagement (Hours Watched) report from Netflix which lists, in descending order, all 18,000+ titles viewed for 50,000+ hours on the platform in the first half of 2023. Credits to the Data is Plural newsletter by Jeremy Singer-Vine for circulating this data-set. I recommend subscribing to this newsletter for some amazing data-sets.\n\nCodelibrary(tidyverse)\nlibrary(readxl)\nlibrary(ggwordcloud)\nlibrary(lubridate)\n\nset.seed(42)\nnetflix &lt;- read_csv(here::here(\"data\", \"netflix.csv\")) |&gt; \n  slice_head(n = 100) |&gt; \n  janitor::clean_names() |&gt; \n  select(1:3) |&gt; \n  mutate(title = str_remove_all(title, \"[^[\\\\da-zA-Z ]]\")) |&gt; \n  mutate(title = str_replace(title, \"\\\\s{3,}.*\", \"\")) |&gt; \n  mutate(month = floor_date(release_date, unit = \"month\"),\n         year = year(release_date))\n\n\n11.2 Continuous colour scales\nFor depicting use of continuous color scales, we use the dataset by Harsha Devulapalli on Movie Theaters in 8 Indian metropolitan Cities. Credits to the Data is Plural newsletter by Jeremy Singer-Vine for circulating this data-set.\nThe Figure 1 shows use of two fill scales, one for geom_col() and other for geom_point() , both within the same plot. This is possible with use of ggnewscale (Campitelli 2023) that allows us to specify a new fill or colour scale within the same plot.\n\nCode# Loading dataset\n\nmovies &lt;- read_csv(\"https://raw.githubusercontent.com/HarshaDevulapalli/indian-movie-theatres/master/indian-movie-theatres.csv\")\n\n# Using two fill scales in 1 ggplot object\nlibrary(ggnewscale)\n\nplotdf &lt;- movies |&gt; \n  group_by(theatre_chain) |&gt; \n  summarise(\n    n = n(),\n    avg_price = mean(average_ticket_price, na.rm = TRUE)\n  ) |&gt; \n  drop_na() |&gt; \n  filter(n &gt;= 5) |&gt; \n  mutate(\n    theatre_chain = factor(theatre_chain),\n    theatre_chain = fct_reorder(theatre_chain, avg_price),\n    avg_price = round(avg_price, 0)\n    )\n\n# Creating a gradient in the geom_col fill\nplotdf_fill &lt;- plotdf  |&gt; \n  \n  # Group input by rows: to compute on a data frame a row-at-a-time.\n  rowwise()  |&gt; \n  \n  # Create Vars\n  summarise(theatre_chain = theatre_chain,\n            avg_price = avg_price,\n            fill_col = list(1:avg_price),\n            height = 1) %&gt;%\n  # Long form\n  unnest(cols = fill_col)\n  \nplotdf |&gt; \n  ggplot(\n    aes(x = avg_price,\n        y = theatre_chain)) +\n  geom_col(\n    data = plotdf_fill,\n    aes(fill = fill_col,\n        x = height),\n    width = 0.3,\n    position = \"stack\"\n  ) +\n  \n  # Annotations\n  annotate(\n    geom = \"curve\",\n    x = plotdf |&gt; filter(theatre_chain == \"PVR\") |&gt; pull(avg_price),\n    y = 9,\n    xend = 300,\n    yend = 4,\n    linetype = 5,\n    arrow = arrow(length = unit(2, \"mm\")),\n    col = \"darkgrey\",\n    curvature = -0.5\n  ) +\n  annotate(\n    geom = \"curve\",\n    x = plotdf |&gt; filter(theatre_chain == \"Inox\") |&gt; pull(avg_price),\n    y = 8,\n    xend = 300,\n    yend = 4,\n    linetype = 5,\n    arrow = arrow(length = unit(2, \"mm\")),\n    col = \"darkgrey\",\n    curvature = -0.5\n  ) +\n  annotate(\n    geom = \"label\",\n    x = 300,\n    y = 4,\n    label = \"Size of the dot and the number represent\\nnumber of Movie Theatres owned by the Chain\",\n    hjust = \"inward\", \n    vjust = 1,\n    size = 3, \n    fontface = \"italic\",\n    col = \"black\"\n  ) +\n  \n  # Colour Scales\n  paletteer::scale_fill_paletteer_c(\"ggthemes::Orange-Gold\") +\n  \n  # Using a Second Colour Scale in same ggplot2\n  new_scale_fill() +\n  # Lollipop Graph, circles\n  geom_point(aes(x = avg_price, \n                 size = n,\n                 fill = n),\n             pch = 21,\n             col = \"white\") +\n  geom_text(\n    aes(label = n),\n    hjust = 0.5,\n    vjust = 0.5\n  ) +\n  paletteer::scale_fill_paletteer_c(\"grDevices::PinkYl\",\n                                    direction = -1) +\n  scale_size_continuous(range = c(8, 15)) +\n  labs(\n    x = \"Average Ticket Price (in Rs.)\",\n    y = NULL,\n    title = \"Ticket prices in Indian Movie Theatre Chains\",\n    subtitle = \"PVR is the most expensive, and also has the most movie theatres.\\nThe numbers in circles represent the number of theatres run by the Chain.\"\n  ) +\n  scale_x_continuous(expand = expansion(c(0, 0.05))) +\n  scale_y_discrete(expand = expansion(c(0.05, 0.1))) +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    panel.grid.major.x = element_line(linetype = 2),\n    axis.line.x = element_line(arrow = arrow(length = unit(3, \"mm\"))),\n    plot.title = element_text(face = \"bold\",\n                              size = 18,\n                              hjust = 0.5),\n    plot.subtitle = element_text(face = \"italic\",\n                                 hjust = 0.5),\n    plot.title.position = \"plot\"\n  ) \n\n\n\nFigure 1: Using multiple continuous colour scales in a lollipop chart\n\n\n\n11.3 Discrete colour scales\nNow, I use the data-set with ggwordcloud (Le Pennec and Slowikowski 2023) to make word-clouds of top Netflix Titles. The Figure 2 shows the top 10 titles on Netflix by number of hours viewed between January - June 2023, with default colour schemes in ggplot2. The word-cloud shows the use of a continuous colour scale for text colour based on the number of hours viewed.\n\nCodeg1 &lt;- netflix |&gt; \n  slice_max(order_by = hours_viewed, n = 10) |&gt; \n  ggplot(aes(\n    x = hours_viewed, \n    y = reorder(title, hours_viewed),\n    fill = title,\n    label = title)) +\n  geom_col() +\n  geom_text(aes(x = 0),\n            hjust = \"inward\",\n            vjust = 0.5) +\n  labs(x = \"Hours viewed on Netflix\", y = NULL,\n       title = \"Top 10 titles on Netflix\",\n       subtitle = \"By number of hours viewed: January - June 2023\") +\n  scale_x_continuous(expand = expansion(0),\n                     labels = scales::label_number_si()) +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        axis.text.y = element_blank(),\n        panel.grid.minor = element_blank(),\n        panel.grid.major.y = element_blank())\n\ng2 &lt;- netflix |&gt; \n  mutate(title = str_replace(title, \" Season\\\\s.*\", \"\")) |&gt; \n  slice_max(order_by = hours_viewed, n = 40) |&gt; \n  ggplot(aes(label = title, \n             size = hours_viewed,\n             color = hours_viewed)) +\n  geom_text_wordcloud(shape = \"circle\") +\n  scale_size_area(max_size = unit(10, \"mm\")) +\n  labs(title = \"Word cloud of top 30 titles on Netflix (Jan-Jun 2023)\") +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\ng1\ng2\n\n\n\n(a) A horizontal Bar-Chart\n\n\n\n\n\n(b) A wordcloud\n\n\nFigure 2: Top 10 titles on Netflix by number of hours viewed: January - June 2023\n\nThe Figure 3 shows the same plots with paletteer (Hvitfeldt 2021a) scales.\n\nCodelibrary(paletteer)\n\ng1 + scale_fill_paletteer_d(\"ggthemes::Winter\")\n\ng2 + scale_color_paletteer_c(\"oompaBase::redscale\")\n\n\n\n(a) A horizontal Bar-Chart\n\n\n\n\n\n(b) A wordcloud\n\n\nFigure 3: Top 10 titles on Netflix by number of hours viewed: January - June 2023\n\n11.7 Legend Position\nTo demonstrate the use of theme(legend.position = \"...\"), I use the data on New Delhi’s movie theaters to produce a customized colored map in shades of purple, as shown below in Figure 4\n\nCode#==============================================================================#\n# Library Load-in---------------------------------------------------------------\n#==============================================================================#\nlibrary(tidyverse)      # Data wrangling and plotting\nlibrary(osmdata)        # Wrapper for Overpass API from Open Street Maps\nlibrary(janitor)        # Cleaning names\nlibrary(sf)             # For plotting maps\nlibrary(here)           # Files location and loading\nlibrary(paletteer)      # Lots of Color Palettes in R\nlibrary(colorspace)     # Lightening and Darkening Colors\nlibrary(showtext)       # Using Fonts More Easily in R Graphs\nlibrary(fontawesome)    # Social Media icons\nlibrary(ggtext)         # Markdown Text in ggplot2\nlibrary(patchwork)      # For compiling plots\nlibrary(magick)         # Work with Images and Logos\nlibrary(ggimage)        # Background Image\n\n\n#==============================================================================#\n# Data Load-in------------------------------------------------------------------\n#==============================================================================#\n\ndel_mov &lt;- read_csv(\"https://raw.githubusercontent.com/HarshaDevulapalli/indian-movie-theatres/master/indian-movie-theatres.csv\") |&gt; \n  filter(city == \"Delhi\")\n\nmain_roads &lt;- st_read(here::here(\"data\", \n                                 \"delhi_osm\",\n                                 \"delhi_main_roads.shp\"))\nst_crs(main_roads) &lt;- \"WGS 84\"\n\nminor_roads &lt;- st_read(here::here(\"data\", \n                                  \"delhi_osm\",\n                                  \"delhi_minor_roads.shp\")) \nst_crs(minor_roads) &lt;- \"WGS 84\"\n\nvery_minor_roads &lt;- st_read(here::here(\"data\", \n                                       \"delhi_osm\",\n                                       \"delhi_veryminor_roads.shp\")) \nst_crs(very_minor_roads) &lt;- \"WGS 84\"\n\n#==============================================================================#\n# Data Wrangling----------------------------------------------------------------\n#==============================================================================#\n\ncoords &lt;- del_mov |&gt; \n  summarise(\n    top = max(lat),\n    bottom = min(lat),\n    left = min(lon),\n    right = max(lon)\n  ) |&gt; \n  as_vector()\n\n# Adjust to remove the one leftmost (westward) cniema hall - outlier\npercentage_removal_factor = 0.2\ncoords[3] &lt;- coords[3] + \n  ((coords[4] - coords[3]) * percentage_removal_factor)\n\n# Impute average value to NAs\n\nimpute_na &lt;- median(del_mov$average_ticket_price, na.rm = TRUE)\ndel_mov &lt;- del_mov |&gt; \n  mutate(average_ticket_price = \n           if_else(is.na(average_ticket_price),\n                   impute_na,\n                   average_ticket_price))\n\n\n#==============================================================================#\n# Options & Visualization Parameters--------------------------------------------\n#==============================================================================#\n\n# Load fonts\nfont_add_google(\"Limelight\", \n                family = \"title_font\")       # Font for titles\nfont_add_google(\"Saira Extra Condensed\", \n                family = \"caption_font\")     # Font for the caption\nfont_add_google(\"Bree Serif\", \n                family = \"body_font\")        # Font for plot text\nshowtext_auto()\n\n# Colour Palette\nmypal_c &lt;- paletteer::scale_colour_paletteer_c(\"ggthemes::Purple\")\nmypal &lt;- paletteer::paletteer_d(\"rcartocolor::Purp\")\n\n# Define colours\nlow_col &lt;- mypal[4]                   # Low colour\nhi_col &lt;- mypal[6]                    # High colour\nbg_col &lt;- mypal[3] |&gt; lighten(0.9)    # Background Colour\ntext_col &lt;- mypal[1] |&gt; darken(0.6)   # Colour for the text\ntext_hil &lt;- mypal[6] |&gt; darken(0.4)   # Colour for the title\n\n# Caption stuff\nsysfonts::font_add(family = \"Font Awesome 6 Brands\",\n                   regular = here::here(\"docs\", \"Font Awesome 6 Brands-Regular-400.otf\"))\ngithub &lt;- \"&#xf09b\"\ngithub_username &lt;- \"aditya-dahiya\"\nxtwitter &lt;- \"&#xe61b\"\nxtwitter_username &lt;- \"@adityadahiyaias\"\nlinkedin &lt;- \"&#xf08c\"\nlinkedin_username &lt;- \"dr-aditya-dahiya-ias\"\nsocial_caption &lt;- glue::glue(\"&lt;span style='font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{github};&lt;/span&gt; &lt;span style='color: {text_col}'&gt;{github_username}  &lt;/span&gt; &lt;span style='font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{xtwitter};&lt;/span&gt; &lt;span style='color: {text_col}'&gt;{xtwitter_username}&lt;/span&gt; &lt;span style='font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{linkedin};&lt;/span&gt; &lt;span style='color: {text_col}'&gt;{linkedin_username}&lt;/span&gt;\")\n\n# Add text to plot--------------------------------------------------------------\nplot_title &lt;- \"Movie Theatres in Delhi\"\n\nsubtitle_text &lt;- \"Most theatres are in North or South Delhi, with a central vacant band around Lutyens Delhi !\"\nplot_subtitle &lt;- paste(strwrap(subtitle_text, 100), collapse = \"\\n\")\n\nplot_caption &lt;- paste0(\"**Data:** Harsha Devulapalli  |  \", \"**Graphics:** \", social_caption)\n\n#==============================================================================#\n# Data Visualization------------------------------------------------------------\n#==============================================================================#\n\n\n\n\n  \ng &lt;- ggplot() +\n  geom_sf(\n    data = \n      main_roads |&gt; \n      mutate(geometry = st_simplify(\n        geometry, \n        dTolerance = 50,\n        preserveTopology = TRUE)),\n    mapping = aes(geometry = geometry),\n    color = low_col,\n    linewidth = 1,\n    alpha = 0.4) +\n  geom_sf(\n    data = \n      minor_roads |&gt; \n      mutate(geometry = st_simplify(\n        geometry, \n        dTolerance = 1,\n        preserveTopology = TRUE)),\n    color = low_col,\n    linewidth = 0.7,\n    alpha = 0.3) +\n  geom_sf(\n    data = \n      very_minor_roads |&gt; \n      mutate(geometry = st_simplify(\n        geometry, \n        dTolerance = 10,\n        preserveTopology = TRUE)),\n    color = low_col,\n    linewidth = 0.3,\n    alpha = 0.2) +\n  geom_point(\n    data = del_mov,\n    mapping = aes(\n      x = lon,\n      y = lat,\n      size = total_seats,\n      fill = average_ticket_price\n    ),\n    pch = 21,\n    color = text_hil,\n    alpha = 0.6\n  ) +\n  ggrepel::geom_text_repel(\n    data = del_mov,\n    mapping = aes(\n      x = lon,\n      y = lat,\n      label = theatre_name\n    ),\n    alpha = 0.95,\n    family = \"body_font\",\n    colour = text_col,\n    seed = 42,\n    size = 10,\n    segment.color = text_col\n  ) +\n  coord_sf(\n    xlim = coords[c(\"left\", \"right\")],\n    ylim = coords[c(\"bottom\", \"top\")],\n    expand = FALSE) +\n  scale_fill_paletteer_c(\"ggthemes::Purple\") +\n  scale_size_continuous(range = c(1, 15)) +\n  labs(title = plot_title,\n       subtitle = plot_subtitle,\n       caption = plot_caption,\n       fill = \"Average Ticket Price (in Rs.)\",\n       size = \"Total Number of Seats\") +\n  theme_void() + \n  guides(fill = guide_colorbar(title.position = \"top\",\n                               barheight = unit(0.5, \"cm\"),\n                               barwidth = unit(8, \"cm\")),\n         size = guide_legend(title.position = \"top\",\n                             keywidth = unit(0.5, \"cm\"),\n                             keyheight = unit(0.5, \"cm\"),\n                             label.hjust = 0)) +\n  theme(\n    plot.caption =  element_textbox(family = \"caption_font\",\n                                    hjust = 0.5,\n                                    colour = text_col,\n                                    size = unit(40, \"cm\")),\n    plot.title   =     element_text(hjust = 0.5,\n                                    size = unit(175, \"cm\"),\n                                    margin = margin(0.3,0,0.2,0, \n                                                    unit = \"cm\"),\n                                    family = \"title_font\",\n                                    face = \"bold\",\n                                    colour = text_col),\n    plot.subtitle    = element_text(hjust = 0.5,\n                                    size = unit(50, \"cm\"),\n                                    family = \"body_font\",\n                                    colour = text_col,\n                                    margin = margin(0,0,0.2,0, \n                                                    unit = \"cm\")),\n    plot.background =  element_rect(fill = bg_col,\n                                    color = bg_col,\n                                    linewidth = 0),\n    legend.position = \"bottom\",\n    legend.text = element_text(hjust = 0.5,\n                               size = unit(40, \"cm\"),\n                               family = \"body_font\",\n                               colour = text_col),\n    legend.title = element_text(hjust = 0.5,\n                                size = 50,\n                                family = \"body_font\",\n                                colour = text_col,\n                                margin = margin(0,0,0,0)),\n    legend.box.margin = margin(0,0,0.5,0, unit = \"cm\"),\n    legend.box = \"horizontal\",\n    legend.spacing.y = unit(0.2, \"cm\")\n  )\n\n\n\n\n#=============================================================================#\n# Image Saving-----------------------------------------------------------------\n#=============================================================================#\n\n\nggsave(\n  filename = here::here(\"docs\", \"delhimovies_tidy.png\"),\n  plot = g,\n  device = \"png\", \n  dpi = \"retina\", \n  width = unit(10, \"cm\"), \n  height = unit(10, \"cm\"),\n  bg = bg_col\n)\n\n\n\n#=============================================================================#\n# Data Collection Work---------------------------------------------------------\n#=============================================================================#\n\n\n###########################################\n# DO NOT RUN CODE: To download initial Delhi data\n###########################################\n\n# Saving the coordinates bounding box for Delhi Map\ncoords &lt;- del_mov |&gt; \n  summarize(\n    top = max(lat),\n    bottom = min(lat),\n    left = min(lon),\n    right = max(lon)\n  ) |&gt; \n  as_vector()\n\ncoords\n\n# Code used for Delhi area: Downloading the Delhi map (1.4 GB !!) \ncty &lt;- opq(bbox = coords)\n\n\ncty_roads &lt;- cty |&gt;\n  add_osm_feature(key = \"highway\") |&gt;\n  osmdata_sf()\n\nmain_roads &lt;- cty_roads$osm_lines |&gt;\n  filter(highway %in% c(\"primary\", \"trunk\")) |&gt; \n  clean_names()\n\nminor_roads &lt;- cty_roads$osm_lines |&gt;\n  filter(highway %in% c(\"tertiary\", \"secondary\"))\n\nvery_minor_roads &lt;- cty_roads$osm_lines |&gt;\n  filter(highway %in% c(\"residential\"))\n\n\nst_write(\n  obj = main_roads |&gt; select(geometry),\n  dsn = here::here(\"data\", \"delhi_main_roads.shp\"),\n  append = FALSE\n)\n\nst_write(\n  obj = minor_roads |&gt; select(geometry),\n  dsn = here::here(\"data\", \"delhi_minor_roads.shp\"),\n  append = FALSE\n)\n\nst_write(\n  obj = very_minor_roads |&gt; select(geometry),\n  dsn = here::here(\"data\", \"delhi_veryminor_roads.shp\"),\n  append = FALSE\n)\n\n# rm(main_roads)\n# rm(minor_road)\n\n\n\n\nFigure 4: Map of New Delhi with locations of Movie Theatres, along with number of seats in each (size of circles) and average ticket price (colour of the circle).\n\nSome other packages for colour palettes in R\n\n\n\npaletteer:\n\nThe {paletteer} R package (Hvitfeldt 2021b), developed by Emil Hvitfeldt, serves as a comprehensive repository of diverse color palettes sourced from various R packages. With a unified interface, {paletteer} aims to streamline the usage of these palettes, analogous to the “caret of palettes.” Featuring a collection of 2538 palettes obtained from CRAN packages, the palettes are categorized into discrete and continuous scales. The paletteer gallery facilitates easy exploration and implementation of these palettes in data visualization through ggplot2, providing users with copy/pastable R code for seamless integration.\n\n\n\nRColorBrewer:\n\nThis package sources color palettes from ColorBrewer, delivering a diverse range of qualitative, sequential, and diverging color schemes for ggplot.\n\n\n\nviridis:\n\nDesigned for both colorblind individuals and black-and-white printing, viridis provides perceptually uniform color maps that enhance data visualization.\n\n\n\nviridisLite:\n\nA streamlined version of viridis, viridisLite offers the same high-quality color maps with reduced dependencies for efficient use in ggplot.\n\n\n\nwesanderson:\n\nInspired by Wes Anderson films, this package provides a unique and aesthetically pleasing set of color palettes, adding a distinctive touch to ggplot visuals.\n\n\n\nggsci:\n\nDrawing inspiration from scientific journals like Nature and Science, ggsci offers color palettes that lend a professional and research-oriented look to ggplot visualizations.\n\n\n\nnord:\n\nInspired by the Nord color scheme, this package delivers modern and elegant color palettes for ggplot, adding a contemporary feel to data visualizations.\n\n\n\niWantHue:\n\nEnabling users to generate and explore color palettes based on criteria such as color count and harmony, iWantHue provides flexibility and customization for ggplot visuals.\n\n\n\ncolorspace:\n\nBased on the HCL (Hue-Chroma-Luminance) color space, colorspace offers perceptually uniform and visually appealing color palettes for ggplot, enhancing the aesthetic quality of visualizations.\n\n\n\ndichromat:\n\nSpecifically catering to individuals with color vision deficiencies, dichromat provides color palettes that prioritize accessibility for improved data visualization experiences in ggplot.\n\n\n\nggthemes:\n\nInspired by popular data visualization libraries and software like Excel, Tableau, and Stata, ggthemes offers a variety of color palettes and themes to diversify ggplot visuals.\n\n\n\n\n\n\nReferences\n\nCampitelli, Elio. 2023. “Ggnewscale: Multiple Fill and Colour Scales in ’Ggplot2’.” https://CRAN.R-project.org/package=ggnewscale.\n\n\nHvitfeldt, Emil. 2021a. “Paletteer: Comprehensive Collection of Color Palettes.” https://github.com/EmilHvitfeldt/paletteer.\n\n\n———. 2021b. “Paletteer: Comprehensive Collection of Color Palettes.” https://github.com/EmilHvitfeldt/paletteer.\n\n\nLe Pennec, Erwan, and Kamil Slowikowski. 2023. “Ggwordcloud: A Word Cloud Geom for ’Ggplot2’.” https://CRAN.R-project.org/package=ggwordcloud."
  },
  {
    "objectID": "Chapter13.html",
    "href": "Chapter13.html",
    "title": "Chapter 13",
    "section": "",
    "text": "13.3.1 Exercises\nQuestion 1\nThe first two arguments to ggplot are data and mapping. The first two arguments to all layer functions are mapping and data. Why does the order of the arguments differ? (Hint: think about what you set most commonly.)\nThe order of arguments in the ggplot() function versus the layer functions in the ggplot2 package in R is designed for the convenience and readability of the user code. The rationale behind this design is to prioritize the most frequently modified or specified components.\nIn the ggplot() function, the primary elements you often need to specify are the data and aesthetic mappings (which define how variables in the data are mapped to visual properties). These are fundamental to setting up the initial plot, so they are placed as the first two arguments for clarity and ease of use.\nOn the other hand, when adding layers to the plot using functions like geom_, stat_, or facet_, the most common operation is to modify or add aesthetic mappings. Therefore, the mapping argument comes first, making it easier to focus on specifying how variables are represented in the additional layers without having to repeat the data argument frequently.\nIn summary, the order of arguments is structured to align with the typical workflow of creating a plot: setting up the initial plot with data and basic aesthetic mappings, and then adding layers where the emphasis is often on modifying or adding aesthetic mappings. This design choice enhances the readability and usability of ggplot2 code.\nQuestion 2\nThe following code uses dplyr to generate some summary statistics about each class of car.\nlibrary(dplyr) \nclass &lt;- mpg %&gt;%    \n  group_by(class) %&gt;%    \n  summarise(n = n(), hwy = mean(hwy))\nUse the data to recreate this plot.\nAnswer: The code is shown below: —\n\nlibrary(tidyverse)\n\n\nclass &lt;- mpg |&gt;     \n  group_by(class) |&gt;    \n  summarise(n = n(), hwy = mean(hwy))\n\n\nmpg |&gt; \n  ggplot(aes(x = class, y = hwy)) +\n  geom_jitter(width = 0.2) +\n  geom_point(\n    data = class,\n    color = \"red\",\n    size = 3\n  ) +\n  geom_text(\n    data = class,\n    mapping  = aes(label = paste0(\"n = \", n),\n                   y = 10)\n  )",
    "crumbs": [
      "Home",
      "The Grammer",
      "Chapter 13"
    ]
  },
  {
    "objectID": "Chapter15.html",
    "href": "Chapter15.html",
    "title": "Chapter 15",
    "section": "",
    "text": "This chapter has no exercises, so I use a dummy dataset to generate some examples of the functions and ggplot2 customization of coordinates discussed in this chapter.\nCodelibrary(tidyverse)\nlibrary(scales)\nlibrary(gt)\nlibrary(gtExtras)\nTo begin with, lets create a dummy data set shown in Figure 1\nCodeset.seed(123)\ntb &lt;- tibble(\n  v_integer = 1:20,\n  v_squared = v_integer ^ 2,\n  v_regress = round(\n    (v_integer ^ 2) + \n      rnorm(\n        20, mean = 0, sd = 1), \n    2),\n  v_random = sample(1:100, 20, replace = FALSE),\n  v_discrete = sample(LETTERS[1:4], 20, replace = TRUE)\n)\ntb |&gt; \n  gt() |&gt; \n  cols_align(\"center\") |&gt; \n  gt_theme_538()\n\n\n\n\n\n\nv_integer\nv_squared\nv_regress\nv_random\nv_discrete\n\n\n\n1\n1\n0.44\n15\nB\n\n\n2\n4\n3.77\n32\nA\n\n\n3\n9\n10.56\n7\nA\n\n\n4\n16\n16.07\n9\nC\n\n\n5\n25\n25.13\n41\nA\n\n\n6\n36\n37.72\n74\nB\n\n\n7\n49\n49.46\n23\nA\n\n\n8\n64\n62.73\n27\nC\n\n\n9\n81\n80.31\n60\nA\n\n\n10\n100\n99.55\n53\nC\n\n\n11\n121\n122.22\n98\nB\n\n\n12\n144\n144.36\n91\nD\n\n\n13\n169\n169.40\n93\nC\n\n\n14\n196\n196.11\n38\nD\n\n\n15\n225\n224.44\n34\nD\n\n\n16\n256\n257.79\n69\nB\n\n\n17\n289\n289.50\n72\nB\n\n\n18\n324\n322.03\n76\nC\n\n\n19\n361\n361.70\n63\nD\n\n\n20\n400\n399.53\n13\nB\n\n\n\n\n\n\nFigure 1: A dummy dataset to use in the examples for this Chapters’ Solutions / Examples",
    "crumbs": [
      "Home",
      "The Grammer",
      "Chapter 15"
    ]
  },
  {
    "objectID": "Chapter17.html",
    "href": "Chapter17.html",
    "title": "Chapter 17",
    "section": "",
    "text": "This chapter has some exercises. I also demonstrate some other features using sample data sets.\nCodelibrary(tidyverse)\nlibrary(scales)\nlibrary(ggthemes)\nlibrary(gt)",
    "crumbs": [
      "Home",
      "The Grammer",
      "Chapter 17"
    ]
  },
  {
    "objectID": "Chapter19.html",
    "href": "Chapter19.html",
    "title": "Chapter 19",
    "section": "",
    "text": "Warning\n\n\n\nSolutions for this chapter are under construction."
  },
  {
    "objectID": "Chapter20.html",
    "href": "Chapter20.html",
    "title": "Chapter 20",
    "section": "",
    "text": "Warning\n\n\n\nSolutions for this chapter are under construction."
  },
  {
    "objectID": "Chapter3.html",
    "href": "Chapter3.html",
    "title": "Chapter 3",
    "section": "",
    "text": "What geoms would you use to draw each of the following named plots?\nHere’s a table that shows the geoms you would use in ggplot2 to create each of the named plots, along with example code using the mpg dataset:\n\n\n\n\n\n\n\nPlot Type\n\nggplot2 Geom\nExample Code\n\n\n\nScatterplot\ngeom_point()\nggplot(mpg,\n       aes(x = displ,\n           y = hwy)) +\n  geom_point()\n\n\nLine chart\ngeom_line()\nggplot(mpg,\n       aes(x = displ,\n           y = hwy)) +\n  geom_line()\n\n\nHistogram\ngeom_histogram()\nggplot(mpg,\n       aes(x = hwy)) +\n  geom_histogram()\n\n\nBar chart\ngeom_bar()\nggplot(mpg,\n       aes(x = class)) +\n  geom_bar()\n\n\nPie chart\n\ngeom_bar() +\ncoord_polar()\n\nggplot(mpg,\n       aes(x = class)) +\n  geom_bar(position = \"stack\") +\n  coord_polar(theta = \"y\")\n\n\n\nWhat’s the difference between geom_path() and geom_polygon()? What’s the difference between geom_path() and geom_line()?\ngeom_path() and geom_polygon() are both used for creating line-based plots, but they serve different purposes. geom_line() is another geom used for line-based plots, and I’ll explain the differences between these geoms: —\n\n\ngeom_path():\n\n\ngeom_path() connects data points in the order they appear in the data frame. It’s used to create a path or line that may not necessarily form a closed shape.\n\ngeom_path() is typically used for visualizing trajectories, paths, or any data where the order of points matters.\nIn Figure 1 (a) , geom_path() connects the points in the order of their row numbers in the data, i.e. (1,1) -&gt; (2,3) -&gt; (3,1) -&gt; (2,0) -&gt; (1,1) in that order.\n\n\n\ngeom_polygon():\n\n\ngeom_polygon() is used to create filled shapes by connecting data points in the order they appear. It forms a closed path and fills the area inside.\nIt’s commonly used for creating filled polygons, like shapes on a map or shaded areas in plots.\nIn Figure 1 (b) , geom_polygon() connects the points (1,1) -&gt; (2,3) -&gt; (3,1) -&gt; (2,0) -&gt; (1,1) in that order, forming a closed shape, and fills the area inside the shape.\n\n\n\ngeom_line():\n\n\ngeom_line() is used to create a line chart by connecting data points in the order they appear on the plot axis. It is used to show trends or connections between data points, irrespective of their row number in the data frame from which they came from.\nIn Figure 1 (c) , geom_line() connects the points (1,1) -&gt; (2,3) -&gt; (2,0) -&gt; (3,1) in that order along the increasing values of x-axis variable “x”.\n\n\n\n\nCodelibrary(tidyverse)\nlibrary(cowplot)\n\ndf &lt;- data.frame(\n  x = c(1, 2, 3, 2, 1),\n  y = c(1, 3, 1, 0, 1),\n  label = paste0(\"Observation \", 1:5)\n)\n\nggplot(df, aes(x, y, label = label)) +\n  geom_path() +\n  ggrepel::geom_text_repel() +\n  labs(title = \"geom_path()\") +\n  theme_minimal_grid()\n\nggplot(df, aes(x, y, label = label)) +\n  geom_polygon(fill = \"lightblue\") +\n  ggrepel::geom_text_repel() +\n  labs(title = \"geom_polygon()\") +\n  theme_minimal_grid()\n\nggplot(df, aes(x, y, label = label)) +\n  geom_line() +\n  ggrepel::geom_text_repel() +\n  labs(title = \"geom_line()\") +\n  theme_minimal_grid()\n\n\n\n\n\n(a) geom_path()\n\n\n\n\n\n(b) geom_polygon()\n\n\n\n\n\n(c) geom_line()\n\n\n\nFigure 1: Explaining the difference betweeen geom_path(), geom_polygon() and geom_line()\n\n\n\nTo summarize, geom_path() connects points in the order they appear without necessarily forming closed shapes. geom_polygon() connects points in the order they appear and fills the area inside, creating closed shapes. geom_line() is used for creating line charts to represent trends or connections between data points.\n\nWhat low-level geoms are used to draw geom_smooth()? What about geom_boxplot() and geom_violin()?\nIn ggplot2, the geom_smooth(), geom_boxplot(), and geom_violin() geoms are high-level geoms that are built on top of lower-level geoms to create their respective visual representations. Here are the low-level geoms used to draw each of these high-level geoms:\n\n\ngeom_smooth():\n\n\ngeom_smooth() is used to add a smoothed line to a scatterplot. It’s commonly used for visualizing trends or relationships in data.\nThus, it can be seen as a collection of a very large number of very short lines connecting points calculated by loess() smoother function.\nHence, the low-level geoms used for creating the smoothed lines is geom_line().\n\n\n\ngeom_boxplot():\n\n\ngeom_boxplot() is used to create boxplots that display the distribution of data in a visually concise way.\nThe low-level geom used to draw the\n\nboxes in a boxplot: geom_rect()\n\nwhiskers in a boxplot: geom_line()\n\noutliers in a boxplot: geom_point()\n\n\n\n\n\n\ngeom_violin():\n\n\ngeom_violin() is used to create violin plots that visualize the distribution of data in a way that combines aspects of a box plot and a kernel density plot.\nAfter calculating the exact points which define the boundaries of a violin, the low-level geom used to draw the violin shapes is geom_polygon()."
  },
  {
    "objectID": "Chapter5.html",
    "href": "Chapter5.html",
    "title": "Chapter 5",
    "section": "",
    "text": "Codelibrary(tidyverse)\nlibrary(ggtext)"
  },
  {
    "objectID": "Chapter7.html",
    "href": "Chapter7.html",
    "title": "Chapter 7",
    "section": "",
    "text": "Note\n\n\n\nThere are no exercises in this Chapter to generate solutions for. Instead, we create Network Graphs for Star Wars characters using Star Wars Social Networks data.\nCode# Loading the required libraries\nlibrary(tidyverse)\nlibrary(ggraph)\nlibrary(tidygraph)\nlibrary(jsonlite)"
  },
  {
    "objectID": "Chapter9.html",
    "href": "Chapter9.html",
    "title": "Chapter 9",
    "section": "",
    "text": "This chapter does not have any exercises. Instead, we practice arranging plots using the patchwork package (Pedersen 2023) and data on Diwali Sales from India, initially presented as a part of #TidyTuesday."
  },
  {
    "objectID": "Chapter1.html#colorblindness-colorblindness",
    "href": "Chapter1.html#colorblindness-colorblindness",
    "title": "Chapter 1",
    "section": "colorBlindness (Ou 2021)",
    "text": "colorBlindness (Ou 2021)\nThe colorBlindness R package is specifically crafted to curate a diverse array of secure color palettes suitable for various plot types like heatmaps and pie charts. Its aim is to ensure that the resulting visualizations are accessible and comprehensible to all users. Additionally, it features a Color Vision Deficiency (CVD) simulator, a tool that facilitates the emulation of color vision deficiencies for improved accessibility.\n\n\nCode\nlibrary(colorBlindness)\ng1 &lt;- flights |&gt; \n  group_by(month, day) |&gt; \n  count() |&gt; \n  ggplot(aes(x = day,\n             y = month,\n             fill = n)) +\n  geom_tile() +\n  theme_minimal() +\n  labs(y = \"Month\", x = \"Day of the month\") +\n  scale_y_continuous(breaks = 1:12,\n                     labels = month.name) +\n  scale_x_continuous(breaks = seq(1, 31, 5)) +\n  theme(panel.grid = element_blank(),\n        plot.title.position = \"plot\")\n\n\nFigure 1 shows a basic heat-map created with geom_tile() and nycflights13 (Wickham 2021) data-set.\n\n\nCode\ng1 + labs(title = \"Default ggplot2 colours\")\n\n\n\n\n\nFigure 1: Heat-map with default ggplot2 colours\n\n\n\n\nFigure 2 shows a basic heat-map created with geom_tile() and nycflights13 (Wickham 2021) data-set.\n\n\nCode\ng1 + scale_fill_viridis_c() + labs(title = \"Viridis Colours\")\n\n\n\n\n\nFigure 2: Same heat map with viridis colours\n\n\n\n\nNow, using cvdPlot() from the package colorBlindness to check the plot’s view ( Figure 3 ) to different people.\n\n\nCode\ncvdPlot(g1 + scale_fill_viridis_c())\n\n\n\n\n\nFigure 3: Showing heat-map with different color blindness types using cvdPlot()"
  },
  {
    "objectID": "Chapter1.html#directlabels-directlabels",
    "href": "Chapter1.html#directlabels-directlabels",
    "title": "Chapter 1",
    "section": "directlabels (Hocking 2023)",
    "text": "directlabels (Hocking 2023)\nThis package allows us to label plots easily, using various methods listed here.\n\n\nCode\nlibrary(directlabels)\ng2 &lt;- flights |&gt; \n  filter(carrier %in% c(\"AA\", \"DL\", \"UA\", \"US\", \"WN\")) |&gt; \n  group_by(month, carrier) |&gt; \n  summarise(avg_delay = mean(dep_delay, na.rm = TRUE)) |&gt; \n  ggplot(aes(x = month, y = avg_delay,\n             group = carrier, \n             col = carrier)) +\n  geom_line() +\n  geom_point() +\n  theme_classic() +\n  labs(x = \"Month\", y = \"Average Departure Delay (min.)\") +\n  scale_x_continuous(breaks = 1:12, labels = month.abb) +\n  scale_color_viridis_d()\n\n\n`summarise()` has grouped output by 'month'. You can override using the\n`.groups` argument.\n\n\nCode\ngridExtra::grid.arrange(\ng2 |&gt; direct.label(method = \"angled.boxes\"), \n\ng2 |&gt; direct.label(method = \"last.polygons\"), \n\ng2 |&gt; direct.label(method = \"top.bumpup\"), \n\ng2 |&gt; direct.label(method = \"first.polygons\"),\nnrow = 2, ncol = 2)"
  },
  {
    "objectID": "Chapter1.html#colorblindness",
    "href": "Chapter1.html#colorblindness",
    "title": "Chapter 1",
    "section": "colorBlindness",
    "text": "colorBlindness\nThe colorBlindness R package (Ou 2021) is specifically crafted to curate a diverse array of secure color palettes suitable for various plot types like heat-maps and pie charts. Its aim is to ensure that the resulting visualizations are accessible and comprehensible to all users. Additionally, it features a Color Vision Deficiency (CVD) simulator, a tool that facilitates the emulation of color vision deficiencies for improved accessibility.\nFigure 1 shows a basic heat-map created with geom_tile() and nycflights13 (Wickham 2021) data-set with different colour schemes.\n\nCodelibrary(colorBlindness)\ng1 &lt;- flights |&gt; \n  group_by(month, day) |&gt; \n  count() |&gt; \n  ggplot(aes(x = day,\n             y = month,\n             fill = n)) +\n  geom_tile() +\n  theme_minimal() +\n  labs(y = \"Month\", x = \"Day of the month\") +\n  scale_y_continuous(breaks = 1:12,\n                     labels = month.name) +\n  scale_x_continuous(breaks = seq(1, 31, 5)) +\n  theme(panel.grid = element_blank(),\n        plot.title.position = \"plot\")\n\ng1 + labs(title = \"Default ggplot2 colours\")\n\ng1 + scale_fill_viridis_c() + labs(title = \"Viridis Colours\")\n\n\n\n\n\n(a) Using default ggplot2 colour scheme\n\n\n\n\n\n(b) Using viridis colour scheme for colorblindness\n\n\n\nFigure 1: Heat-map of number of flights ever day in different months of 2013\n\n\n\nNow, using cvdPlot() from the package colorBlindness to check the plot’s view ( Figure 2 ) to different people.\n\nCodecvdPlot(g1 + scale_fill_viridis_c())\n\n\n\nFigure 2: Showing heat-map with different color blindness types using cvdPlot()"
  },
  {
    "objectID": "Chapter1.html#directlabels",
    "href": "Chapter1.html#directlabels",
    "title": "Chapter 1",
    "section": "directlabels",
    "text": "directlabels\nThe directlabels package (Hocking 2023) allows us to label plots easily, using various methods listed here. An example is shown in Figure 3 .\n\nCodelibrary(directlabels)\ng2 &lt;- flights |&gt; \n  filter(carrier %in% c(\"AA\", \"DL\", \"UA\", \"US\", \"WN\")) |&gt; \n  group_by(month, carrier) |&gt; \n  summarise(avg_delay = mean(dep_delay, na.rm = TRUE)) |&gt; \n  ggplot(aes(x = month, y = avg_delay,\n             group = carrier, \n             col = carrier)) +\n  geom_line() +\n  geom_point() +\n  theme_classic() +\n  labs(x = \"Month\", y = \"Average Departure Delay (min.)\") +\n  scale_x_continuous(breaks = 1:12, labels = month.abb) +\n  scale_color_brewer(palette = \"Set1\")\n\ngridExtra::grid.arrange(\ng2 |&gt; direct.label(method = \"angled.boxes\") + \n  labs(title = \"method = \\\"angled.boxes\\\"\"), \n\ng2 |&gt; direct.label(method = \"last.polygons\") + \n  labs(title = \"method = \\\"last.polygons\\\"\"), \n\ng2 |&gt; direct.label(method = \"top.bumpup\") + \n  labs(title = \"method = \\\"top.bumpup\\\"\"), \n\ng2 |&gt; direct.label(method = \"first.polygons\") + \n  labs(title = \"method = \\\"first.polygons\\\"\") ,\nnrow = 2, ncol = 2)\n\n\n\nFigure 3: Using direct labels in a line plot of average delay of five major airline carriers in different months over the course of 2013"
  },
  {
    "objectID": "Chapter1.html#ggforce",
    "href": "Chapter1.html#ggforce",
    "title": "Chapter 1",
    "section": "ggforce",
    "text": "ggforce\nThe ggforce package (Pedersen 2022) is, in effect, a collection of geoms and other features to add on to the ggplot2 collection. Once particularly nice one is facet_zoom() as depicted in Figure 4 . This feature allows you to focus on a specific portion of the data by creating a zoomed-in view, while preserving the complete dataset in a separate panel. We can zoom in on either the x-axis, the y-axis, or both simultaneously.\n\nCodelibrary(ggforce)\nlibrary(ggthemes)\n\nflights |&gt; \n  filter(carrier == \"AA\" & month == 1) |&gt;\n  ggplot(aes(x = dep_delay,\n             y = arr_delay)) +\n  geom_jitter(alpha = 0.2) +\n  geom_smooth(se = FALSE, col = \"red\") + \n  facet_zoom(y = arr_delay &lt; 0,\n             x = dep_delay &lt; 0) + \n  labs(y = \"Arrival Delay (minutes)\", x = \"Departure Delay (minutes)\")\n\n\n\nFigure 4: Use of facet_zoom() to show that relation between Departure Delay and Arrival Delay of American Airlines flights holds true even for flights landing earlier than scheduled\n\n\n\nAnother nice one is facet_wrap_paginate() which enables you to break down a faceted plot into multiple pages. You can specify the number of rows and columns per page, along with the page number you want to plot. The function will automatically generate only the appropriate panels. The Figure 5 shows an example with a for(){} loop.\n\nCodefor (i in 1:2) {\n\n  print(\n    flights |&gt; \n      filter(carrier == \"AA\") |&gt;\n      ggplot(aes(x = dep_time, \n                 y = dep_delay)) +\n      geom_jitter(alpha = 0.1, \n                 shape = 19) +\n      geom_smooth(col = \"red\") +\n      facet_wrap_paginate(~ month,\n                          nrow = 3,\n                          ncol = 2,\n                          scales = \"free_y\",\n                          page = i) +\n      scale_x_continuous(limits = c(500, 2400)) +\n      theme_classic() +\n      labs(x = \"Departure Time (hrs)\", y = \"Departure delay (min.)\")\n  )\n}\n\n\n\n\n\n(a) First half of the year: Jan-Jun\n\n\n\n\n\n\n\n(b) Second half of the year: Jul-Dec\n\n\n\nFigure 5: Use of facet_wrap_paginate() to create plots of realtion between American Airlines flights’ departure time and departure delay for different months"
  },
  {
    "objectID": "Chapter1.html#gghighlight",
    "href": "Chapter1.html#gghighlight",
    "title": "Chapter 1",
    "section": "gghighlight",
    "text": "gghighlight\nThe gghighlight package (Yutani 2022) is an amazing tool to highlight only types of groups in a plot, and can even be used with faceting. The Figure 6 shows an example with a single plot, and Figure 7 shows the same example with faceting.\n\nCodeflights |&gt; \n  mutate(dep_hour = dep_time %/% 100) |&gt; \n  group_by(carrier, dep_hour) |&gt; \n  summarize(avg_delay = mean(dep_delay, na.rm = TRUE)) |&gt; \n  ggplot(aes(x = dep_hour,\n             y = avg_delay,\n             col = carrier,\n             group = carrier)) + \n  geom_line(lwd = 1, alpha = 0.75) +\n  xlim(c(5, 24)) + ylim(c(-10, 300)) +\n  labs(x = \"Departure Time (hr.)\", y = \"Average Departure Delay (min.)\") + \n  theme_minimal()\n\nflights |&gt; \n  mutate(dep_hour = dep_time %/% 100) |&gt; \n  group_by(carrier, dep_hour) |&gt; \n  summarize(avg_delay = mean(dep_delay, na.rm = TRUE)) |&gt; \n  ggplot(aes(x = dep_hour,\n             y = avg_delay,\n             col = carrier,\n             group = carrier)) + \n  geom_line(lwd = 1, alpha = 0.75) +\n  xlim(c(5, 24)) + ylim(c(-10, 300)) +\n  labs(x = \"Departure Time (hr.)\", y = \"Average Departure Delay (min.)\") + \n  theme_minimal() +\n  gghighlight::gghighlight(carrier == \"AA\")\n\n\n\n\n\n(a) Without any gghighlight: it is tough to make comparisons, say, for example of American Airlines with others\n\n\n\n\n\n\n\n(b) With use of gghighlight: we can easily compare American Airlines to others\n\n\n\nFigure 6: Line graph showing the average departure delay (in minutes) of different airliens at different departure times during the day\n\n\n\n\nCodeflights |&gt; \n  mutate(dep_hour = dep_time %/% 100) |&gt; \n  group_by(carrier, dep_hour) |&gt; \n  summarize(avg_delay = mean(dep_delay, na.rm = TRUE)) |&gt; \n  ggplot(aes(x = dep_hour,\n             y = avg_delay,\n             col = carrier,\n             group = carrier)) + \n  geom_line(lwd = 1, alpha = 0.75) +\n  xlim(c(5, 24)) + ylim(c(-10, 300)) +\n  theme_minimal() +\n  gghighlight::gghighlight(carrier %in% c(\"AA\", \"UA\", \"US\", \"DL\")) +\n  facet_wrap(~ carrier) +\n  scale_color_brewer(palette = \"Dark2\") +\n  labs(x = \"Departure Time (hr.)\", y = \"Average Departure Delay (min.)\",\n       title = \"Comparing depature delays of 4 major carriers with others\") \n\n\n\nFigure 7: Using gghighlight with faceting allows use to see the average departure delay (over the course of a typical day) for 4 major airlines compared to others"
  },
  {
    "objectID": "Chapter1.html#ggnewscale",
    "href": "Chapter1.html#ggnewscale",
    "title": "Chapter 1",
    "section": "ggnewscale",
    "text": "ggnewscale\nThe ggnewscale package (Campitelli 2023) allows you to use two or more different color scales (or, any other scales like fill, shape, linetype etc. in the same plot. The Figure 8 is directly copied from the website of the package, and credits to\n\nCodelibrary(ggnewscale)\n# Equivalent to melt(volcano)\ntopography &lt;- expand.grid(x = 1:nrow(volcano),\n                          y = 1:ncol(volcano))\ntopography$z &lt;- c(volcano)\n\n# point measurements of something at a few locations\nset.seed(42)\nmeasurements &lt;- data.frame(x = runif(30, 1, 80),\n                           y = runif(30, 1, 60),\n                           thing = rnorm(30))\n\nggplot(mapping = aes(x, y)) +\n  geom_contour(data = topography, aes(z = z, color = stat(level))) +\n  # Color scale for topography\n  scale_color_viridis_c(option = \"D\") +\n  # geoms below will use another color scale\n  new_scale_color() +\n  geom_point(data = measurements, size = 3, aes(color = thing)) +\n  # Color scale applied to geoms added after new_scale_color()\n  scale_color_viridis_c(option = \"A\") +\n  theme_void() + \n  labs(title = \"The ggnewscale package allows use of multiple color scales\") +\n  theme(legend.position = \"bottom\")\n\n\n\nFigure 8: An example of using two different color scales in a single ggplot2 object with ggnewscale package"
  },
  {
    "objectID": "Chapter1.html#magick",
    "href": "Chapter1.html#magick",
    "title": "Chapter 1",
    "section": "magick",
    "text": "magick\n\n\nThe magick package (Ooms 2023) is a tool to handle and process images in R. It can be used to read .png , .jpeg , .svg and other images. While there are a plethora of features, the primary one I use are given below. Note that I have created the logo for this book solutions using magick and cropcircles .\n\nCodelibrary(magick)\n\n# Reading in the image\nbook_logo &lt;- image_read(\"https://ggplot2-book.org/cover.jpg\")\n\n# Looking at the image in your computer's browser or default app\nimage_browse(book_logo)\n\n# Editing the image to add 3rd Edition and Solutions Manual words\nbook_logo &lt;- book_logo |&gt; \n  image_annotate(\"Solutions Manual (& beyond)\\nfor                   \",\n                 color = \"white\",\n                 location = \"+80+125\",\n                 size = 30,\n                 font = \"helvetica\",\n                 weight = 700) |&gt; \n  image_annotate(\"Third Edition\",\n             strokecolor = \"white\",\n             color = \"white\",\n             boxcolor = \"#EEB301\",\n             location = \"+75+480\",\n             style = \"italic\",\n             size = 35)\n\n# Saving the image\nimage_write(book_logo, \n            \"book_cover.jpg\",\n            format = \"jpeg\")\n\n\n\n\n\n\nBook cover for Solutions Manual (and more!) created with magick package"
  },
  {
    "objectID": "Chapter1.html#cropcircles",
    "href": "Chapter1.html#cropcircles",
    "title": "Chapter 1",
    "section": "cropcircles",
    "text": "cropcircles\n\n\nWe can use the cropcircles package (Oehm 2023) to crop images into a rounded and hexagonal logo for my current book, as an example. (Note: the package generated a transparent background for me only in .png format).\nWe can also create hexagonal logos with this, as shown here.\n\n\n\n\nA rounded logo for the solutions website\n\n\nCodelibrary(cropcircles)\n\n# A round logo\nround_logo &lt;- book_logo |&gt; \n  image_crop(\"600x600+0+30\")\n  \nimage_read(\n  circle_crop(round_logo, \n              just = \"top\",\n              border_colour = \"black\",\n              border_size = 7)) |&gt; \n  image_write(\"book_logo.png\", \n            format = \"png\")\n\n\n\n\n\n\nA Hexagonal logo\n\n\nCodelibrary(magick)\n# Creating a hex \nbook_logo &lt;- image_read(\"https://ggplot2-book.org/cover.jpg\")\n\nbook_logo &lt;- book_logo |&gt; \n  image_annotate(\"Solutions Manual \\n  (& beyond) for\",\n                 color = \"white\",\n                 location = \"+150+105\",\n                 size = 30,\n                 font = \"helvetica\",\n                 weight = 700) |&gt; \n  image_annotate(\"        Third Edition\",\n             strokecolor = \"white\",\n             color = \"white\",\n             boxcolor = \"#EEB301\",\n             location = \"+75+480\",\n             style = \"italic\",\n             size = 35) |&gt; \n  image_crop(\"600x600+0+30\")\n\nimage_read(\n  hex_crop(\n    book_logo,\n    just = \"top\",\n    border_size = 8,\n    border_colour = \"black\"\n  )\n) |&gt; \n  image_write(\"hex_logo.png\")"
  },
  {
    "objectID": "Chapter2.html#question-1",
    "href": "Chapter2.html#question-1",
    "title": "Chapter 2",
    "section": "",
    "text": "List five functions that you could use to get more information about the mpg dataset.\nHere are the five functions for exploring the mpg dataset from the ggplot2 package in R, along with example code: –\n\n\nUse str(mpg) to display the structure of the dataset mpg telling what is the class of each variable.\n\nCodestr(mpg)\n\ntibble [234 × 11] (S3: tbl_df/tbl/data.frame)\n $ manufacturer: chr [1:234] \"audi\" \"audi\" \"audi\" \"audi\" ...\n $ model       : chr [1:234] \"a4\" \"a4\" \"a4\" \"a4\" ...\n $ displ       : num [1:234] 1.8 1.8 2 2 2.8 2.8 3.1 1.8 1.8 2 ...\n $ year        : int [1:234] 1999 1999 2008 2008 1999 1999 2008 1999 1999 2008 ...\n $ cyl         : int [1:234] 4 4 4 4 6 6 6 4 4 4 ...\n $ trans       : chr [1:234] \"auto(l5)\" \"manual(m5)\" \"manual(m6)\" \"auto(av)\" ...\n $ drv         : chr [1:234] \"f\" \"f\" \"f\" \"f\" ...\n $ cty         : int [1:234] 18 21 20 21 16 18 18 18 16 20 ...\n $ hwy         : int [1:234] 29 29 31 30 26 26 27 26 25 28 ...\n $ fl          : chr [1:234] \"p\" \"p\" \"p\" \"p\" ...\n $ class       : chr [1:234] \"compact\" \"compact\" \"compact\" \"compact\" ...\n\n\n\n\nEmploy glimpse(mpg) to obtain a concise overview of the dataset’s structure and its first few rows, offering a detailed glimpse of the data. It is similar to the previous function str()\n\nCodeglimpse(mpg)\n\nRows: 234\nColumns: 11\n$ manufacturer &lt;chr&gt; \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"…\n$ model        &lt;chr&gt; \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4 quattro\", \"…\n$ displ        &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.…\n$ year         &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, 200…\n$ cyl          &lt;int&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, …\n$ trans        &lt;chr&gt; \"auto(l5)\", \"manual(m5)\", \"manual(m6)\", \"auto(av)\", \"auto…\n$ drv          &lt;chr&gt; \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"4\", \"4\", \"4\", \"4\", \"4…\n$ cty          &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 1…\n$ hwy          &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25, 2…\n$ fl           &lt;chr&gt; \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p…\n$ class        &lt;chr&gt; \"compact\", \"compact\", \"compact\", \"compact\", \"compact\", \"c…\n\n\n\n\nRun summary(mpg) to generate a statistical summary of the variables within the mpg dataset, providing measures like mean, median, and quartiles.\n\nCodesummary(mpg)\n\n manufacturer          model               displ            year     \n Length:234         Length:234         Min.   :1.600   Min.   :1999  \n Class :character   Class :character   1st Qu.:2.400   1st Qu.:1999  \n Mode  :character   Mode  :character   Median :3.300   Median :2004  \n                                       Mean   :3.472   Mean   :2004  \n                                       3rd Qu.:4.600   3rd Qu.:2008  \n                                       Max.   :7.000   Max.   :2008  \n      cyl           trans               drv                 cty       \n Min.   :4.000   Length:234         Length:234         Min.   : 9.00  \n 1st Qu.:4.000   Class :character   Class :character   1st Qu.:14.00  \n Median :6.000   Mode  :character   Mode  :character   Median :17.00  \n Mean   :5.889                                         Mean   :16.86  \n 3rd Qu.:8.000                                         3rd Qu.:19.00  \n Max.   :8.000                                         Max.   :35.00  \n      hwy             fl               class          \n Min.   :12.00   Length:234         Length:234        \n 1st Qu.:18.00   Class :character   Class :character  \n Median :24.00   Mode  :character   Mode  :character  \n Mean   :23.44                                        \n 3rd Qu.:27.00                                        \n Max.   :44.00                                        \n\n\n\n\nUtilize dfSummary(mpg) from the summarytools package to obtain a comprehensive summary report with various statistics and visualizations for the mpg dataset.\n\nCodelibrary(summarytools)\nst_options(plain.ascii = FALSE)\nprint(\n  summarytools::dfSummary(mpg,\n                        plain.ascii = FALSE,\n                        headings = FALSE,\n                        display.labels = FALSE,\n                        silent = TRUE),\n  method = \"render\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo\nVariable\nStats / Values\nFreqs (% of Valid)\nGraph\nValid\nMissing\n\n\n\n1\nmanufacturer [character]\n\n\n1. dodge\n\n\n2. toyota\n\n\n3. volkswagen\n\n\n4. ford\n\n\n5. chevrolet\n\n\n6. audi\n\n\n7. hyundai\n\n\n8. subaru\n\n\n9. nissan\n\n\n10. honda\n\n\n[ 5 others ]\n\n\n\n\n37\n(\n15.8%\n)\n\n\n34\n(\n14.5%\n)\n\n\n27\n(\n11.5%\n)\n\n\n25\n(\n10.7%\n)\n\n\n19\n(\n8.1%\n)\n\n\n18\n(\n7.7%\n)\n\n\n14\n(\n6.0%\n)\n\n\n14\n(\n6.0%\n)\n\n\n13\n(\n5.6%\n)\n\n\n9\n(\n3.8%\n)\n\n\n24\n(\n10.3%\n)\n\n\n\n234 (100.0%)\n0 (0.0%)\n\n\n2\nmodel [character]\n\n\n1. caravan 2wd\n\n\n2. ram 1500 pickup 4wd\n\n\n3. civic\n\n\n4. dakota pickup 4wd\n\n\n5. jetta\n\n\n6. mustang\n\n\n7. a4 quattro\n\n\n8. grand cherokee 4wd\n\n\n9. impreza awd\n\n\n10. a4\n\n\n[ 28 others ]\n\n\n\n\n11\n(\n4.7%\n)\n\n\n10\n(\n4.3%\n)\n\n\n9\n(\n3.8%\n)\n\n\n9\n(\n3.8%\n)\n\n\n9\n(\n3.8%\n)\n\n\n9\n(\n3.8%\n)\n\n\n8\n(\n3.4%\n)\n\n\n8\n(\n3.4%\n)\n\n\n8\n(\n3.4%\n)\n\n\n7\n(\n3.0%\n)\n\n\n146\n(\n62.4%\n)\n\n\n\n234 (100.0%)\n0 (0.0%)\n\n\n3\ndispl [numeric]\n\n\nMean (sd) : 3.5 (1.3)\n\n\nmin ≤ med ≤ max:\n\n\n1.6 ≤ 3.3 ≤ 7\n\n\nIQR (CV) : 2.2 (0.4)\n\n\n35 distinct values\n\n234 (100.0%)\n0 (0.0%)\n\n\n4\nyear [integer]\n\n\nMin : 1999\n\n\nMean : 2003.5\n\n\nMax : 2008\n\n\n\n\n1999\n:\n117\n(\n50.0%\n)\n\n\n2008\n:\n117\n(\n50.0%\n)\n\n\n\n234 (100.0%)\n0 (0.0%)\n\n\n5\ncyl [integer]\n\n\nMean (sd) : 5.9 (1.6)\n\n\nmin ≤ med ≤ max:\n\n\n4 ≤ 6 ≤ 8\n\n\nIQR (CV) : 4 (0.3)\n\n\n\n\n4\n:\n81\n(\n34.6%\n)\n\n\n5\n:\n4\n(\n1.7%\n)\n\n\n6\n:\n79\n(\n33.8%\n)\n\n\n8\n:\n70\n(\n29.9%\n)\n\n\n\n234 (100.0%)\n0 (0.0%)\n\n\n6\ntrans [character]\n\n\n1. auto(av)\n\n\n2. auto(l3)\n\n\n3. auto(l4)\n\n\n4. auto(l5)\n\n\n5. auto(l6)\n\n\n6. auto(s4)\n\n\n7. auto(s5)\n\n\n8. auto(s6)\n\n\n9. manual(m5)\n\n\n10. manual(m6)\n\n\n\n\n5\n(\n2.1%\n)\n\n\n2\n(\n0.9%\n)\n\n\n83\n(\n35.5%\n)\n\n\n39\n(\n16.7%\n)\n\n\n6\n(\n2.6%\n)\n\n\n3\n(\n1.3%\n)\n\n\n3\n(\n1.3%\n)\n\n\n16\n(\n6.8%\n)\n\n\n58\n(\n24.8%\n)\n\n\n19\n(\n8.1%\n)\n\n\n\n234 (100.0%)\n0 (0.0%)\n\n\n7\ndrv [character]\n\n\n1. 4\n\n\n2. f\n\n\n3. r\n\n\n\n\n103\n(\n44.0%\n)\n\n\n106\n(\n45.3%\n)\n\n\n25\n(\n10.7%\n)\n\n\n\n234 (100.0%)\n0 (0.0%)\n\n\n8\ncty [integer]\n\n\nMean (sd) : 16.9 (4.3)\n\n\nmin ≤ med ≤ max:\n\n\n9 ≤ 17 ≤ 35\n\n\nIQR (CV) : 5 (0.3)\n\n\n21 distinct values\n\n234 (100.0%)\n0 (0.0%)\n\n\n9\nhwy [integer]\n\n\nMean (sd) : 23.4 (6)\n\n\nmin ≤ med ≤ max:\n\n\n12 ≤ 24 ≤ 44\n\n\nIQR (CV) : 9 (0.3)\n\n\n27 distinct values\n\n234 (100.0%)\n0 (0.0%)\n\n\n10\nfl [character]\n\n\n1. c\n\n\n2. d\n\n\n3. e\n\n\n4. p\n\n\n5. r\n\n\n\n\n1\n(\n0.4%\n)\n\n\n5\n(\n2.1%\n)\n\n\n8\n(\n3.4%\n)\n\n\n52\n(\n22.2%\n)\n\n\n168\n(\n71.8%\n)\n\n\n\n234 (100.0%)\n0 (0.0%)\n\n\n11\nclass [character]\n\n\n1. 2seater\n\n\n2. compact\n\n\n3. midsize\n\n\n4. minivan\n\n\n5. pickup\n\n\n6. subcompact\n\n\n7. suv\n\n\n\n\n5\n(\n2.1%\n)\n\n\n47\n(\n20.1%\n)\n\n\n41\n(\n17.5%\n)\n\n\n11\n(\n4.7%\n)\n\n\n33\n(\n14.1%\n)\n\n\n35\n(\n15.0%\n)\n\n\n62\n(\n26.5%\n)\n\n\n\n234 (100.0%)\n0 (0.0%)\n\n\n\nGenerated by summarytools 1.0.1 (R version 4.3.1)2023-10-23\n\n\n\n\n\nEnhance data exploration with vis_dat(mpg) from the visdat package, which offers interactive visualizations to better understand the data-set’s contents and identify missing values.\n\nCodelibrary(visdat)\n\nvisdat::vis_dat(mpg) + scale_fill_brewer(palette = \"Pastel1\") +\n  labs(title = \"An overview of the data using vis_dat() from visdat package\")"
  },
  {
    "objectID": "Chapter2.html#question-2",
    "href": "Chapter2.html#question-2",
    "title": "Chapter 2",
    "section": "",
    "text": "How can you find out what other datasets are included with ggplot2?\nTo find out what datasets are included with the ggplot2 package, you can use the data() function. You can use the data() function to list all the datasets available in the ggplot2 package.\n\nCodedata(package = \"ggplot2\")"
  },
  {
    "objectID": "Chapter2.html#question-3",
    "href": "Chapter2.html#question-3",
    "title": "Chapter 2",
    "section": "",
    "text": "Apart from the US, most countries use fuel consumption (fuel consumed over fixed distance) rather than fuel economy (distance travelled with fixed amount of fuel). How could you convert cty and hwy into the European standard of l/100km?\nIn the R formula, we convert miles per gallon (mpg) to liters per 100 kilometers (L/100km). The conversion factor, 235.21, is used to perform the conversion. To convert mpg to L/100km, we divide the conversion factor by the mpg value.\n\\[ \\text{L/100km} = \\frac{235.21}{\\text{mpg}}  \\tag{1}\\] The conversion factor of 235.21 is derived from the following logic:\n\n1 mile is equal to approximately 1.609 kilometers.\n1 gallon is equal to approximately 3.785 liters.\n\nTo convert from miles per gallon (mpg) to liters per 100 kilometers (L/100km), we need to reverse the units. So, we divide the number of miles (1 mile) by the number of gallons (1 gallon) to get the number of kilometers per liter. This can be expressed as:\n\\[ \\text{Kilometers per Liter} = \\frac{1 \\text{ mile}}{1 \\text{ gallon}} \\times \\frac{1.609 \\text{ kilometers}}{1 \\text{ mile}} \\times \\frac{1 \\text{ liter}}{3.785 \\text{ gallons}} \\approx 0.4251 \\text{ kilometers per liter}  \\tag{2}\\]\nNow, to express fuel efficiency in liters per 100 kilometers, we need to scale up by 100:\n\\[ \\text{L/100km} = \\frac{1}{0.4251} \\times 100 \\approx 235.21 \\text{ L/100km per 1 kilometer per liter}  \\tag{3}\\]\nSo, when you divide 235.21 by miles per gallon (mpg), you are effectively converting from miles per gallon to liters per 100 kilometers, accounting for the differences in units and scaling by 100 to express the consumption over a distance of 100 kilometers.\nNow, you can include the R code and LaTeX explanation in an R Markdown document for a more structured presentation. When you knit the R Markdown document, it will generate a formatted document with both the code and explanations.\n\nCode# Conversion factor from mpg to L/100km\nconversion_factor &lt;- 235.21\n\nmpg |&gt; \n  mutate(\n    cty = conversion_factor/cty,\n    hwy = conversion_factor/hwy\n  ) |&gt; \n  slice_head(n = 5) |&gt; \n  gt() |&gt; gtExtras::gt_theme_538() |&gt; \n  fmt_number(columns = cty:hwy,\n             decimals = 2)\n\n\n\n\n\n\nTable 1:  mpg dataset with mileage in Liters per 100 km \n  \nmanufacturer\n      model\n      displ\n      year\n      cyl\n      trans\n      drv\n      cty\n      hwy\n      fl\n      class\n    \n\n\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n13.07\n8.11\np\ncompact\n\n\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n11.20\n8.11\np\ncompact\n\n\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n11.76\n7.59\np\ncompact\n\n\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n11.20\n7.84\np\ncompact\n\n\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n14.70\n9.05\np\ncompact"
  },
  {
    "objectID": "Chapter2.html#question-4",
    "href": "Chapter2.html#question-4",
    "title": "Chapter 2",
    "section": "",
    "text": "Which manufacturer has the most models in this dataset? Which model has the most variations? Does your answer change if you remove the redundant specification of drive train (e.g. “pathfinder 4wd”, “a4 quattro”) from the model name?\nAs we can see below in Table 2, Toyota has the most models in the data-set.\n\nCode# Group 'mpg' data by 'manufacturer.'\nmpg |&gt; \n  group_by(manufacturer) |&gt; \n\n  # Count distinct 'model' values for each manufacturer.\n  summarize(models = n_distinct(model)) |&gt; \n\n  # Sort in descending order based on 'n_models.'\n  arrange(desc(models)) |&gt; \n  \n  # Select the top 5 manufacturers.\n  slice_head(n = 5) |&gt; \n  \n  # Create a table and apply a specific theme to it.\n  gt() |&gt; gt_theme_538()\n\n\n\n\n\n\nTable 2:  Top 5 manufacturers in mpg data-set as per number of models \n  \nmanufacturer\n      models\n    \n\n\ntoyota\n6\n\n\nchevrolet\n4\n\n\ndodge\n4\n\n\nford\n4\n\n\nvolkswagen\n4\n\n\n\n\n\n\n\nAnd, as we can see in the Table 3 below, the Dodge Caravan (2 wheel drive) model has the most variations, i.e., 11 in number.\n\nCodempg |&gt; \n  count(manufacturer, model, sort = TRUE) |&gt; \n  slice_head(n = 5) |&gt; \n  rename(variations = n) |&gt; \n  gt() |&gt; gt_theme_538()\n\n\n\n\n\n\nTable 3:  Number of variations in the different models of cars - top 5 \n  \nmanufacturer\n      model\n      variations\n    \n\n\ndodge\ncaravan 2wd\n11\n\n\ndodge\nram 1500 pickup 4wd\n10\n\n\ndodge\ndakota pickup 4wd\n9\n\n\nford\nmustang\n9\n\n\nhonda\ncivic\n9"
  },
  {
    "objectID": "Chapter2.html#question-1-1",
    "href": "Chapter2.html#question-1-1",
    "title": "Chapter 2",
    "section": "Question 1",
    "text": "Question 1\nHow would you describe the relationship between cty and hwy? Do you have any concerns about drawing conclusions from that plot?\nThere is a positive correlation between cty and hwy , as shown in Figure 1. However, one concern we have is whether this correlation is causative in nature, or is it a direct correlation, or is it caused by a third unknown variable, i.e. confounding.\nConfounding is a distortion of the association between independent and dependent variables. It occurs when a third variable is independently associated with both. This can happen when the primary exposure of interest is mixed up with some other factor that is associated with the outcome.\nFor example, perhaps it is the engine displacement that determines both city and highway mileage, and both have a common link, rather than a direct association.\nNote: I am using theme_ipsum() from the hrbrthemes package (Rudis 2020).\n\nCodempg |&gt; \n  ggplot(aes(x = cty, y = hwy)) +\n  geom_point() +\n  labs(x = \"City mileage (cty)\", \n       y = \"Highway mileage (hwy)\",\n       title = \"Scatter-plot: hwy vs. cty\",\n       caption = \"Data-set: mpg from ggplot2\") +\n  hrbrthemes::theme_ipsum()\n\n\n\nFigure 1: A Scatter-plot of city and highway milea for the mpg dataset"
  },
  {
    "objectID": "Chapter2.html#question-2-1",
    "href": "Chapter2.html#question-2-1",
    "title": "Chapter 2",
    "section": "Question 2",
    "text": "Question 2\nWhat does ggplot(mpg, aes(model, manufacturer)) + geom_point() show? Is it useful? How could you modify the data to make it more informative?\nThe code ggplot(mpg, aes(model, manufacturer)) + geom_point() is used to create a scatter plot, where the mpg dataset is being used, and it’s mapping the model variable to the x-axis and the manufacturer variable to the y-axis. The geom_point() function is responsible for adding points to the plot.\n\nCodeggplot(mpg, aes(model, manufacturer)) + geom_point()\n\n\n\nFigure 2: Plot produced by the code given in Question 2\n\n\n\nHere’s a detailed explanation of why this code and its resulting Figure 2 isn’t useful:\n\n\nData Mapping:\n\n\nmodel is mapped to the x-axis: The car models don’t have a specific order, i.e. it is a categorical variable, not an ordinal or continuous variable.\n\nmanufacturer is mapped to the y-axis: Again, manufacturer is a categorical variable with no specific order. Thus, representing it on y-axis is not advisable.\n\n\n\nVisualization:\n\nThe plot will consist of multiple points where each point represents a combination of a car model and its manufacturer. As, we can expect, each observation will have a unique model. There is no specific information or pattern being displayed as scatter plot doesn’t connect the points.\nThe plot suffers from over-plotting if there are many data points when a single model has many variants (alpha aesthetic has not been defined here). Further, since each unique model and manufacturer combination will be displayed as a separate point, it is difficult to discern patterns or relationships.\nThus, this plot has very limited usefulness is identifying trends or make specific insights.\n\n\n\nModifications for More Informativeness: To make the plot more informative, you can consider the following modifications:\n\n\nChanging the plot geom: If our purpose is to show the number of model variants for each manufacturer, we might shift to a bar plot, with faceting on the manufacturer as shown in Figure 3 .\n\nCodempg |&gt; \n\n  # Counting number of variants for each model\n  count(manufacturer, model) |&gt; \n\n  # Nicer looking names\n  mutate(manufacturer = snakecase::to_title_case(manufacturer),\n         model = snakecase::to_title_case(model, numerals = \"left\")) |&gt; \n\n  # Plot\n  ggplot(aes(x = n, \n             y = manufacturer,\n             group = model, \n             fill = manufacturer)) +\n\n  # Grouped bar chart\n  geom_bar(position = \"dodge2\",\n           stat = \"identity\") +\n\n  # Adding names of models\n  geom_text(aes(label = model,\n                x = 0),\n            position = position_dodge2(width = 1),\n            hjust = \"left\") +\n  theme_minimal() +\n  theme(panel.grid.major.y = element_blank(),\n        legend.position = \"none\",\n        plot.title.position = \"plot\") +\n  labs(y = NULL, x = NULL,\n       title = \"Number of model variants for manufacturers in mpg dataset\")\n\n\n\nFigure 3: Grouped horizontal bar plot showing number of variants for different car models in mpg dataset\n\n\n\n\n\nLabels, Title, Color and Size Aesthetics: If we insist on using the same plot as given in the question, we can use additional aesthetics like color or point size to encode more information. For instance, you could use color to represent a third variable, such as “class” (economy, midsize, compact, etc.), and point size to represent another variable, like “displacement.” We can further sort the manufacturers and models alphabetically.\n\nCode# Create some factors to order the manufacturers and model names in a specific order\nman_lev &lt;- mpg |&gt; \n  distinct(manufacturer) |&gt; pull(manufacturer)\n\nmod_lev &lt;- mpg |&gt; \n  group_by(manufacturer) |&gt; \n  arrange(manufacturer, model) |&gt; pull(model) |&gt; unique()\n\n# Start the plot\nmpg |&gt; \n\n  # reorder the manufacturers by alphabetically and models by numbers\n    mutate(\n    manufacturer = fct(manufacturer, levels = man_lev),\n    model = fct(model, levels = mod_lev)\n  ) |&gt; \n\n  # Create the same scatter plot, adding size and color aesthetic\n    ggplot(aes(x = model,\n             y = manufacturer,\n             size = displ,\n             col = manufacturer)) +\n\n  # A geom_jitter instead of geom_point to avoid overlap of variants of a model\n  geom_jitter(alpha = 0.3,\n              width = 0,\n              height = 1) +\n\n  # Plot beautification and customization\n\n  labs(x = NULL, y = NULL) +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        panel.grid.minor.x = element_blank(),\n        panel.grid.major.x = element_blank(),\n        axis.text.x = element_text(angle = 90, \n                                   hjust = 1,\n                                   vjust = 0.5))\n\n\n\nFigure 4: Adding other informative aesthetics to the points in given plot\n\n\n\n\n\nThese modifications can help you gain more insight from your data and make your visualization more informative. The choice of modifications should depend on the specific questions you want to answer and the nature of your dataset."
  },
  {
    "objectID": "Chapter2.html#question-3-1",
    "href": "Chapter2.html#question-3-1",
    "title": "Chapter 2",
    "section": "Question 3",
    "text": "Question 3\nDescribe the data, aesthetic mappings and layers used for each of the following plots. You’ll need to guess a little because you haven’t seen all the datasets and functions yet, but use your common sense! See if you can predict what the plot will look like before running the code.\n\nggplot(mpg, aes(cty, hwy)) + geom_point()\nggplot(diamonds, aes(carat, price)) + geom_point()\nggplot(economics, aes(date, unemploy)) + geom_line()\nggplot(mpg, aes(cty)) + geom_histogram()\n\nLet’s break down each of the provided ggplot2 code snippets and describe the data, aesthetic mappings, and layers used for the plots:\n\n\nggplot(mpg, aes(cty, hwy)) + geom_point()\n\n\nData: The data for this plot comes from the ‘mpg’ dataset, which is typically included in the ggplot2 package. This dataset contains information about the fuel efficiency of various car models.\n\nAesthetic Mappings: It uses aesthetic mappings to represent the ‘cty’ (city miles per gallon) variable on the x-axis and the ‘hwy’ (highway miles per gallon) variable on the y-axis.\n\nLayers: This plot consists of a single layer represented by geom_point(), which adds points to the plot, creating a scatter plot of ‘cty’ against ‘hwy’.\n\n\n\nggplot(diamonds, aes(carat, price)) + geom_point()\n\n\nData: The data for this plot comes from the ‘diamonds’ dataset, another built-in dataset in ggplot2, containing information about diamonds, including their carat weight and price.\n\nAesthetic Mappings: It uses aesthetic mappings to represent the ‘carat’ variable on the x-axis and the ‘price’ variable on the y-axis.\n\nLayers: This plot also consists of a single layer represented by geom_point(), which adds points to the plot, creating a scatter plot of diamond carat weight against their prices.\n\n\n\nggplot(economics, aes(date, unemploy)) + geom_line()\n\n\nData: The data for this plot comes from the ‘economics’ dataset, which is included in the ggplot2 package. This dataset contains economic data, including the ‘date’ and ‘unemploy’ (number of unemployed individuals) variables.\n\nAesthetic Mappings: It uses aesthetic mappings to represent the ‘date’ variable on the x-axis and the ‘unemploy’ variable on the y-axis.\n\nLayers: This plot consists of a single layer represented by geom_line(), which connects points with lines, creating a time series line plot of the number of unemployed individuals over time.\n\n\n\nggplot(mpg, aes(cty)) + geom_histogram()\n\n\nData: The data for this plot also comes from the ‘mpg’ dataset.\n\nAesthetic Mappings: It uses an aesthetic mapping to represent only the ‘cty’ variable, which will be plotted on the x-axis. Since it’s a histogram, the y-axis represents the count of observations in each bin.\n\nLayers: This plot consists of a single layer represented by geom_histogram(), which creates a histogram of the cty variable, showing the distribution of city miles per gallon in the dataset.\n\n\n\nEach of these plots uses different datasets and aesthetic mappings, and they employ different types of geoms (layers) to represent the data in various ways, such as scatter plots, line plots, and histograms, depending on the specific data and the analysis or visualization goals."
  },
  {
    "objectID": "Chapter2.html#question-1-2",
    "href": "Chapter2.html#question-1-2",
    "title": "Chapter 2",
    "section": "Question 1",
    "text": "Question 1\nExperiment with the colour, shape and size aesthetics. What happens when you map them to continuous values? What about categorical values? What happens when you use more than one aesthetic in a plot?\nWe can experiment with the colour, shape, and size aesthetics using both continuous and categorical variables in the mpg dataset. Figure 5 shows six separate scatter plots using different combinations of colour, shape, and size aesthetics, with both continuous and categorical variables: –\n\nCode# Create a ggplot2 plot with 'mpg' dataset\np &lt;- ggplot(mpg, aes(x = cty, y = hwy)) + theme_minimal()\n\n# Continuous variable with color, shape, and size aesthetics\np + geom_point(aes(color = displ))\n  \np + geom_text(aes(x = 20, y = 30),\n    label = \"Error: Shape aesthetic does not \\nwork with a continuous variable\")\n\np + geom_point(aes(size = displ), alpha = 0.2)\n\n# Categorical variable with color, shape, and size aesthetics\np + geom_point(aes(color = factor(class)))\n\np + geom_point(aes(shape = factor(class)))\n\np + geom_point(aes(size = factor(class)), alpha = 0.2)\n\n\n\n\n\n(a) Continuous Variable with Color Aesthetic\n\n\n\n\n\n(b) Continuous Variable with Shape Aesthetic\n\n\n\n\n\n\n\n(c) Continuous Variable with Size Aesthetic\n\n\n\n\n\n(d) Categorical Variable with Color Aesthetic\n\n\n\n\n\n\n\n(e) Categorical Variable with Shape Aesthetic\n\n\n\n\n\n(f) Categorical Variable with Size Aesthetic\n\n\n\nFigure 5: Using continuous and categorical variables on the three aesthetics - colour, shape and size\n\n\n\nInsights:\n\nsize aesthetic works well with continuous variable (or, at worse, an ordinal variable). It should not be used with categorical variable.\nshape aesthetic works only with categorical variable. It simply does not work with a continuous variable.\ncolor works well with categorical and continuous variables.\n\nWhen you use more than one aesthetic in a plot, you can create a plot that contains multiple layers of information, with each aesthetic conveying a different aspect of the data. While this can provide a rich and detailed representation of your data, it can also lead to a plot that becomes too complex and difficult to perceive for several reasons:\n\nClutter: Multiple aesthetics, such as color, shape, size, and others, can lead to visual clutter, especially when you have a large dataset. This can make it challenging for viewers to discern patterns and relationships within the data.\nCognitive Overload: When a plot contains too many aesthetics, viewers may struggle to process the information efficiently. It requires more cognitive effort to interpret the various aesthetic mappings, leading to information overload.\nReduced Clarity: Complex plots can reduce the clarity and simplicity that is often desirable in data visualization. Clutter and complexity can obscure the main message you want to convey, making it harder for the audience to understand the key insights.\nColor Confusion: Overusing color can be particularly problematic. If multiple categories or variables are assigned distinct colors, it can be challenging to differentiate between them, especially if some colors are similar or hard to distinguish.\nInterference: When multiple aesthetics are used, there’s a potential for interference or overlap between different visual elements. For example, if you use both color and size aesthetics, larger points with different colors may overlap, making it challenging to discern individual points.\nIneffectiveness: Sometimes, adding multiple aesthetics may not actually enhance the plot’s effectiveness or communicative power. Instead, it might complicate the plot without providing significant additional insights.\n\nTo avoid making a plot too complex and difficult to perceive, it’s essential to carefully consider the goals of your visualization and the message you want to convey. It’s often better to use a limited number of aesthetics thoughtfully, or using faceting."
  },
  {
    "objectID": "Chapter2.html#question-2-2",
    "href": "Chapter2.html#question-2-2",
    "title": "Chapter 2",
    "section": "Question 2",
    "text": "Question 2\nWhat happens if you map a continuous variable to shape? Why? What happens if you map trans to shape? Why?\nMapping a continuous variable to the shape aesthetic in ggplot2, it throws up an error, because, the shape aesthetic is designed for categorical variables, not continuous ones. When you attempt to deliberately map a continuous variable to shape, ggplot2 will, at best, treat it as a categorical variable, which can lead to unintended and potentially confusing results.\nLet’s consider both scenarios using the mpg dataset:\n\n\nMapping a Continuous Variable (e.g., displ) to Shape Aesthetic:\nggplot(mpg, aes(x = cty, y = hwy, shape = displ)) + geom_point()\n\n# Error in `geom_point()`:\n# ! Problem while computing aesthetics.\n# ℹ Error occurred in the 1st layer.\n# Caused by error in `scale_f()`:\n# ! A continuous variable cannot be mapped to the shape aesthetic\n# ℹ choose a different aesthetic or use `scale_shape_binned()`\n# Run `rlang::last_trace()` to see where the error occurred.\nWhen you map a continuous variable like displ (engine displacement) to the shape aesthetic, ggplot2 will treat each unique value of ‘displ’ as a separate category and assign a different shape to each value. This can result in a plot with many unique shapes, which can be difficult to interpret. Thus, ggplot2 throws up an error. The shapes do not have any inherent order or meaning in this context, so the plot may not provide clear insights.\n\n\nMapping a Categorical Variable (e.g., trans) to Shape:\n\nCodeggplot(mpg, aes(x = cty, y = hwy, shape = trans)) + geom_point()\n\n\n\nFigure 6: Mapping a Categorical Variable: Transmission (trans) to Shape aesthetic\n\n\n\nWhen you map a categorical variable like ‘trans’ (transmission type) to the shape aesthetic, ggplot2 assigns a unique shape to each category in the ‘trans’ variable. However, there are a limited number of shapes in ggplot2 and thus many shapes (like auto(s5) , auto(s6) , manual(m5) and manual(m6) ) go un-plotted thus leading to missing data. In any case, it is generally not advisable to plot more than 4-5 shapes in a plot to keep it nice and simple.\n\n\nIn summary, mapping a continuous variable to the shape aesthetic may not be possible. However, mapping a categorical variable to shape can be useful, provided the number of categories is not too much."
  },
  {
    "objectID": "Chapter2.html#question-3-2",
    "href": "Chapter2.html#question-3-2",
    "title": "Chapter 2",
    "section": "Question 3",
    "text": "Question 3\nHow is drive train related to fuel economy? How is drive train related to engine size and class?\nTo understand the relationship between drive train, fuel economy, engine size, and class in the mpg dataset, you can create a series of plots. We’ll use scatter plots and bar plots to visualize these relationships: –\n\n\nInvestigating how drive train (variable ‘drv’) is related to fuel economy (variables ‘cty’ and ‘hwy’): In the figure below, we find that vehicles with “Front-Wheel” drive-train are more fuel efficient, as compared to rear and 4-wheel drive train: –\n\nCodeggplot(mpg, aes(x = drv, y = cty, fill = drv)) +\n  geom_boxplot() +\n  labs(title = \"City MPG by Drive Train Type\", x = \"Drive Train\", y = \"City MPG\") +\n  theme_minimal()\nggplot(mpg, aes(x = drv, y = hwy, fill = drv)) +\n  geom_boxplot() +\n  labs(title = \"Highway MPG by Drive Train Type\", x = \"Drive Train\", y = \"Highway MPG\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nInvestigating how drive train is related to engine size (variable ‘displ’) and vehicle class (variable ‘class’): In the figure below, we observe that front-wheel drive vehicles have smallest engines, while rear-wheel drive vehicles have largest engines. This also partly explains the fuel economy of these vehicle classes. Further, we observe that front-wheel drive cars are 2-seaters, sub-compact or compact class. However, SUVs dominate the 4-wheel drive and rear-wheel drive cars.\n\nCodeggplot(mpg, aes(x = drv, y = displ, fill = drv)) +\n  geom_boxplot() +\n  labs(title = \"Engine Size by Drive Train Type\", x = \"Drive Train\", y = \"Engine Size\") +\n  theme_minimal()\nggplot(mpg, aes(x = drv, fill = class)) +\n  geom_bar(position = \"fill\") +\n  labs(title = \"Vehicle Class Distribution by Drive Train Type\", x = \"Drive Train\", y = \"Proportion\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  scale_fill_brewer(palette = \"Pastel2\") + \n  theme_minimal()"
  },
  {
    "objectID": "Chapter2.html#question-1-3",
    "href": "Chapter2.html#question-1-3",
    "title": "Chapter 2",
    "section": "Question 1",
    "text": "Question 1\nWhat happens if you try to facet by a continuous variable like hwy? What about cyl? What’s the key difference?\nIn ggplot2, faceting is a way to create small multiples, or a grid of plots, based on the values of a categorical variable. When you try to facet by a continuous variable like “hwy” or a discrete (but not necessarily categorical) variable like “cyl” using the facet_grid() or facet_wrap() functions, there are some key differences in how the faceting works:\n\n\nFaceting by a Continuous Variable (e.g., hwy):\n\nIdeally, faceting by a continuous variable should not be attempted and should throw up an error, simply because a continuous variable can theoretically have an infinite number of levels. However, if ggplot2 finds that the continuous variable we have supplied to facet_wrap() has many values, it still tries and produces a facet for each unique value as shown in Figure 7.\nHence, we see in Figure 7 that if you try to facet by a continuous variable like “hwy”, ggplot2 will attempt to treat each unique value of the continuous variable as a separate facet. This can lead to a large number of facets, making the resulting plot potentially difficult to interpret or too cluttered.\nLastly, faceting by a continuous variable is generally not very useful, and it’s usually better to use continuous variables as aesthetic mappings for scales or other plot features.\n\n\n\n\nCodempg |&gt; \n  ggplot(aes(x = displ,\n             y = hwy)) +\n  geom_point() +\n  theme_minimal() + \n  facet_wrap(~ hwy, nrow = 4)\n\n\n\nFigure 7: Faceting on a continuous variable hwy in the mpg dataset\n\n\n\n\n\nFaceting by a Discrete Variable (e.g., “cyl”):\n\nWhen you facet by a discrete variable like “cyl” ggplot2 will create one facet for each unique value of the discrete variable, as shown in Figure 8 .\nFaceting by discrete variables is a common and useful way to explore the relationships between variables based on different categories. It helps you create a grid of plots where each facet represents a distinct category, allowing for easy visual comparison.\nThe key difference is that discrete variables are intended for faceting, while continuous variables are not. Faceting by a discrete variable is a fundamental and powerful aspect of ggplot2, enabling you to create informative small multiples.\n\n\n\n\nCode# A list of custom labels\nlabel_displ &lt;-  list(\n  \"4\" = \"4 cylinders\", \n  \"5\" = \"5 cylinders\", \n  \"6\" = \"6 cylinders\",\n  \"8\" = \"8 cylinders\"\n)\n\n# A custom function for labeller argument in facet_wrap()\ndispl_labeller &lt;- function(variable,value){\n  return(label_displ[value])\n}  \n\n# The actual plot\nmpg |&gt; \n  ggplot(aes(x = displ,\n             y = hwy)) +\n  geom_point() +\n  theme_minimal() + \n  facet_wrap(~ cyl, nrow = 4,\n             labeller = displ_labeller) +\n  labs(y = \"Fuel Economy, Highway (miles per gallon)\",\n       x = \"Engine displacement, in litres\",\n       title = \"Faceting is best used for discrete variables\")\n\n\n\nFigure 8: Faceting on a continuous variable hwy in the mpg dataset"
  },
  {
    "objectID": "Chapter2.html#question-2-3",
    "href": "Chapter2.html#question-2-3",
    "title": "Chapter 2",
    "section": "Question 2",
    "text": "Question 2\nUse faceting to explore the 3-way relationship between fuel economy, engine size, and number of cylinders. How does faceting by number of cylinders change your assessement of the relationship between engine size and fuel economy?\nAs observed in the Figure 9, a three-way connection exists between fuel efficiency, the number of cylinders, and engine size. It’s evident that as the engine displacement in liters rises, fuel economy declines, indicating an inverse relationship. This correlation remains consistent for both city and highway mileage across 4, 5, and 6-cylinder engines.\nIn contrast, when considering 8-cylinder engines, the relationship is different. Notably, for 8-cylinder engines, mileage improves as engine size increases (possibly due to the enhanced quality of larger engines).\nThus, faceting by number of cylinders changed our assessment of the relationship between engine size and fuel economy by bringing out the different relation when seeing the facet of 8-cylinder cars. If we had not faceted, we would have missed this different relation.\n\nCodempg |&gt; \n  ggplot(aes(x = displ,\n             y = hwy)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  facet_wrap(~ cyl) +\n  theme_minimal() +\n  labs(x = \"Engine Displacement, in litres\",\n       y = \"Fuel Economy, Highway (miles per gallon)\")\n\nmpg |&gt; \n  ggplot(aes(x = displ,\n             y = cty)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  facet_wrap(~ cyl) +\n  theme_minimal() +\n  labs(x = \"Engine Displacement, in litres\",\n       y = \"Fuel Economy, City (miles per gallon)\")\n\n\n\n(a) Using Highway fuel economy\n\n\n\n\n\n(b) Using City fuel economy\n\n\nFigure 9: Exploring the 3-way relationship between fuel economy, engine size, and number of cylinders"
  },
  {
    "objectID": "Chapter2.html#question-3-3",
    "href": "Chapter2.html#question-3-3",
    "title": "Chapter 2",
    "section": "Question 3",
    "text": "Question 3\nRead the documentation for facet_wrap(). What arguments can you use to control how many rows and columns appear in the output?\nIn ggplot2, you can use the ncol and nrow arguments to control how many rows and columns appear in the output when using the facet_wrap() function.\n\nncol: This argument specifies the number of columns in which the facets should be arranged. It determines how many facets are displayed horizontally in each row.\nnrow: This argument specifies the number of rows in which the facets should be arranged. It determines how many facets are displayed vertically in each column.\n\nYou can use these arguments to control the layout of the facet grid and customize how your facets are arranged in the output, allowing you to create the desired organization of plots. For example, if you want a 2x3 grid of facets, you can set ncol = 3 and nrow = 2.\nAs a demonstration, let’s create a facetted plot with a 4 X 1 grid and 1 X 4 grid of facets:\n\nCodep &lt;- mpg |&gt; \n  ggplot(aes(x = displ,\n             y = hwy)) +\n  geom_point() +\n  theme_classic() +\n  labs(x = \"Engine Displacement, in litres\",\n       y = \"Fuel Economy, Highway (miles per gallon)\")\n\np + facet_wrap(~ cyl, ncol = 4) +\n  labs(title = \"Using 4 columns in facet_wrap layout\")\n\np + facet_wrap(~ cyl, nrow = 4) +\n  labs(title = \"Using 4 rows in facet_wrap layout\")\n\n\n\n(a) Using facet_wrap(~ cyl, ncol = 4)\n\n\n\n\n\n(b) Using facet_wrap(~ cyl, nrow = 4)\n\n\nFigure 10: A scatter plot of highway mileage vs. engine displacement, faceted by number of cylinders"
  },
  {
    "objectID": "Chapter2.html#question-4-1",
    "href": "Chapter2.html#question-4-1",
    "title": "Chapter 2",
    "section": "Question 4",
    "text": "Question 4\nWhat does the scales argument to facet_wrap() do? When might you use it?\nThe scales argument in the facet_wrap() function in ggplot2 is used to control how the scales for the facets are handled. It allows you to specify how the axes (x and y scales) should be shared or scaled among the facets in the grid. The scales argument can take one of the following values:\n\n\"fixed\": This is the default behavior. It means that the scales for each facet are shared, and they are based on the range of data overall across facets. This results in a common scale across facets.\n\"free_x\": This option allows the x-axis (horizontal scale) to vary independently for each facet, but the y-axis (vertical scale) is shared among all facets. This is useful when you want to compare different facets on a common y-axis scale while allowing the x-axis to adjust to the data in each facet.\n\"free_y\": This option allows the y-axis (vertical scale) to vary independently for each facet, but the x-axis (horizontal scale) is shared among all facets. This is useful when you want to compare different facets on a common x-axis scale while allowing the y-axis to adjust to the data in each facet.\n\"free\": This option allows both the x-axis and y-axis to vary independently for each facet, meaning that neither axis is shared among facets. This is useful when you want complete independence in scaling for both axes across facets.\n\nYou might use the scales argument when you have facets that contain different data ranges, and you want to control how the scales are shared or adjusted among those facets. It’s particularly useful when creating faceted plots with facets that have different data distributions, and you want to ensure that certain facets share a common scale for meaningful visual comparisons while allowing other scales to adjust independently.\nFor example, if you have different facets representing data for various products and you want to compare their sales over time, you might use \"free_y\" to have a common time scale (x-axis) while allowing the y-axis scale for sales to adapt to each product’s data range. This way, you can easily compare sales trends across products over the same time period.\nHere’s an example using plots from previous question: –\n\nCodep &lt;- mpg |&gt; \n  ggplot(aes(x = displ,\n             y = hwy)) +\n  geom_point() +\n  theme_classic() +\n  labs(x = \"Engine Displacement, in litres\",\n       y = \"Fuel Economy, Highway (miles per gallon)\")\n\np + facet_wrap(~ cyl, ncol = 4) +\n  labs(title = \"Fixed scales with 4 columns\")\n\np + facet_wrap(~ cyl, ncol = 4,\n               scales = \"free_x\") +\n  labs(title = \"Using scales as \\\"free_x\\\" with 4 columns\")\n\np + facet_wrap(~ cyl, nrow = 4) +\n  labs(title = \"Fixed scales with 4 rows\")\n\np + facet_wrap(~ cyl, nrow = 4,\n               scales = \"free_y\") +\n  labs(title = \"Using scales as \\\"free_y\\\" with 4 rows\")\n\n\n\n\n\n(a) Using facet_wrap(~ cyl, ncol = 4)\n\n\n\n\n\n(b) Using facet_wrap(~ cyl, ncol = 4, scales = free_x)\n\n\n\n\n\n\n\n(c) Using facet_wrap(~ cyl, nrow = 4)\n\n\n\n\n\n(d) Using facet_wrap(~ cyl, nrow = 4, scales = free_y)\n\n\n\nFigure 11: A scatter plot of highway mileage vs. engine displacement, faceted by number of cylinders - to demonstrate the purpose of scales argument to facet_wrap()"
  },
  {
    "objectID": "Chapter2.html#question-1-4",
    "href": "Chapter2.html#question-1-4",
    "title": "Chapter 2",
    "section": "Question 1",
    "text": "Question 1\nWhat’s the problem with the plot created by ggplot(mpg, aes(cty, hwy)) + geom_point()? Which of the geoms described above is most effective at remedying the problem?\nThe problem with the plot, as shown in Figure 12 sub-plot (a) is overplotting. Overplotting is a common issue in data visualization, especially when creating scatter plots in ggplot2. It occurs when multiple data points are plotted at the same (or very similar) coordinates on a plot, making it difficult to distinguish individual points. This often happens when you have a large dataset, or when the data points are highly concentrated in a small area.\nWhen you use geom_point() to plot data points that overlap or cluster together, the result can be a plot that shows points stacked on top of each other, as in Figure 12 sub-plot (a), making it hard to see the density and distribution of the data.\nThe two possible solutions to overplotting are: –\n\ngeom_jitter() - better when there are fewer observations, and exact data distribution is not important.\nalpha argument with geom_point() - better when there are many observations; and, when data distribution is important.\ndensity plots (stat_bin2d()) or hexbin plots (stat_binhex())- when there are just too many observations, say more than 1000 or so.\n\nThe most most effective at remedying the problem here is geom_jitter() . The geom_jitter() adds a small amount of random noise to the x and y coordinates of each data point, which helps spread out the points and make them more distinguishable. Here’s how geom_jitter() works:\n\nIt takes the original data points and adds random variations to their positions. By default, the random noise is drawn from a uniform distribution.\nYou can control the amount of jitter (spread) by adjusting the width argument, which specifies the maximum distance the points can be jittered.\n\n\nCodeggplot(mpg, aes(cty, hwy)) + geom_point() + \n  theme_minimal() + labs(x = \"City Mileage (miles per gallon)\",\n                         y = \"Highway mileage (miles per gallon)\")\n\nggplot(mpg, aes(cty, hwy)) + geom_jitter() + \n  theme_minimal() + labs(x = \"City Mileage (miles per gallon)\",\n                         y = \"Highway mileage (miles per gallon)\")\n\n\n\n\n\n(a) The plot using code given in the question\n\n\n\n\n\n(b) Improved plot using geom_jitter()\n\n\n\nFigure 12: A figure depicting the problem of overplotting and how to resolve it"
  },
  {
    "objectID": "Chapter2.html#question-2-4",
    "href": "Chapter2.html#question-2-4",
    "title": "Chapter 2",
    "section": "Question 2",
    "text": "Question 2\nOne challenge with ggplot(mpg, aes(class, hwy)) + geom_boxplot() is that the ordering of class is alphabetical, which is not terribly useful. How could you change the factor levels to be more informative?\nYes, the ordering of class is alphabetical, and this is not useful because as we observe in sub-plot (a) of Figure 13 the un-ordered class of vehicles on x-axis make it tough to discern a pattern in the highway mileage. We could change the factor levels by increasing values of mean of hwy (highway miles per gallon). This can be done with fct_relevel() manually.\nRather than reordering the factor by hand, you can do it automatically based on the data: ggplot(mpg, aes(reorder(class, hwy), hwy)) + geom_boxplot(). What does reorder() do? Read the documentation.\nAn improved version of the plot, much easier to interpret and observe the trends is shown in sub-plot (b) of Figure 13 . Ordering the categorical variable class on x-axis by increasing hwy allows us to easily see which cars are most fuel efficient and which are not.\nIn R, the reorder() function is used to reorder the levels of a factor or to reorder the categories of a discrete variable within a data frame or a vector based on the values of another variable. It is a handy function for controlling the order in which categorical variables are displayed in plots, tables, and other visualizations.\nThe typical usage of reorder() is as follows:\nreorder(x, X, FUN = NULL)\n\n\nx: This is the factor or vector whose levels you want to reorder.\n\nX: This is the variable that you want to use to determine the new order of the levels of x.\n\nFUN: This is an optional argument that specifies a summary function to be applied to X. It is used to calculate a summary value of X for each level of x, and then reorder the levels based on these summary values. If FUN is not specified, X is assumed to be a single numeric or integer variable.\n\nA reordered factor can be useful when creating plots, such as bar charts or box plots, where you want the categories to be sorted based on a particular variable, making it easier to see the relationships between variables, as shown in Figure 13 .\n\nCodeggplot(mpg, aes(class, hwy)) + geom_boxplot() + \n  theme_minimal() + labs(x = \"Class of vehicle\", \n                         y = \"Highway mileage (miles per gallon)\")\n\nggplot(mpg, aes(reorder(class, hwy), hwy)) + geom_boxplot() +\n    theme_minimal() + labs(x = \"Class of vehicle\", \n                         y = \"Highway mileage (miles per gallon)\")\n\n\n\n\n\n(a) Box-plot without ordering the x-axis variable\n\n\n\n\n\n(b) Box-plot with ordered x-axis variable, based on values of y-axis variable\n\n\n\nFigure 13: Ordering a categorical variable to make the plot easier to visualize and interpret"
  },
  {
    "objectID": "Chapter2.html#question-3-4",
    "href": "Chapter2.html#question-3-4",
    "title": "Chapter 2",
    "section": "Question 3",
    "text": "Question 3\nExplore the distribution of the carat variable in the diamonds dataset. What bin-width reveals the most interesting patterns?\nTo explore the distribution of the “carat” variable in the “diamonds” dataset, you can create a histogram and experiment with different bin widths to reveal interesting patterns. The choice of bin width can affect how the data is visualized. A smaller bin width can reveal finer details, while a larger bin width can provide a smoother overview of the distribution. Let’s create a histogram and try different bin widths to find the most interesting pattern:\n\nCodeg &lt;- diamonds |&gt; ggplot(aes(carat)) + \n  theme_minimal()\n\ng + geom_histogram(binwidth = 1)\n\ng + geom_histogram(binwidth = 0.5)\n\ng + geom_histogram(binwidth = 0.1)\n\ng + geom_histogram(binwidth = 0.05)\n\ng + geom_histogram(binwidth = 0.01)\n\n\n\n\n\n(a) binwidth = 1\n\n\n\n\n\n(b) binwidth = 0.5\n\n\n\n\n\n(c) binwidth = 0.1\n\n\n\n\n\n\n\n(d) binwidth = 0.05\n\n\n\n\n\n(e) binwidth = 0.01\n\n\n\nFigure 14: Using different bin widths on the histogram of carat in diamonds dataset\n\n\n\nAfter experimenting with different bin widths (e.g., 0.01, 0.05, 0.1, 0.5, 1 etc.), we find that the bin-width 0.01 reveals a very interesting pattern - many diamonds are clustered around rounded values like 1, 1.5, 1.25 etc. reveal a bias in recording the observations. This means that observation recorders have used rounding off while noting the carat of the diamonds."
  },
  {
    "objectID": "Chapter2.html#question-4-2",
    "href": "Chapter2.html#question-4-2",
    "title": "Chapter 2",
    "section": "Question 4",
    "text": "Question 4\nExplore the distribution of the price variable in the diamonds data. How does the distribution vary by cut?\nThe distribution of price for different types of cut is shown in Figure 15 . We observe that the price distribution if right-skewed for all cut types, but the skewness is much more for Ideal and Premium types of cut.\n\nCodediamonds |&gt; \n  ggplot(aes(price)) +\n  geom_density() +\n  # geom_freqpoly() +\n  # geom_histogram(binwidth = 10) +\n  facet_wrap(~ cut)\n\n\n\nFigure 15: Distribution of price of diamonds faceted by various cut types"
  },
  {
    "objectID": "Chapter2.html#question-5",
    "href": "Chapter2.html#question-5",
    "title": "Chapter 2",
    "section": "Question 5",
    "text": "Question 5\nYou now know (at least) three ways to compare the distributions of subgroups: geom_violin(), geom_freqpoly() and the colour aesthetic, or geom_histogram() and faceting. What are the strengths and weaknesses of each approach? What other approaches could you try?\nComparing the distributions of sub-groups in a dataset can be done using geom_violin(), geom_freqpoly() and the colour aesthetic, and geom_histogram() with faceting. Each has its own strengths and weaknesses. Let’s discuss these approaches, along with their pros and cons: —\n\n\ngeom_violin(): Figure 16\n\n\nStrengths:\n\nProvides a compact representation of the data distribution, showing not only the central tendency but also the spread and shape of the distribution.\nSuitable for comparing multiple subgroups within a single plot.\nUseful for identifying modes, asymmetry, and outliers.\n\n\n\nWeaknesses:\n\nMay not be as intuitive to interpret for those unfamiliar with violin plots.\nLimited to visualizing uni-modal distributions, and it can be less effective for highly multi-modal data.\n\n\n\n\n\n\nCodediamonds |&gt; \n  ggplot(aes(x = cut, \n             y = price)) +\n  geom_violin(fill = \"lightblue\") +\n  theme_minimal() +\n  labs(x = \"Cut\", y = \"Price\",\n       title = \"Violin Plots: comparing multiple subgroups within a single plot\")\n\n\n\nFigure 16: Using geom_violin() to compare price distribution across diamonds of different cuts\n\n\n\n\n\ngeom_freqpoly() and the colour aesthetic: Figure 17\n\n\nStrengths:\n\n\ngeom_freqpoly(): Allows you to create overlaid histograms for multiple subgroups, making it easy to compare their shapes and positions.\nUsing the colour aesthetic: You can assign different colors to subgroups within a single plot, making it visually clear which data points belong to which subgroup.\n\n\n\nWeaknesses:\n\nOverlapping can make it difficult to distinguish individual histograms when comparing many subgroups.\nRequires a good choice of color palettes for clarity and accessibility.\n\n\n\n\n\n\nCodediamonds |&gt; \n  ggplot(aes(x = price,\n             col = cut)) +\n  geom_freqpoly(lwd = 1.2) +\n  scale_color_brewer(palette = \"Set1\") +\n  theme_minimal() +\n  labs(x = \"Price\", y = \"Number of Diamonds\",\n       title = \"Using geom_freqpoly() and the colour aesthetic\")\n\n\n\nFigure 17: Using geom_freqpoly() and the colour aesthetic to compare price distribution across diamonds of different cuts\n\n\n\n\n\ngeom_histogram() with faceting: Figure 18\n\n\nStrengths:\n\nFaceting allows you to create separate histograms for each subgroup, making it easy to compare their individual distributions.\nUseful when there are many subgroups, as it avoids visual clutter and allows for detailed examination.\n\n\n\nWeaknesses:\n\nIt may not be as effective in highlighting differences between subgroups in a single, unified view.\nRequires additional space, which can be a disadvantage when trying to visualize many subgroups in a limited display area.\n\n\n\n\n\n\nCodediamonds |&gt; \n  ggplot(aes(x = price)) +\n  geom_histogram(bins = 60) +\n  facet_wrap(~ cut, scales = \"free_y\", dir = \"v\", nrow = 5) +\n  theme_minimal() +\n  scale_x_continuous(labels = scales::comma_format(prefix = \"$\")) +\n  labs(x = \"Price\", y = \"Number of Diamonds\",\n       title = \"Using geom_histogram() with faceting\",\n       subtitle = \"Using free scales on y-axis to enable easy comparison visually \")\n\n\n\nFigure 18: Using geom_histogram() with faceting to compare price distribution across diamonds of different cuts\n\n\n\nSome alternative approaches for comparing the distributions of subgroups include:\n\n\nBox plots (geom_boxplot()): Figure 19\n\nStrengths: Effective for comparing the central tendency, spread, and presence of outliers for multiple subgroups.\nWeaknesses: May not provide as much detail about the shape of the distribution.\n\n\n\n\nCodediamonds |&gt; \n  ggplot(aes(x = cut, y = price)) +\n  geom_boxplot(fill = \"lightblue\",\n               outlier.shape = NA) +\n  theme_minimal() +\n  labs(\n    x = \"Cut\", \n    y = \"Price\",\n    title = \"Box-plots: comparing multiple subgroups within a single plot\"\n  )\n\n\n\nFigure 19: Using box-plots to compare price distribution across diamonds of different cuts\n\n\n\n\n\nECDF plots (geom_step() or geom_point() with cumulative frequency): Figure 20\n\nStrengths: Empirical Cumulative Distribution Function Plots show the cumulative distribution of each subgroup, which can be insightful for comparing percentiles and distribution shapes.\nWeaknesses: Not as common as other approaches, so interpretation may not be as intuitive for some users.\n\n\n\n\nCodeg &lt;- diamonds |&gt; \n  ggplot(aes(x = price, col = cut)) +\n  stat_ecdf() +\n  scale_color_brewer(palette = \"Set1\") +\n  theme_minimal() +\n  labs(x = \"Price\", y = \"Number of Diamonds\",\n       title = \"Using geom_freqpoly() and the colour aesthetic\") +\n  scale_x_continuous(labels = scales::comma_format(prefix = \"$\"))\n\ng |&gt; directlabels::direct.label(method = \"angled.boxes\")\n\n\n\nFigure 20: Using Empirical Cumulative Distribution Function Plots (ECDF) plots to compare price distribution across diamonds of different cuts\n\n\n\n\n\nDensity plots (geom_density()): Figure 21\n\nStrengths: Provides a smooth estimate of the distribution for comparing multiple subgroups.\nWeaknesses: May require a larger area, and the choice of smoothing parameters can affect the result.\n\n\n\n\nCodediamonds |&gt; \n  ggplot(aes(x = price,\n             col = cut)) +\n  geom_density(lwd = 1.2) +\n  scale_color_brewer(palette = \"Set1\") +\n  theme_minimal() +\n  labs(x = \"Price\", y = \"Number of Diamonds\",\n       title = \"Using geom_density() and the colour aesthetic\") +\n  scale_x_continuous(labels = scales::comma_format(prefix = \"$\"))\n\n\n\nFigure 21: Using geom_density() and the colour aesthetic to compare price distribution across diamonds of different cuts\n\n\n\nThe choice of approach depends on the nature of the data, the number of subgroups, and the specific insights you want to gain."
  },
  {
    "objectID": "Chapter2.html#question-6",
    "href": "Chapter2.html#question-6",
    "title": "Chapter 2",
    "section": "Question 6",
    "text": "Question 6\nRead the documentation for geom_bar(). What does the weight aesthetic do?\nIn ggplot2, the weight aesthetic in geom_bar serves the purpose of facilitating the creation of bar charts that display counts or sums of weights rather than the traditional count of observations. When you use geom_bar() with the weight aesthetic, it modifies the height of the bars to be proportional to the sum of the supplied weights for each group. This allows you to create bar charts where the bar height represents the accumulated sum of a specific variable, rather than just the count of instances. The Figure 22 is an excellent example usign both methods - dplyr data wrangling Figure 22 (a) and the geom_bar() with weight aesthetic Figure 22 (b) - both witht he same result to explain the purpose.\nIn essence, the weight aesthetic in geom_bar() offers the flexibility to create weighted histograms and barcharts, where the bar heights no longer represent a simple count of observations but instead reflect the cumulative sum of a different variable.\nThis functionality is particularly useful when you want to visualize data with varying weights or magnitudes, emphasizing the overall importance of a particular variable within each group.\n\nCodediamonds |&gt; \n  group_by(cut) |&gt; \n  summarise(price_total = sum(price),\n            n = n()) |&gt; \n  ggplot(aes(x = cut, y = price_total)) +\n  geom_bar(stat = \"identity\") +\n  labs(x = \"Cut\",\n       y = \"Price (in million $)\",\n       title = \"Plot using dplyr wrangling\") +\n  theme_minimal_hgrid() +\n  scale_y_continuous(labels = scales::label_number_si())\n\ndiamonds |&gt; \n  ggplot(aes(x = cut, \n             weight = price)) +\n  geom_bar() +\n  labs(x = \"Cut\",\n       y = \"Price (in million $)\",\n       title = \"Plot using geom_bar and weight aesthetic\") +\n  theme_minimal_hgrid() +\n  scale_y_continuous(labels = scales::label_number_si())\n\n\n\n\n\n(a) Using the dplyr data wrangling to find sum of prices and then plotting\n\n\n\n\n\n(b) Using the weight aesthetic in geom_bar()\n\n\n\nFigure 22: Demonstrating the total prices of all diamonds of each cut in the diamonds data-set"
  },
  {
    "objectID": "Chapter2.html#question-7",
    "href": "Chapter2.html#question-7",
    "title": "Chapter 2",
    "section": "Question 7",
    "text": "Question 7\nUsing the techniques already discussed in this chapter, come up with three ways to visualise a 2d categorical distribution. Try them out by visualising the distribution of model and manufacturer, trans and class, and cyl and trans.\nYou can visualize a 2D categorical distribution using stacked or clustered bar plots, mosaic plots, or heatmaps. Let’s use the mpg dataset from the ggplot2 package and visualize the distribution of the mentioned categorical pairs: model vs. manufacturer, trans vs. class, and cyl vs. trans.\n\nClustered Bar Chart\nStacked Bar Chart\nHeat-map\n\n\n\n\nClustered Bar Chart: Figure 23\n\nA clustered bar chart is a simple and effective way to show the distribution of two categorical variables. Each category of one variable is represented by a group of bars, and within each group, the bars represent the categories of the second variable. This allows you to compare the distribution of one variable within each category of the other variable.\n\nStrengths:\n\nShows the relationship between two categorical variables.\nEasy to interpret and compare categories within each variable.\n\n\n\nWeaknesses:\n\nLimited to a small number of categories to avoid clutter.\nDoesn’t display individual data points.\n\n\n\n\n\n\nCodempg |&gt; \n  ggplot(aes(y = manufacturer, \n             group = model,\n             label = model)) +\n  geom_bar(position = \"dodge2\",\n           fill = \"lightgrey\",\n           col = \"black\",\n           lwd = 0.1) +\n  labs(title = \"Clustered bar chart: Manufacturer vs. Model\") + \n  theme_minimal() +\n  theme(legend.position = \"none\")\n\nggplot(mpg, aes(fill = trans, y = class)) +\n  geom_bar(position = \"dodge2\") + \n  scale_fill_brewer(palette = \"Set3\") +\n  labs(title = \"Clustered Bar Chart: Class vs. Transmission\") + \n  theme_minimal() +\n  theme(legend.position = \"bottom\")\n\nggplot(mpg, aes(fill = trans, y = cyl)) +\n  geom_bar(position = \"dodge2\") + \n  scale_fill_brewer(palette = \"Set3\") +\n  labs(title = \"Clustered Bar Chart: Cylinders vs. Transmission\") + \n  theme_minimal() +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n(a) Manufacturer vs. Model\n\n\n\n\n\n(b) Class vs. Transmission\n\n\n\n\n\n(c) Cylinders vs. Transmission\n\n\n\nFigure 23: Clustered Bar Charts\n\n\n\n\n\nStacked Bar Chart: Figure 24\n\nStacked bar charts are useful when you want to show the total composition of one categorical variable across the categories of another variable. The bars are stacked on top of each other, and the height of each segment in a bar represents the proportion of the first variable’s categories within the second variable’s categories.\n\nStrengths:\n\nAllows comparison of two categorical variables side by side.\nSuitable for larger datasets with more categories.\n\n\n\nWeaknesses:\n\nMay become complex with many categories.\nCan be less intuitive for some viewers.\n\n\n\n\n\n\nCodempg |&gt; \n  count(manufacturer, model) |&gt; \n  ggplot(aes(y = manufacturer, \n           x = n,\n           fill = model,\n           label = model)) +\n  geom_bar(stat = \"identity\", position = \"stack\", col = \"white\") +\n  geom_text(position = position_stack(vjust = 0.2)) +\n  labs(title = \"Stacked bar chart: Manufacturer vs. Model\",\n       subtitle = \"Too many variants. Tough to read\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")\n\nggplot(mpg, aes(y = trans, fill = class)) +\n  geom_bar(position = \"stack\") + \n  scale_fill_brewer(palette = \"Set3\") +\n  labs(title = \"Stacked Bar Chart: Class vs. Transmission\",\n       fill = \"Class\") + \n  theme_minimal() +\n  theme(legend.position = \"bottom\")\n\nggplot(mpg, aes(fill = trans, y = cyl)) +\n  geom_bar(position = \"stack\") + \n  scale_fill_brewer(palette = \"Set3\") +\n  labs(title = \"Stacked Bar Chart: Cylinders vs. Transmission\",\n       fill = \"Transmission\") + \n  theme_minimal() +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n(a) Manufacturer vs. Model\n\n\n\n\n\n(b) Class vs. Transmission\n\n\n\n\n\n(c) Cylinders vs. Transmission\n\n\n\nFigure 24: Stacked Bar Charts\n\n\n\n\n\nHeatmap: Figure 25\n\nA heat map can be used to visualize the relationship between two categorical variables by coloring the cells of a grid with different shades based on the frequency, percentage, or another measure. It is especially useful when you have a large dataset.\n\nStrengths:\n\nDisplays the frequency or proportion of combinations.\nSuitable for larger datasets and many categories.\n\n\n\nWeaknesses:\n\nColor encoding might not be as intuitive as other methods.\nDoesn’t show individual data points.\n\n\n\n\n\n\nCodempg |&gt; \n  count(manufacturer, model) |&gt; \n  ggplot(aes(manufacturer, model, fill = n)) +\n  geom_tile() +\n  labs(title = \"Heatmap: Manufacturer vs. Model\",\n       subtitle = \"Too few combinations\") +\n  theme_minimal() +\n  scale_fill_viridis_c() +\n  theme(legend.position = \"right\",\n        axis.text.x = element_text(angle = 90)) +\n  labs(x = \"Manufacturer\", \n       y = \"Model\",\n       fill = \"Number\")\nmpg |&gt; \n  count(trans, class) |&gt; \n  ggplot(aes(trans, class, fill = n)) +\n  geom_tile() +\n  scale_fill_viridis_c() +\n  labs(title = \"Heatmap: Class vs. Transmission\",\n       fill = \"Number\") + \n  theme_minimal() +\n  theme(legend.position = \"right\")\n\nmpg |&gt; \n  count(trans, cyl) |&gt;\n  mutate(cyl = as.character(cyl)) |&gt; \n  ggplot(aes(trans, cyl, fill = n)) +\n  geom_tile() +\n  scale_fill_viridis_c() +\n  labs(title = \"Heatmap: Transmission vs. Cylinders\",\n       fill = \"Number\") + \n  theme_minimal() +\n  theme(legend.position = \"right\")\n\n\n\n\n\n(a) Manufacturer vs. Model\n\n\n\n\n\n(b) Class vs. Transmission\n\n\n\n\n\n(c) Cylinders vs. Transmission\n\n\n\nFigure 25: Heatmaps\n\n\n\n\n\nJittered Scattered Plot with transparency Figure 26\n\nA jittered scatter plot is a data visualization technique used to compare the distribution of two categorical variables. It’s a variation of a standard scatter plot, typically used for comparing two continuous variables. In this case, it’s adapted to handle categorical data. The main idea is to introduce a small amount of random noise to the data points to prevent overlapping, making it easier to observe the distribution of the categorical variables.\n\nStrengths:\n\nAllows you to see individual data points clearly.\nGives an overall idea of where the points are scattered.\n\n\n\nWeaknesses:\n\nEven with jittering, if there are too many data points or the categories have significant overlap\nJittered scatter plots work better with categorical variables that have relatively low cardinality (few unique categories).\n\n\n\n\n\n\nCodempg |&gt; \n  ggplot(aes(manufacturer, model)) +\n  geom_jitter() +\n  labs(title = \"Jittered Scatterplot: Manufacturer vs. Model\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90)) +\n  labs(x = \"Manufacturer\", \n       y = \"Model\")\n\nmpg |&gt; \n  ggplot(aes(trans, class)) +\n  geom_jitter() +\n  labs(title = \"Jittered Scatterplot: Class vs. Transmission\") + \n  theme_minimal()\n\nmpg |&gt; \n  ggplot(aes(trans, cyl)) +\n  geom_jitter() +\n  labs(title = \"Jittered Scatterplot: Transmission vs. Cylinders\") + \n  theme_minimal()\n\n\n\n\n\n(a) Manufacturer vs. Model\n\n\n\n\n\n(b) Class vs. Transmission\n\n\n\n\n\n(c) Cylinders vs. Transmission\n\n\n\nFigure 26: Jittered Scatterplots\n\n\n\n\n\nMosaic Plot: Figure 27\n\nA mosaic plot is a graphical display of the joint distribution of two categorical variables. It divides a rectangle into smaller rectangles, with the area of each smaller rectangle proportional to the frequency or proportion of data points falling into that combination of categories.\n\nStrengths:\n\nVisualizes the relationship and proportions of two categorical variables.\nUseful for detecting associations or dependencies.\n\n\n\nWeaknesses:\n\nMay become intricate with many categories.\nLess common and might be unfamiliar to some audiences.\n\n\n\n\n\n\nCodelibrary(ggmosaic)\n\nggplot(mpg) +\n  geom_mosaic(aes(x = product(manufacturer), \n                  fill = model),\n              show.legend = FALSE) +\n  theme_mosaic() +\n  labs(title = \"Mosaic-plot: Manufacturer vs. Model\") +\n  theme(axis.text.x = element_text(angle = 90)) +\n  labs(x = \"Manufacturer\", \n       y = \"Model\")\n\nggplot(mpg) +\n  geom_mosaic(aes(x = product(class), \n                  fill = trans),\n              show.legend = FALSE) +\n  theme_mosaic() +\n  labs(title = \"Mosaic-plot: Class vs. Transmission\") +\n  theme(axis.text.x = element_text(angle = 90)) +\n  scale_fill_brewer(palette = \"Set3\") \n\n\nggplot(mpg) +\n  geom_mosaic(aes(x = product(cyl), \n                  fill = trans),\n              show.legend = FALSE) +\n  theme_mosaic() +\n  labs(title = \"Mosaic-plot: Cylinders vs. Transmission\") +\n  scale_fill_brewer(palette = \"Set3\") +\n  labs(x = \"Cylinders\", y = \"Transmission\")\n\n\n\n\n\n(a) Manufacturer vs. Model\n\n\n\n\n\n(b) Class vs. Transmission\n\n\n\n\n\n(c) Cylinders vs. Transmission\n\n\n\nFigure 27: Mosaic Plot\n\n\n\nOther Options:\n\n\nVenn Diagram:\n\nVenn diagrams can be used when you want to visualize the overlap or commonality between two categorical variables.\nVenn diagrams are typically used for categorical variables with a very few number of categories.\n\n\n\nJoint Distribution Table (an example at Figure 28) :\n\nA joint distribution table is a simple way to display the counts or percentages of each combination of categories for two variables. This tabular format can provide a clear summary of the distribution.\n\n\n\n\nCodempg |&gt; \n  count(trans, cyl) |&gt; \n  mutate(trans = snakecase::to_title_case(trans, numerals = \"asis\")) |&gt; \n  rename(cylinders = cyl) |&gt; \n  pivot_wider(id_cols = cylinders,\n              names_from = trans,\n              values_from = n) |&gt; \n  gt() |&gt; \n  sub_missing(missing_text = \"\") |&gt; \n  gt_theme_nytimes()\n\n\n\n\n\ncylinders\n      Auto Av\n      Auto l3\n      Auto l4\n      Auto l5\n      Auto l6\n      Auto s4\n      Auto s5\n      Auto s6\n      Manual m5\n      Manual m6\n    \n\n\n4\n2\n2\n24\n6\n\n2\n1\n4\n33\n7\n\n\n6\n3\n\n29\n16\n2\n\n1\n5\n18\n5\n\n\n8\n\n\n30\n17\n4\n1\n1\n5\n5\n7\n\n\n5\n\n\n\n\n\n\n\n2\n2\n\n\n\n\n\nFigure 28: Joint Distribution Table: Transmission vs. Cylinders\n\n\n\n\nMultiple Pie Charts: Figure 29\n\nWhen you have a limited number of categories for both variables, you can create multiple pie charts, one for each category of the second variable, to show how the first variable is distributed within each category.\n\n\n\n\nCode# A fix for free scales not working with coord_polar)()\n# https://github.com/tidyverse/ggplot2/issues/2815\ncp &lt;- coord_polar(theta = \"y\")\ncp$is_free &lt;- function() TRUE\n\nmpg |&gt; \n  count(cyl, trans) |&gt; \n  ggplot(aes(x = \"\", \n             y = n,\n             fill = trans)) +\n  geom_col(position = \"stack\", col = \"white\")  +\n  cp +\n  facet_wrap(~ cyl, nrow = 1, scales = \"free\") +\n  scale_fill_brewer(palette = \"Set3\") +\n  theme_classic() + \n  theme(legend.position = \"bottom\",\n        axis.text = element_blank(),\n        axis.line = element_blank(),\n        axis.ticks = element_blank(),\n        axis.title = element_blank(),\n        aspect.ratio = 1) +\n  labs(title = \"Multiple pie charts for Cylinders vs. Transmission\",\n       fill = \"Transmission\")\n\n\n\nFigure 29: Multiple Pie Charts for depicting Transmission vs. Cylinders\n\n\n\n\n\nScatter-plot with Categories:\n\nIf one of the categorical variables has a natural ordering, you can create a scatterplot and use colors or symbols to represent the categories of the other variable. This allows you to see how the data points are distributed.\nThis is not applicable here as manufacturer , model , trans and class do not follow any specific order.\n\n\n\nThe choice of method depends on the specific characteristics of your data and the insights you want to extract. You should consider the data structure, the number of categories in each variable, and the relationships you want to explore when selecting the most appropriate visualization technique."
  },
  {
    "objectID": "Chapter3.html#question-1",
    "href": "Chapter3.html#question-1",
    "title": "Chapter 3",
    "section": "",
    "text": "What geoms would you use to draw each of the following named plots?\nHere’s a table that shows the geoms you would use in ggplot2 to create each of the named plots, along with example code using the mpg dataset:\n\n\n\n\n\n\n\nPlot Type\n\nggplot2 Geom\nExample Code\n\n\n\nScatterplot\ngeom_point()\nggplot(mpg,\n       aes(x = displ,\n           y = hwy)) +\n  geom_point()\n\n\nLine chart\ngeom_line()\nggplot(mpg,\n       aes(x = displ,\n           y = hwy)) +\n  geom_line()\n\n\nHistogram\ngeom_histogram()\nggplot(mpg,\n       aes(x = hwy)) +\n  geom_histogram()\n\n\nBar chart\ngeom_bar()\nggplot(mpg,\n       aes(x = class)) +\n  geom_bar()\n\n\nPie chart\n\ngeom_bar() +\ncoord_polar()\n\nggplot(mpg,\n       aes(x = class)) +\n  geom_bar(position = \"stack\") +\n  coord_polar(theta = \"y\")"
  },
  {
    "objectID": "Chapter3.html#question-2",
    "href": "Chapter3.html#question-2",
    "title": "Chapter 3",
    "section": "",
    "text": "What’s the difference between geom_path() and geom_polygon()? What’s the difference between geom_path() and geom_line()?\ngeom_path() and geom_polygon() are both used for creating line-based plots, but they serve different purposes. geom_line() is another geom used for line-based plots, and I’ll explain the differences between these geoms: —\n\n\ngeom_path():\n\n\ngeom_path() connects data points in the order they appear in the data frame. It’s used to create a path or line that may not necessarily form a closed shape.\n\ngeom_path() is typically used for visualizing trajectories, paths, or any data where the order of points matters.\nIn Figure 1 (a) , geom_path() connects the points in the order of their row numbers in the data, i.e. (1,1) -&gt; (2,3) -&gt; (3,1) -&gt; (2,0) -&gt; (1,1) in that order.\n\n\n\ngeom_polygon():\n\n\ngeom_polygon() is used to create filled shapes by connecting data points in the order they appear. It forms a closed path and fills the area inside.\nIt’s commonly used for creating filled polygons, like shapes on a map or shaded areas in plots.\nIn Figure 1 (b) , geom_polygon() connects the points (1,1) -&gt; (2,3) -&gt; (3,1) -&gt; (2,0) -&gt; (1,1) in that order, forming a closed shape, and fills the area inside the shape.\n\n\n\ngeom_line():\n\n\ngeom_line() is used to create a line chart by connecting data points in the order they appear on the plot axis. It is used to show trends or connections between data points, irrespective of their row number in the data frame from which they came from.\nIn Figure 1 (c) , geom_line() connects the points (1,1) -&gt; (2,3) -&gt; (2,0) -&gt; (3,1) in that order along the increasing values of x-axis variable “x”.\n\n\n\n\nCodelibrary(tidyverse)\nlibrary(cowplot)\n\ndf &lt;- data.frame(\n  x = c(1, 2, 3, 2, 1),\n  y = c(1, 3, 1, 0, 1),\n  label = paste0(\"Observation \", 1:5)\n)\n\nggplot(df, aes(x, y, label = label)) +\n  geom_path() +\n  ggrepel::geom_text_repel() +\n  labs(title = \"geom_path()\") +\n  theme_minimal_grid()\n\nggplot(df, aes(x, y, label = label)) +\n  geom_polygon(fill = \"lightblue\") +\n  ggrepel::geom_text_repel() +\n  labs(title = \"geom_polygon()\") +\n  theme_minimal_grid()\n\nggplot(df, aes(x, y, label = label)) +\n  geom_line() +\n  ggrepel::geom_text_repel() +\n  labs(title = \"geom_line()\") +\n  theme_minimal_grid()\n\n\n\n\n\n(a) geom_path()\n\n\n\n\n\n(b) geom_polygon()\n\n\n\n\n\n(c) geom_line()\n\n\n\nFigure 1: Explaining the difference betweeen geom_path(), geom_polygon() and geom_line()\n\n\n\nTo summarize, geom_path() connects points in the order they appear without necessarily forming closed shapes. geom_polygon() connects points in the order they appear and fills the area inside, creating closed shapes. geom_line() is used for creating line charts to represent trends or connections between data points."
  },
  {
    "objectID": "Chapter3.html#question-3",
    "href": "Chapter3.html#question-3",
    "title": "Chapter 3",
    "section": "",
    "text": "What low-level geoms are used to draw geom_smooth()? What about geom_boxplot() and geom_violin()?\nIn ggplot2, the geom_smooth(), geom_boxplot(), and geom_violin() geoms are high-level geoms that are built on top of lower-level geoms to create their respective visual representations. Here are the low-level geoms used to draw each of these high-level geoms:\n\n\ngeom_smooth():\n\n\ngeom_smooth() is used to add a smoothed line to a scatterplot. It’s commonly used for visualizing trends or relationships in data.\nThus, it can be seen as a collection of a very large number of very short lines connecting points calculated by loess() smoother function.\nHence, the low-level geoms used for creating the smoothed lines is geom_line().\n\n\n\ngeom_boxplot():\n\n\ngeom_boxplot() is used to create boxplots that display the distribution of data in a visually concise way.\nThe low-level geom used to draw the\n\nboxes in a boxplot: geom_rect()\n\nwhiskers in a boxplot: geom_line()\n\noutliers in a boxplot: geom_point()\n\n\n\n\n\n\ngeom_violin():\n\n\ngeom_violin() is used to create violin plots that visualize the distribution of data in a way that combines aspects of a box plot and a kernel density plot.\nAfter calculating the exact points which define the boundaries of a violin, the low-level geom used to draw the violin shapes is geom_polygon()."
  },
  {
    "objectID": "Chapter1.html#cowplot",
    "href": "Chapter1.html#cowplot",
    "title": "Chapter 1",
    "section": "cowplot",
    "text": "cowplot\nWe can use a very popular add-on cowplot (Wilke 2020) for some interesting and nice themes like theme_minimal_hgrid(), for keeping only particular lines in a ggplot. Further, it allows to place plots in a grid with joint labels.\n\nCodelibrary(cowplot) \n\ndiamonds |&gt; \n  count(cut) |&gt; \n  ggplot(aes(x = cut, y = n)) +\n  geom_col(fill = \"#c51b8a\") +\n  theme_minimal_hgrid() +\n  scale_y_continuous(labels = scales::label_number_si()) +\n  labs(x = \"Cut of the Diamond\", \n       y = \"Number of diamonds (in thousands)\")\n\ndiamonds |&gt; \n  count(cut) |&gt; \n  ggplot(aes(x = cut, y = n)) +\n  geom_col(fill = \"pink\") +\n  scale_y_continuous(labels = scales::label_number_si()) +\n  labs(x = \"Cut of the Diamond\", \n       y = \"Number of diamonds (in thousands)\") +\n  theme_half_open()\n\n\n\n\n\n(a) theme_minimal_hgrid()\n\n\n\n\n\n(b) theme_half_open()\n\n\n\nFigure 9: Different nice themes from the cowplot package arranged in a grid"
  },
  {
    "objectID": "Chapter4.html#question-1",
    "href": "Chapter4.html#question-1",
    "title": "Chapter 4",
    "section": "Question 1",
    "text": "Question 1\nDraw a boxplot of hwy for each value of cyl, without turning cyl into a factor. What extra aesthetic do you need to set?\nThe Figure 1 depicts the boxplot of hwy for each value of cyl, without turning cyl into a factor. The extra factor you need to set is the aesthetic group = cyl .\n\nCodempg |&gt; \n  ggplot(aes(cyl, hwy, group = cyl)) +\n  geom_boxplot() +\n  ggthemes::theme_clean() +\n  labs(x = \"Cylinder\", \n       y = \"Highway Mileage (miles per gallon)\",\n       title = \"Boxplot of hwy for each value of cyl\") +\n  theme(plot.title.position = \"plot\")\n\n\n\nFigure 1: Boxplot of hwy for each value of cyl, without turning cyl into a factor"
  },
  {
    "objectID": "Chapter4.html#question-2",
    "href": "Chapter4.html#question-2",
    "title": "Chapter 4",
    "section": "Question 2",
    "text": "Question 2\nModify the following plot so that you get one boxplot per integer value of displ .\nggplot(mpg,  \n       aes(displ, cty)) +    \n  geom_boxplot()\nThe following code modifies the code and produces one boxplot per integer value of displ. Importantly, we make displ a group aesthetic, so that one box-plot per value of displacement.\n\nCodeggplot(mpg, \n       aes(x = displ, y = cty,\n           group = displ)) +    \n  geom_boxplot() +\n  ggthemes::theme_hc() +\n  labs(x = \"Displacement (in litres)\",\n       y = \"City Mileage (in miles per gallon)\")\n\n\n\nFigure 2: One boxplot for city mileage per integer value of displ"
  },
  {
    "objectID": "Chapter4.html#question-3",
    "href": "Chapter4.html#question-3",
    "title": "Chapter 4",
    "section": "Question 3",
    "text": "Question 3\nWhen illustrating the difference between mapping continuous and discrete colours to a line, the discrete example needed aes(group = 1). Why? What happens if that is omitted? What’s the difference between aes(group = 1) and aes(group = 2)? Why?\nIn ggplot2, when dealing with discrete variables or combinations of them in a plot, each one is considered a separate group. So, if we use a discrete variable to set the color (like factor(colour)), ggplot2 creates a distinct line for each group, which corresponds to each separate color. In your case, there’s only one observation for each color, so no lines are drawn, as you can see in Figure 3 (a).\nOn the other hand, if we set the group = 1, we’re essentially making a new group. This group will include all observations, because the number 1 is just a numeric value and not a grouping variable in the dataset. Consequently, all observations are treated as a single group, and a line is drawn using the color from the previous observation. This means that the line segment from (1,1) going to (2,2) will have the same color as the point (1,1), as demonstrated in Figure 3 (b).\nSimilarly, if we set the group = 2, we get the same result as in Figure 3 (b) because 2 is another numeric value (just like 1) that is not a variable in the dataset. So, again, all observations are treated as a single group, and the line segment from (2,2) to (3,3) takes its color from the point (2,2), as illustrated in Figure 3 (c).\nIn both cases (aes(group = 1) and aes(group = 2), the line segments will have the same colours, and the difference is essentially in the numeric identifier used for grouping, which doesn’t affect the final outcome in this context. The purpose of using these numeric values (1 or 2) as the grouping variable is to ensure that all data points are connected in a continuous line with consistent color, regardless of the color mapping in your ggplot2 plot.\n\nCode# Re-Creating the data frame given in text-book\ndf &lt;- data.frame(x = 1:3, y = 1:3, colour = c(1, 3, 5))\n\nggplot(df, aes(x, y, colour = factor(colour))) + \n  geom_line(linewidth = 2) +\n  geom_point(size = 5)\n\nggplot(df, aes(x, y, colour = factor(colour))) + \n  geom_line(aes(group = 1), \n            linewidth = 2) +\n  geom_point(size = 5)\n\nggplot(df, aes(x, y, colour = factor(colour))) + \n  geom_line(aes(group = 2), \n            linewidth = 2) +\n  geom_point(size = 5)\n\n\n\n\n\n(a) Base code, no group aesthetic mapped to geom_line\n\n\n\n\n\n(b) geom_line(aes(group = 1))\n\n\n\n\n\n(c) geom_line(aes(group = 2))\n\n\n\nFigure 3: Illustrating the difference between mapping continuous and discrete colours to a line"
  },
  {
    "objectID": "Chapter4.html#question-4",
    "href": "Chapter4.html#question-4",
    "title": "Chapter 4",
    "section": "Question 4",
    "text": "Question 4\nHow many bars are in each of the following plots?\n(Hint: try adding an outline around each bar with colour = \"white\")\nLets examine each of the plots. The reasoning and answers are given below, and the resulting plots are in Figure 4 .\n\n\nggplot(mpg, aes(drv)) + geom_bar()\nThis plot should produce as many bars as there are values/levels of drv .Thus, this plot should produce 3 bars [n_distinct(mpg$drv)] The reason is that drv is the only aesthetic, and it is a discrete variable, so geoms are automatically grouped by the discrete variable. The resulting plot is in Figure 4 (a) .\n\n\nggplot(mpg, aes(drv, fill = hwy, group = hwy)) + geom_bar()\nThis plot should produce stacked bar-plot of up-to 3 X 27 = 81 bars. That is, total 3 bar plots (one for each level of discrete variable drv), each bar containing up-to 27 smaller bars (one for each value of the group aesthetic group = hwy. The number 27 comes from n_distinct(mpg$hwy). However, some values of hwy may be missin for each level of drv . Thus, the actual number of bars within the 3 stacked bar-plots will be 46 [nrow(count(mpg, drv, hwy))]. The color of the bars will be along a sequential colour palette since ggplot2 will treat the variable hwy as a continuous variable, and thus plot colours in a continuum sequence. The resulting plot is shown in Figure 4 (b) . To make it easier to vizualize the number of stacks, the white outlined plot is shown on Figure 5 (b) .\n\n\nggplot(mpg2, aes(drv, fill = hwy, group = id)) + geom_bar()\nThis code should now produce 234 [n_distinct(mpg2$id)] different small bars stacked into 3 big bars - one for each drv category. Each small bar will represent an observation, and its colour will depend on the value of hwy for the observation, and that too in ascending order. This is because while allotting id you had arranged the observations in ascending order of hwy. The Figure 4 (c) shows the plot. Since the colour changes are too frequent, an easier visualization showing number of stacks is in Figure 5 (c).\n\n\n\nCodeggplot(mpg, aes(drv)) + geom_bar()\n\n\nggplot(mpg, aes(drv, fill = hwy, group = hwy)) + geom_bar()\n\nmpg2 &lt;- mpg %&gt;% arrange(hwy) %&gt;% mutate(id = seq_along(hwy)) \nggplot(mpg2, aes(drv, fill = hwy, group = id)) + \n  geom_bar()\n\n\n\n\n\n(a) ggplot(mpg, aes(drv)) + geom_bar()\n\n\n\n\n\n(b) ggplot(mpg, aes(drv, fill = hwy, group = hwy)) + geom_bar()\n\n\n\n\n\n(c) ggplot(mpg2, aes(drv, fill = hwy, group = id)) + geom_bar()\n\n\n\nFigure 4: The plots produced by code given above in answer to Question No. 4\n\n\n\n\nCodeggplot(mpg, aes(drv)) + geom_bar(col = \"white\")\n\n\nggplot(mpg, aes(drv, fill = hwy, group = hwy)) + geom_bar(col = \"white\")\n\nmpg2 &lt;- mpg %&gt;% arrange(hwy) %&gt;% mutate(id = seq_along(hwy)) \nggplot(mpg2, aes(drv, fill = hwy, group = id)) + \n  geom_bar(col = \"white\")\n\n\n\n\n\n(a) ggplot(mpg, aes(drv)) + geom_bar()\n\n\n\n\n\n(b) ggplot(mpg, aes(drv, fill = hwy, group = hwy)) + geom_bar()\n\n\n\n\n\n(c) ggplot(mpg2, aes(drv, fill = hwy, group = id)) + geom_bar()\n\n\n\nFigure 5: Same bar plots, now with white outlines to show the numbers easily"
  },
  {
    "objectID": "Chapter4.html#question-5",
    "href": "Chapter4.html#question-5",
    "title": "Chapter 4",
    "section": "Question 5",
    "text": "Question 5\nInstall the babynames package. It contains data about the popularity of baby names in the US. Run the following code and fix the resulting graph. Why does this graph make us unhappy?\nlibrary(babynames)\nhadley &lt;- dplyr::filter(babynames, name == \"Hadley\")\nggplot(hadley, aes(year, n)) + \n  geom_line()\nOnce you run the code, you can see a saw-toothed graph shown in Figure 6 (a). To detect the problem, we can plot a scatter-plot where we see some observations lie very close to azero. These ust be of a separate sex. The scatter plot is in Figure 6 (b) . Finally, the corrected code is one where we add the group and/or color aesthetic mapped to variable sex which produces the correct plot in Figure 5 (c) .\nThe graph might make one unhappy because the name “Hadley” has been falling in popularity in the last few years.\n\nCodelibrary(babynames)\nhadley &lt;- dplyr::filter(babynames, name == \"Hadley\")\n\n\nggplot(hadley, aes(year, n)) + \n  geom_line()\n\nggplot(hadley, aes(year, n)) + \n  geom_point()\n\nggplot(hadley, aes(year, n, col = sex)) + \n  geom_line() + \n  scale_color_manual(values = c(\"magenta\", \"blue\"),\n                     labels = c(\"Female\", \"Male\"))\n\n\n\n\n\n(a) Given incorrect code in question\n\n\n\n\n\n(b) A scatterplot to see where the actual observations lie\n\n\n\n\n\n(c) The corrected plot\n\n\n\nFigure 6: Graph depicting the popularity of the name Hadley over last 100 years"
  },
  {
    "objectID": "Chapter5.html#question-1",
    "href": "Chapter5.html#question-1",
    "title": "Chapter 5",
    "section": "Question 1",
    "text": "Question 1\nWhat bin-width tells you the most interesting story about the distribution of carat?\nThe Figure 1 presented below illustrates various distribution histograms for the variable “carat” in the diamonds dataset, created using ggplot2 and geom_histogram().\nThe bin width of 0.01 reveals the most interesting narrative and pattern:\n\nDiamonds exhibit an overall right-skewed distribution, based on their carat.\nDiamonds tend to cluster around specific values such as 1, 1.25, 1.5, 1.75, 2 and so on indicating observer bias in recording the carat of diamonds. There is a tendency to round off values during the recording process.\n\n\nCodeggplot(diamonds, aes(carat)) +\n  geom_histogram() +\n  cowplot::theme_minimal_vgrid()\n\nggplot(diamonds, aes(carat)) +\n  geom_histogram(binwidth = 0.1) +\n  cowplot::theme_minimal_vgrid()\n\nggplot(diamonds, aes(carat)) +\n  geom_histogram(binwidth = 0.02) +\n  cowplot::theme_minimal_vgrid()\n\nggplot(diamonds, aes(carat)) +\n  geom_histogram(binwidth = 0.01) +\n  cowplot::theme_minimal_vgrid()\n\n\n\n\n\n(a) Default bin-width with number of bins = 30\n\n\n\n\n\n(b) Bin-width of 0.1\n\n\n\n\n\n\n\n(c) Bin-width of 0.02\n\n\n\n\n\n(d) Bin-width of 0.01\n\n\n\nFigure 1: Different bin-widths for histogram of diamonds’ carat distribution"
  },
  {
    "objectID": "Chapter5.html#question-2",
    "href": "Chapter5.html#question-2",
    "title": "Chapter 5",
    "section": "Question 2",
    "text": "Question 2\nDraw a histogram of price. What interesting patterns do you see?\nThe histogram presented Figure 2 illustrates the distribution of the price variable, derived from the diamonds dataset within the ggplot2 package of R. Notably, we have utilized a lower bin width of 10 to discern intricate patterns.\n\nUpon examination, it becomes evident that the distribution of prices is highly right-skewed.\nAnother intriguing observation is the conspicuous gap in the distribution, particularly around the $1500 mark. Within the interval spanning $1450 to $1550, there is a notable absence of diamonds. This anomaly raises the possibility of inadvertent deletion of certain observations within the dataset or, alternatively, could be attributed to errors in data recording. Further investigation may shed light on the cause of this unexpected pattern.\n\n\nCodediamonds |&gt; \n  ggplot(aes(price)) + \n  geom_histogram() +\n  cowplot::theme_minimal_vgrid() +\n  scale_x_continuous(labels = scales::label_number_si(prefix = \"$\"),\n                     breaks = seq(0, 20000, 2000))\n\ndiamonds |&gt; \n  ggplot(aes(price)) + \n  geom_histogram(binwidth = 10) +\n  cowplot::theme_minimal_vgrid() +\n  scale_x_continuous(labels = scales::label_number_si(prefix = \"$\"),\n                     breaks = seq(0, 20000, 2000))\n\n\n\n\n\n(a) Default bin-width with number of bins = 30\n\n\n\n\n\n(b) Histogram with Bin-width = 10\n\n\n\nFigure 2: Histogram of price distribution for the diamonds"
  },
  {
    "objectID": "Chapter5.html#question-3",
    "href": "Chapter5.html#question-3",
    "title": "Chapter 5",
    "section": "Question 3",
    "text": "Question 3\nHow does the distribution of price vary with clarity?\nThe Figure 3 depicts the distribution of price versus clarity for the diamond dataset. Given that price is a continuous variable and clarity is a categorical / discrete variable, various graphical representations can be employed for analysis. These include:\n\nMultiple Box-plots (depicted below in Figure 3 (a) ): The use of multiple boxplots allows us to visually compare the distribution of prices across different clarity levels.\n\nViolin Plots (depicted below in Figure 3 (b) ): The inclusion of violin plots provides a nuanced view of the price distribution.\nThe observed box-plots and violin plots reveal that the distribution of prices is right-skewed for all clarity levels. Furthermore, at higher clarity levels, the right-skewness becomes more pronounced, indicating a scarcity of highly priced diamonds within each clarity tier.\nThe data suggests a consistent right-skewed pattern across all clarity levels, with a notable intensification of skewness at higher clarity levels. This implies a scarcity of diamonds with exceptionally high prices within each clarity category.\n\n\nThe other methods which can be employed include: —\n\nHistograms with Faceting: Employing histograms with faceting can offer additional insights into the distribution of prices within each clarity category, allowing for a more detailed examination.\nDensity Plots with Different Colors for Different Clarity Levels: Utilizing density plots with distinct colors for each clarity level enhances the clarity of the distribution patterns. This approach is less useful here as there many clarity levels, resulting in over-crowded density plots.\n\n\nCodeggplot(diamonds, aes(clarity, \n                     price,\n                     fill = clarity)) +\n  geom_boxplot(outlier.alpha = 0.1,\n               varwidth = TRUE,\n               outlier.shape = 20) +\n  cowplot::theme_minimal_hgrid() +\n  theme(axis.line.x = element_blank(),\n        legend.position = \"none\")\n\nggplot(diamonds, aes(clarity, \n                     price,\n                     fill = clarity)) +\n  geom_violin() + \n  cowplot::theme_minimal_hgrid() +\n  theme(axis.line.x = element_blank(),\n        legend.position = \"none\")\n\n\n\n\n\n(a) Multiple Boxplots\n\n\n\n\n\n(b) Multiple Violin Plots\n\n\n\nFigure 3: Distribution of price varying with clarity for the diamonds dataset"
  },
  {
    "objectID": "Chapter5.html#question-4",
    "href": "Chapter5.html#question-4",
    "title": "Chapter 5",
    "section": "Question 4",
    "text": "Question 4\nOverlay a frequency polygon and density plot of depth. What computed variable do you need to map to y to make the two plots comparable? (You can either modify geom_freqpoly() or geom_density().)\nAs we can see in the Figure 4, we can overlay a frequency ploygon and a density plot of depth variable as follows:\n\nCompute count on the y-axis in geom_density() using geom_density(aes(y = ..count..) to display counts on y-axis for both plots and overlay them, as shown in Figure 4 (a) .\nCompute density on the y-axis in geom_freqpoly() using geom_freqpoly(aes(y = ..density..) to display densities on y-axis for both plots and overlay them, as shown in Figure 4 (b) .\n\n\nCodetitle = \"Overlay of &lt;span style='color: blue;'&gt;Frequency Polygon&lt;/span&gt; and &lt;span style='color: orange;'&gt;Density Plot&lt;/span&gt; of Depth\" \n\nggplot(diamonds, aes(x = depth)) +\n  \n  # Overlay frequency polygon\n  geom_freqpoly(color = \"blue\", lwd = 1) +\n  \n  # Overlay density plot\n  geom_density(aes(y = ..count..), \n               col = \"orange\", lwd = 1) +\n  \n  # Add labels and title\n  labs(title = title,\n       x = \"Depth\",\n       y = \"Count\") +\n  \n  # Adjust theme for markdown element in the title\n  theme_minimal() +\n  theme(plot.title = element_markdown())\n\n\nggplot(diamonds, aes(x = depth)) +\n  \n  # Overlay frequency polygon\n  geom_freqpoly(aes(y = ..density..),\n                color = \"blue\", lwd = 1) +\n  \n  # Overlay density plot\n  geom_density(col = \"orange\", lwd = 1) +\n  \n  # Add labels and title\n  labs(title = title,\n       x = \"Depth\",\n       y = \"Density\") +\n  \n  # Adjust theme for markdown element in the title\n  theme_minimal() +\n  theme(plot.title = element_markdown())\n\n\n\n(a) Modifying geom_density to display count\n\n\n\n\n\n(b) Modifying geom_freqpoly to display density\n\n\nFigure 4: Overlay a frequency polygon and density plot of depth"
  },
  {
    "objectID": "Chapter6.html#simple-features-maps",
    "href": "Chapter6.html#simple-features-maps",
    "title": "Chapter 6",
    "section": "6.2 Simple features maps",
    "text": "6.2 Simple features maps\nFirst, we download a shape file of India’s map (from here) and plot a map of India with latest state and Union Territory boundaries. The code below shows a simple example of ease of plotting with ggplot() and geom_sf() along with labeling official names of States and Union Territories.\n\nCode# Plotting the actual map\nindia_map |&gt; \n  \n  # A variable to use for different font colour for States vs. Union Territories\n  mutate(type = if_else(state %in% union_territories,\n                        \"Union Territory\",\n                        \"State\")) |&gt; \n  # Start Plot\n  ggplot(aes(geometry = geometry,\n             col = type)) + \n  geom_sf(col = \"darkgrey\", fill = \"white\") +\n  geom_sf_text(aes(label = state,\n                size = type)) +\n  \n  # Colour and Size Scales\n  scale_color_manual(values = c(\"darkblue\", \"darkred\")) +\n  scale_size_discrete(range = c(3.5, 2.5)) +\n  \n  # Themes\n  theme_map() +\n  theme(legend.position = \"bottom\") +\n  labs(col = NULL) +\n  \n  # Adding Scale and North Arrow\n  annotation_scale(bar_cols = c(\"darkgrey\", \"white\"),\n                   location = \"br\") +\n  annotation_north_arrow(location = \"tr\", \n                         which_north = \"true\") +\n  guides(size = \"none\")"
  },
  {
    "objectID": "Chapter6.html#working-with-sf-data",
    "href": "Chapter6.html#working-with-sf-data",
    "title": "Chapter 6",
    "section": "6.4 Working with sf data",
    "text": "6.4 Working with sf data\nWe can even drawn out different pieces of polygons, i.e. islands, enclaves or exclaves using sf data. The beauty of multi-polygon sf objects (i.e., geographic administrative units with more than one polygon, or, in simpler terms, groups of islands or non-contiguous areas) is that we can use st_cast(&lt;object_name&gt;, \"POLYGON\") to separate out each polygon (contiguous area unit) and order them by size using st_area() . We can pick out single polygons, even ordered by size, as we can see in Figure 1 (b) and Figure 1 (c) from an example using India’s Andaman and Nicobar Islands: –\n\nCode# Pull out the geometry of Andaman and Nicobar Islands as \"ani\"\nani &lt;- india_map |&gt; \n  filter(state == \"Andaman and Nicobar Islands\") |&gt; \n  pull(geometry)\n\n# Bounding Box of ani\nlims &lt;- st_bbox(ani)\n\n# Create different polygon objects from a single multi-polygon \nani_islands &lt;- st_cast(ani, \"POLYGON\")\n\n# Checking order: We see that islands are listed in decreasing order of size\n# order(st_area(ani_islands), decreasing = TRUE)\n\n# A common theme to use in all Island Maps\ntheme_islands &lt;- theme_map() +\n  theme(axis.text.x = element_text(angle = 90, \n                                   vjust = 0.5,\n                                   size = 25),\n        axis.text.y = element_text(vjust = 0.5,\n                                   size = 25),\n        plot.title.position = \"plot\",\n        panel.background = element_rect(fill = \"lightblue\"),\n        plot.title = element_text(size = 25))\n\n# Drawing the complete Andaman and Nicobar Islands\nindia_map |&gt; \n  filter(state == \"Andaman and Nicobar Islands\") |&gt; \n  ggplot() +\n  geom_sf(fill = \"white\") +\n  labs(title = \"Andaman and Nicobar Islands\") +\n  scale_x_continuous(limits = c(lims[\"xmin\"], lims[\"xmax\"])) +\n  scale_y_continuous(limits = c(lims[\"ymin\"], lims[\"ymax\"])) +\n  theme_islands\n\n# Drawing the largest of the Andaman and Nicobar Islands\nggplot(ani_islands[1]) +\n  geom_sf(fill = \"white\") +\n  labs(title = \"Largest Island: Middle Andaman\") +\n  scale_x_continuous(limits = c(lims[\"xmin\"], lims[\"xmax\"])) +\n  scale_y_continuous(limits = c(lims[\"ymin\"], lims[\"ymax\"])) +\n  theme_islands\n\n# Drawing the second largest of the Andaman and Nicobar Islands\nggplot(ani_islands[2]) +\n  geom_sf(fill = \"white\") +\n  labs(title = \"2nd Largest: North Andaman\") +\n  scale_x_continuous(limits = c(lims[\"xmin\"], lims[\"xmax\"])) +\n  scale_y_continuous(limits = c(lims[\"ymin\"], lims[\"ymax\"])) +\n  theme_islands\n\n\n\n\n\n(a) Complete Islands’ Chain\n\n\n\n\n\n(b) Largest Island\n\n\n\n\n\n(c) Second Largest Island\n\n\n\nFigure 1: Plotting islands from India’s Andaman and Nicobar Islands"
  },
  {
    "objectID": "Chapter6.html#chloropleth-with-tmap",
    "href": "Chapter6.html#chloropleth-with-tmap",
    "title": "Chapter 6",
    "section": "Chloropleth with tmap\n",
    "text": "Chloropleth with tmap\n\nA package to create chloropleths very easily is the tmap package (Tennekes 2018) of R . However, is uses a very different syntax than ggplot2 . An interesting feature is the ability to plot interactive maps. However, since it is outside ggplot2 grammar and syntax, I do not use it here.\n\nCodelibrary(tmap)\ntm_hy &lt;- haryana_map |&gt; \n  mutate(area = shape_area/1e6)\n\nt_hy &lt;- tm_shape(tm_hy) +\n  tm_polygons(col = \"area\",\n              title = \"District Area\\n(in sq. km.)\",\n              border.col = \"black\",\n              interactive = TRUE,\n              style = \"pretty\")\nt_hy\ntmap_mode(\"view\")\ntmap_last()\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Chapter6.html#adding-leaflet-maps-to-chloropleths",
    "href": "Chapter6.html#adding-leaflet-maps-to-chloropleths",
    "title": "Chapter 6",
    "section": "Adding leaflet maps to Chloropleths",
    "text": "Adding leaflet maps to Chloropleths\n\nCodelibrary(leaflet)\n\n# Create a quantile of colours' palette to be used\npal_hy &lt;- colorQuantile(\"Blues\", \n                        domain = NULL,\n                        n = 5)\n\n# Create vector of text to display on pop-ups in leaflet map\np_popup &lt;- paste0(haryana_map$district, \n                  \" District.  Area: \", \n                  round(haryana_map$shape_area/1e6, 0),\n                  \" sq. km.\")\n\n# Create leaflet map\n# Data set\nharyana_map |&gt; \n  \n  # Transform polygons into CRS=4326 since leaflet only understand that\n  st_transform(crs = 4326) |&gt; \n  \n  # Begin leaflet map\n  leaflet() |&gt; \n  \n  # Add polygons from the geometry column of the data-set\n  addPolygons(\n    stroke = FALSE,                       # remove polygon borders\n    fillColor = ~ pal_hy(shape_area/1e6), # set fill color with function\n    fillOpacity = 0.6,                    # translucent to see background map\n    smoothFactor = 0.5,                   # make it nicer\n    popup = p_popup,                      # add popup\n    group = \"District Area\"               # a Group label for leaflet options\n  ) |&gt; \n  \n  # Add base map from leaflet; default is Open Street Maps\n  addTiles() |&gt;                           # Adding Base Map\n  \n  # Adding a legend\n  addLegend(\n    position = \"bottomright\",  # location\n    pal = pal_hy,              # palette function\n    values = ~shape_area/1e6,  # value to be passed to palette function\n    title = \"District Area (sq. km.)\" # legend title\n    ) |&gt; \n  \n  # Adding an option to view different base maps\n  addLayersControl(\n    baseGroups = c(\"OSM\", \"Carto\"),\n    overlayGroups = c(\"District Area\")\n  )"
  },
  {
    "objectID": "Chapter6.html#layered-maps",
    "href": "Chapter6.html#layered-maps",
    "title": "Chapter 6",
    "section": "6.2.1 Layered maps",
    "text": "6.2.1 Layered maps\nWe can use data from multiple data-frames and add them as layers to a map.\n\nCode# Names of Bordering states of Haryana\nbordering_states = c(\"Punjab\",\n                     \"Delhi\",\n                     \"Himachal Pradesh\",\n                     \"Rajasthan\",\n                     \"Uttar Pradesh\",\n                     \"Uttarakhand\")\n\n# Start plotting with India Map showing only bordering states\nggplot(data = india_map |&gt; \n         filter(state %in% bordering_states),\n       mapping = aes(geometry = geometry,\n                     label = state)) +\n  \n  geom_sf(fill = \"white\",\n          col = \"darkgrey\",\n          alpha = 0.5) +\n  geom_sf_text(col = \"darkgrey\") +\n  \n  # Map of Haryana with Districts\n  geom_sf(data = haryana_map,\n          fill = \"lightgrey\",\n          col = \"black\") +\n  labs(x = NULL, y = NULL,\n       title = \"Combining two sf data-frames into a single map\") +\n  theme_minimal()"
  },
  {
    "objectID": "Chapter1.html#ggspatial",
    "href": "Chapter1.html#ggspatial",
    "title": "Chapter 1",
    "section": "ggspatial",
    "text": "ggspatial\nThe ggspatial package (Dunnington 2023) provides some nice add-on features to ggplot2 maps like map scale (using annotation_scale() ) and a north arrow (using annotation_north_arrow() ). An example is shown below: –\n\nCodelibrary(tidyverse)\nlibrary(ggspatial)\nlibrary(sf)\n\n# Reading in the Haryana Map Data\nread_sf(here::here(\"data\",\n                                  \"haryana_map\",\n                                  \"HARYANA_DISTRICT_BDY.shp\")) |&gt; \n  janitor::clean_names() |&gt; \n  mutate(\n    district = str_replace_all(district,\n                               pattern = \"&gt;\",\n                               replacement = \"A\"),\n    state = str_replace_all(state,\n                            pattern = \"&gt;\",\n                            replacement = \"A\"),\n    district = case_when(\n      district == \"FAR|DABAD\" ~ \"FARIDABAD\",\n      district == \"J|ND\" ~ \"JIND\",\n      district == \"PAN|PAT\" ~ \"PANIPAT\",\n      district == \"SON|PAT\" ~ \"SONIPAT\",\n      .default = district\n    ),\n    district = snakecase::to_title_case(district)\n      ) |&gt; \n  \n  # Plot the State of Haryana in India\n  ggplot(aes(geometry = geometry,\n             label = district)) +\n  geom_sf(fill = \"lightgrey\", \n          col = \"white\") +\n  geom_sf_text(size = 3) +\n  \n  # Add a north arrow\n  annotation_north_arrow(location = \"tl\") + \n  \n  # Add a scale\n  annotation_scale(bar_cols = c(\"lightgrey\", \n                                \"darkgrey\"),\n                   location = \"bl\") +\n  # Theme & Labels\n  labs(x = NULL, y = NULL, \n       title = \"Map of the State of Haryana (India)\",\n       subtitle = \"Adding North arrow and Scale using `ggspatial`\") +\n  theme_minimal()"
  },
  {
    "objectID": "Chapter6.html#layered-maps-and-6.2.2-labelled-maps",
    "href": "Chapter6.html#layered-maps-and-6.2.2-labelled-maps",
    "title": "Chapter 6",
    "section": "6.2.1 Layered maps and 6.2.2 Labelled maps",
    "text": "6.2.1 Layered maps and 6.2.2 Labelled maps\nWe can use data from multiple data-frames and add them as layers to a single map using ggplot2 as shown below: –\n\nCode# Names of Bordering states of Haryana\nbordering_states = c(\"Punjab\",\n                     \"Delhi\",\n                     \"Himachal Pradesh\",\n                     \"Rajasthan\",\n                     \"Uttar Pradesh\",\n                     \"Uttarakhand\")\n\n# Start plotting with India Map showing only bordering states\nggplot(data = india_map |&gt; \n         filter(state %in% bordering_states),\n       mapping = aes(geometry = geometry,\n                     label = state)) +\n  \n  geom_sf(fill = \"white\",\n          col = \"darkgrey\",\n          alpha = 0.5) +\n  geom_sf_text(col = \"darkgrey\") +\n  \n  # Map of Haryana with Districts\n  geom_sf(data = haryana_map,\n          fill = \"lightgrey\",\n          col = \"black\") +\n  \n  # Labels and theme\n  labs(x = NULL, y = NULL,\n       title = \"Combining two sf data-frames into a single map\") +\n  theme_minimal()"
  },
  {
    "objectID": "Chapter6.html#adding-other-geoms",
    "href": "Chapter6.html#adding-other-geoms",
    "title": "Chapter 6",
    "section": "6.2.3 Adding other geoms",
    "text": "6.2.3 Adding other geoms\nPlotting a specific state from i..e, Haryana, and its districts along with their area (in thousand sq. km.) using official data from Survey of India, and adding geoms from other metadata - area and length of district borders: –\n\nCodeharyana_map |&gt;\n  select(-c(remarks, state_lgd, district_l)) |&gt; \n  arrange(desc(shape_area)) |&gt; \n  mutate(\n    rank = row_number(),\n    area = round(shape_area/1e9, 2),\n    font_col = district %in% c(\"Hisar\", \"Sirsa\")\n  ) |&gt; \n  \n  ggplot(aes(geometry = geometry,\n             label = paste0(district),\n             fill = shape_area/1e6)) +\n  geom_sf(col = \"white\") +\n  geom_sf_text(aes(col = font_col),\n               size = 4) +\n  theme_map() +\n  annotation_scale(location = \"br\") +\n  annotation_north_arrow(location = \"tr\") +\n  labs(fill = \"District Area\\n(in sq. km.)\",\n       title = \"Haryana: Districts (with area)\") +\n  scale_fill_viridis_c(labels = scales::label_comma(),\n                       option = \"G\") +\n  scale_color_manual(values = c(\"white\", \"black\")) +\n  guides(col = \"none\")\n\n\n\n\nChloropleth with tmap\n\nA package to create chloropleths very easily is the tmap package (Tennekes 2018) of R . However, is uses a very different syntax than ggplot2 . An interesting feature is the ability to plot interactive maps. However, since it is outside ggplot2 grammar and syntax, I do not use it here.\n\nCodelibrary(tmap)\ntm_hy &lt;- haryana_map |&gt; \n  mutate(area = shape_area/1e6)\n\nt_hy &lt;- tm_shape(tm_hy) +\n  tm_polygons(col = \"area\",\n              title = \"District Area\\n(in sq. km.)\",\n              border.col = \"black\",\n              interactive = TRUE,\n              style = \"pretty\")\nt_hy\ntmap_mode(\"view\")\ntmap_last()\n\ntmap_mode(\"plot\")\n\n\nAdding leaflet maps to Chloropleths\n\nCodelibrary(leaflet)\n\n# Create a quantile of colours' palette to be used\npal_hy &lt;- colorQuantile(\"Blues\", \n                        domain = NULL,\n                        n = 5)\n\n# Create vector of text to display on pop-ups in leaflet map\np_popup &lt;- paste0(haryana_map$district, \n                  \" District.  Area: \", \n                  round(haryana_map$shape_area/1e6, 0),\n                  \" sq. km.\")\n\n# Create leaflet map\n# Data set\nharyana_map |&gt; \n  \n  # Transform polygons into CRS=4326 since leaflet only understand that\n  st_transform(crs = 4326) |&gt; \n  \n  # Begin leaflet map\n  leaflet() |&gt; \n  \n  # Add polygons from the geometry column of the data-set\n  addPolygons(\n    stroke = FALSE,                       # remove polygon borders\n    fillColor = ~ pal_hy(shape_area/1e6), # set fill color with function\n    fillOpacity = 0.6,                    # translucent to see background map\n    smoothFactor = 0.5,                   # make it nicer\n    popup = p_popup,                      # add popup\n    group = \"District Area\"               # a Group label for leaflet options\n  ) |&gt; \n  \n  # Add base map from leaflet; default is Open Street Maps\n  addTiles() |&gt;                           # Adding Base Map\n  \n  # Adding a legend\n  addLegend(\n    position = \"bottomright\",  # location\n    pal = pal_hy,              # palette function\n    values = ~shape_area/1e6,  # value to be passed to palette function\n    title = \"District Area (sq. km.)\" # legend title\n    ) |&gt; \n  \n  # Adding an option to view different base maps\n  addLayersControl(\n    baseGroups = c(\"OSM\", \"Carto\"),\n    overlayGroups = c(\"District Area\")\n  )"
  },
  {
    "objectID": "Chapter6.html#data-sources",
    "href": "Chapter6.html#data-sources",
    "title": "Chapter 6",
    "section": "6.6 Data Sources",
    "text": "6.6 Data Sources\nTo obtain shapefiles for various states and administrative units of India from the Survey of India, you can visit their official website at https://onlinemaps.surveyofindia.gov.in/Digital_Product_Show.aspx. The Survey of India provides digital products, including shapefiles, and many of them are available free of cost.\nAnother valuable source for obtaining administrative boundary shapefiles is https://gadm.org/. GADM (Global Administrative Areas) offers global administrative maps and data, including those for India. Both Survey of India and GADM are reputable platforms that cater to the geographical data needs of researchers, analysts, and the public, making it convenient to access accurate and up-to-date spatial information."
  },
  {
    "objectID": "Chapter1.html#ggfittext",
    "href": "Chapter1.html#ggfittext",
    "title": "Chapter 1",
    "section": "ggfittext",
    "text": "ggfittext\nThe ggfittext package (Wilkins 2023) offers a versatile solution for incorporating text (instead of geom_text()) into plots with automated handling of resizing, rescaling, and color adaptation to fit within polygons or boxes. Its key functions include:\n\ngeom_fit_text(): This function dynamically resizes text to fit within a specified box. By automatically inferring the width and height of the designated box, geom_fit_text() reduces the size of text that exceeds these dimensions. Noteworthy parameters such as reflow = TRUE and grow = TRUE enable text warping and size incrementation, respectively. Additionally, the contrast = TRUE feature automatically adjusts the text color to complement varying backgrounds, as commonly encountered in heatmaps.\ngeom_bar_text(): Serving a similar purpose, this function extends its capabilities to bar plots, stacked bar plots, and dodged/side-by-side bar plots. It encompasses the same functionalities as geom_fit_text(), providing seamless integration of text within these specific plot types.\n\nTwo examples are shown in Figure 10 .\n\nCodelibrary(tidyverse)\nlibrary(ggfittext)\n\ndf &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-11-21/rladies_chapters.csv') |&gt; \n  select(date, location) |&gt; \n  mutate(year = year(date),\n         month = month(date, label = TRUE, abbr = TRUE)) |&gt; \n  count(year, month) |&gt; \n  mutate(year = as.character(year))\n\n# Actual Plots------------------------------------------------------------------\ndf |&gt;\n  count(year, wt = n) |&gt; \n  ggplot(aes(x = n, \n             y = year, \n             label = n)) +\n  geom_col(col = NA) +\n  geom_bar_text(contrast = TRUE) +\n  theme_minimal() +\n  labs(x = NULL, y = NULL,\n       title = \"Number of R-Ladies Chapter Events over the years\") +\n  theme(axis.line = element_blank(),\n        panel.grid = element_blank())\n\n\ndf |&gt; \n  ggplot(aes(x = month, \n             y = year,\n             fill = n,\n             label = n)) +\n  geom_tile(col = \"white\") +\n  geom_fit_text(contrast = TRUE) +\n  scale_fill_gradient(low = \"#e6e6e6\", high = \"#171717\") +\n  theme_minimal() +\n  theme(panel.grid = element_blank(),\n        legend.position = \"none\",\n        axis.title = element_blank(),\n        plot.margin = unit(c(0,0,10,10), \"pt\")\n  ) +\n  labs(title = \"R-Ladies Chapter events - months and year-wise - A heatmap\")\n\n\n\n\n\n(a) geom_bar_text() places labels inside and outside bars automatically\n\n\n\n\n\n(b) geom_fit_text() places text inside heatmap or geom_tile with automatic contrasting\n\n\n\nFigure 10: Displaying bar-charts and heat maps using labels from ggfittext"
  },
  {
    "objectID": "Chapter1.html#gganimate",
    "href": "Chapter1.html#gganimate",
    "title": "Chapter 1",
    "section": "gganimate",
    "text": "gganimate\nThe gganimate package (Pedersen and Robinson 2022) in R stands as a powerful tool for transforming static ggplot2 visualizations into dynamic and animated graphics. By seamlessly integrating with the ggplot2 ecosystem, gganimate enables users to breathe life into their plots, adding a temporal dimension to the presentation of data trends and patterns. L\nWhether visualizing changes over time, showcasing transitions between different states, or animating the evolution of data-driven narratives, gganimate opens up new avenues for exploration and communication in the realm of data visualization. An example is shown in the Figure 13 below.\n\nCodegganim2 &lt;- flights |&gt;\n \n   # Filter the flights dataset to include only the top 9 carriers\n  filter(carrier %in% carriers_to_plot) |&gt;\n  \n  # Create new columns: 'date' by combining year, month, and day, and \n  # 'month' to represent the month as a label\n  mutate(date = make_date(year = year, month = month, day = day),\n         month = month(date, label = TRUE, abbr = FALSE)) |&gt;\n  \n  # Select specific columns for the subsequent analysis\n  select(date, month, carrier, arr_delay) |&gt;\n \n  # Group the data by 'month' and 'carrier', and calculate the average arrival delay\n  group_by(month, carrier) |&gt;\n  summarize(\n    avg_delay = mean(arr_delay, na.rm = TRUE)\n  ) |&gt;\n  \n  # Join the full names of airlines for the annotations in the animated plot\n  left_join(nycflights13::airlines, by = join_by(carrier)) |&gt;\n  \n  # Remove the 'carrier' column after joining and rename 'name' to 'carrier'\n  select(-carrier) |&gt;\n  rename(carrier = name) |&gt;\n  \n  # Calculate the rank of average delay, considering ties\n  mutate(delay_rank = rank(avg_delay, ties.method = \"first\")) |&gt;\n  \n  # Create a ggplot object with specific aesthetics for the rectangles\n  ggplot(aes(xmin = 0,\n             xmax = avg_delay,\n             y = delay_rank,\n             ymin = delay_rank - 0.45,\n             ymax = delay_rank + 0.45,\n             fill = carrier\n             )\n         ) +\n  \n  # Add filled rectangles with transparency\n  geom_rect(alpha = 0.5) +\n  \n  # Add text labels for average delay values\n  geom_text(aes(x = avg_delay, \n                label = as.character(round(avg_delay, 1))), \n            hjust = \"left\") +\n  \n  # Add text labels for carriers\n  geom_text(aes(x = 0, label = carrier), hjust = \"left\") +\n  \n  # Add a label indicating the month\n  geom_label(aes(label = month),\n             x = 4500, y = 1,\n             fill = \"white\", col = \"black\",\n             size = 10,\n             label.padding = unit(0.5, \"lines\")) +\n  \n  # Customize labels and titles\n  labs(x = NULL, y = NULL,\n       title = \"Average flight arrival delay (in minutes) during {closest_state}\") +\n  \n  # Apply a classic theme\n  theme_classic() +\n \n  # Customize plot appearance\n  theme(legend.position = \"none\",\n        axis.line.y = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        axis.line.x = element_blank(),\n        title = element_text(size = 20, hjust = 0.5)) +\n  \n  # Create multiple subplots for each month\n  facet_wrap(~ month) +\n  \n  # Remove facet labels\n  facet_null() +\n  \n  # Transition the plot by 'month'\n  transition_states(month)\n\n# Animate the ggplot object with specified settings\nanimate(gganim2,\n        duration = 40,\n        fps = 10,\n        width = 800,\n        height = 500,\n        start_pause = 10, \n        end_pause = 20)\n\n\n\n\nFigure 13: An animated bar-chart of average flight delay (in min.) for airlines over different months of 2013\n\nAnother example is shown below in Figure 14 that depicts the use of shadow_mark() to retain previous years’ data as the animation progresses.\n\nCodelibrary(fontawesome)\nlibrary(showtext)\nlibrary(ggtext)\n\n# Load fonts\nfont_add_google(\"Nova Mono\", \n                family = \"title_font\")       # Font for titles\nfont_add_google(\"Saira Extra Condensed\", \n                family = \"caption_font\")     # Font for the caption\nfont_add_google(\"JetBrains Mono\", \n                family = \"body_font\")        # Font for plot text\nshowtext_auto()\n\nplot_caption &lt;- \"Data: Mark Padgham and Noam Ross   |   Graphics: Aditya Dahiya\"\n\n\n# Defining minor breaks for the x-axis\nmb &lt;- unique(\n  as.numeric(\n    (1:10) %o% 10 ^ (0:5)  \n  )  \n)\n\ndf3 &lt;- rpkgstats |&gt; \n  mutate(year = year(date)) |&gt;\n  select(package, year, loc_R) |&gt; \n  filter(loc_R != 0 & !is.na(loc_R))\n  \n\nfill_palette &lt;- paletteer_d(\"khroma::smoothrainbow\")[22:34]\ncol_palette &lt;- fill_palette |&gt; colorspace::darken(0.4)\n\nanim &lt;- df3 |&gt;\n  filter(year &gt; 2010) |&gt; \n  ggplot(aes(loc_R, \n             fill = factor(year),\n             col = factor(year),\n             frame = year)) +\n  geom_density(alpha = 0.4) +\n  scale_x_log10(\n    minor_breaks = mb,\n    expand = expansion(c(0, 0.005)),\n    labels = label_number_si(),\n    breaks = (10^(1:4)),\n    limits = c(10, 10^4)) +\n  scale_y_continuous(expand = expansion()) +\n  scale_fill_manual(values = fill_palette) +\n  scale_color_manual(values = fill_palette) +\n  labs(\n    x = \"Lines of Code in the R Package (Log scale)\",\n    y = NULL,\n    title = \"R packages released/updated in {as.integer(frame_time)}\",\n    caption = plot_caption) +\n  theme_minimal() +\n  theme(\n    panel.grid.minor.y = element_blank(),\n    panel.grid.major.y = element_line(linetype = 2),\n    panel.grid.major.x = element_line(colour = \"#ebebeb\"),\n    panel.grid.minor.x = element_line(colour = \"#ebebeb\"),\n    plot.title = element_text(family = \"title_font\",\n                              size = 36,\n                              hjust = 0.5,\n                              color = col_palette[11]),\n    axis.text = element_text(family = \"body_font\"),\n    axis.title = element_text(family = \"body_font\", \n                              size = 15),\n    legend.position = \"none\",\n    plot.caption = element_text(\n      family = \"caption_font\",\n      hjust = 0.5 ,\n      margin = margin(12, 0, 5, 0),\n      size = 15,\n      colour = col_palette[11])\n  )\n\nanim\n\n# Final animation to render\nanimate(\n  plot = anim + \n    transition_time(year) +\n    shadow_mark(alpha = alpha/4) +\n    ease_aes(\"linear\") +\n    enter_fade() + \n    exit_fade(),\n  fps = 20,\n  duration = 12,\n  end_pause = 40,\n  height = 800,\n  width = 1000\n  )\n\n\n\n\nFigure 14: Animated density plot of Lines of Code in R packages released / updated in the past decade. Notice the rightwards shift of the bell curve, and the log scale on x-axis."
  },
  {
    "objectID": "Chapter1.html#dynamic-plots-ggiraph",
    "href": "Chapter1.html#dynamic-plots-ggiraph",
    "title": "Chapter 1",
    "section": "Dynamic Plots: ggiraph\n",
    "text": "Dynamic Plots: ggiraph\n\nThe ggiraph package (Gohel and Skintzos 2023) in R enhances the capabilities of traditional ggplot2 visualizations by introducing interactivity. This package allows us to create interactive (with shiny) and dynamic (as shown below) ggplot2 visualizations, primarily through the incorporation of HTML and JavaScript elements.\nWith ggiraph, you can add interactivity to various ggplot2 charts, such as scatter plots, bar charts, and maps, enabling users to hover over elements for additional information, click on points of interest, and explore data in a more engaging manner. The interactivity is achieved by leveraging the capabilities of web technologies, making it particularly useful for creating interactive graphics for online presentations or dashboards. You can customize tooltips, add hyperlinks, and create interactive legends, providing a versatile tool for data exploration and communication. The package is explained amazing well in ggiraph-book at https://www.ardata.fr/ggiraph-book/\n\nCode# Loading Libraries\nlibrary(tidyverse)\nlibrary(ggiraph)\nlibrary(gt)\nlibrary(patchwork)\nlibrary(sf)\n\n# Loading and Cleaning Tehsil (Sub-Districts) Map of Haryana\nharyana_map &lt;- read_sf(here::here(\"data\", \"haryana_map\", \"HARYANA_SUBDISTRICT_BDY.shp\")) |&gt; \n  janitor::clean_names() |&gt; \n  mutate(\n    district = str_replace_all(district, \"&gt;\", \"A\"),\n    tehsil = str_replace_all(tehsil, \"&gt;\", \"A\"),\n    tehsil = str_replace_all(tehsil, \"@\", \"U\"),\n    tehsil = str_replace_all(tehsil, \"\\\\|\", \"I\"),\n    district = str_replace_all(district, \"\\\\|\", \"I\")\n  ) |&gt; \n  mutate(\n    district = snakecase::to_title_case(district),\n    tehsil = snakecase::to_title_case(tehsil),\n    shape_area = round(shape_area/1e6, 2)\n  )\n  \n# Interactive Map \ng1 &lt;- haryana_map |&gt; \n  ggplot(aes(geometry = geometry,\n             data_id = tehsil,\n             tooltip = paste0(\"Sub-Division: \", tehsil, \n                              \"\\nDistrict: \", district,\n                              \"\\nArea: \", shape_area, \" sq. km.\"),\n             fill = shape_area)) +\n  geom_sf_interactive() +\n  ggthemes::theme_map() +\n  ggspatial::annotation_north_arrow(location = \"tl\") +\n  ggspatial::annotation_scale(location = \"bl\") +\n  scale_fill_gradient_interactive(low = \"yellow\", high = \"red\", \n                      name = \"Sub-Division Area (in sq. km.)\",\n                      trans = \"log10\") +\n  theme(legend.position = \"bottom\") \n\n# Interactive Horizontal Bar Plot\ng2 &lt;- haryana_map |&gt; \n  group_by(district) |&gt; \n  mutate(district_area = sum(shape_area)) |&gt; \n  arrange(desc(district_area)) |&gt; \n  ungroup() |&gt; \n  mutate(id = row_number()) |&gt; \n  ggplot(aes(y = reorder(district, -id),\n             x = shape_area,\n             group = tehsil,\n             fill = shape_area,\n             label = district,\n             data_id = tehsil,\n             tooltip = paste0(\"Sub-Division: \", tehsil, \n                              \"\\nDistrict: \", district,\n                              \"\\nArea: \", shape_area, \" sq. km.\"))) +\n  geom_col_interactive(position = \"stack\", col = \"white\") +\n  scale_fill_gradient_interactive(low = \"yellow\", high = \"red\", \n                                  name = \"Sub-Division Area (in sq. km.)\",\n                                  trans = \"log10\") +\n  scale_x_continuous(labels = scales::label_number_si()) +\n  labs(y = \"District\", x = \"Area (in sq. km.)\") +\n  theme_minimal() +\n  theme(panel.grid = element_blank(),\n        axis.ticks.y = element_blank(),\n        legend.position = \"none\",\n        axis.text.y = element_text(margin = margin(r = 0)),\n        axis.title = element_text(hjust = 1))\n\nmy_layout &lt;- \"\nAAB\nAAB\n\"\n\ncss_default_hover &lt;- girafe_css_bicolor(primary = \"#4f0882\", \n                                        secondary = \"#4f0882\")\n\nset_girafe_defaults(\n  opts_hover = opts_hover(css = css_default_hover),\n  opts_zoom = opts_zoom(min = 1, \n                        max = 4),\n  opts_tooltip = opts_tooltip(css = \"padding:3px;background-color:#333333;color:white;\"),\n  opts_sizing = opts_sizing(rescale = TRUE),\n  opts_toolbar = opts_toolbar(saveaspng = FALSE, position = \"bottom\", delay_mouseout = 5000)\n)\n\ngirafe(\n  code = print(g1 + g2 +\n           plot_layout(design = my_layout) +\n           plot_annotation(\n             title = \"Sub-Divisions of Haryana\",\n             subtitle = \"An interactive plot with Sub-Division-wise area\",\n             caption = \"Data: Survey of India. | Graphics by: Aditya Dahiya using {ggiraph} R package\"\n           ) &\n           theme(plot.title = element_text(hjust = 0.5),\n                 plot.subtitle = element_text(hjust = 0.5)))\n  )"
  },
  {
    "objectID": "Chapter1.html#ggdist",
    "href": "Chapter1.html#ggdist",
    "title": "Chapter 1",
    "section": "ggdist",
    "text": "ggdist\nThe ggdist R package (Kay 2024) introduces geoms like half_eye (implemented with stat_slabinterval()) and stat_dotsinterval() that enable the creation of rain-cloud plots. These plots offer an effective and clear visualization of data distribution, incorporating uncertainty representation. To illustrate, here’s an example in Figure 11 utilizing the diamonds dataset from ggplot2.\n\nCodelibrary(tidyverse)\nlibrary(ggdist)\n\n\n# Data-set of diamonds priced greater than $10,000\ndiamonds |&gt; \n  filter(price &gt; 10000 & color == \"J\") |&gt; \n  \n  # Setting axes and aesthetics\n  ggplot(aes(x = cut, \n             y = carat,\n             fill = cut)) +\n  \n   # Drawing the Cloud on right side of the boxplot\n  stat_slabinterval(adjust = 3,\n                    position = \"dodge\",\n                    justification = -0.1,\n                    alpha = 0.5,\n                    scale = 0.3,\n                    point_fill = \"white\",\n                    shape = 21) +\n  # Rain Drops on the left hand side\n  stat_dotsinterval(\n            side = \"left\", \n            justification = 1.05,\n            dotsize = 3,\n            stackratio = 0.75,\n            layout = \"hex\") +\n  # Labels\n  labs(x = \"Cut\", y = \"Carat\", \n       color = \"Cut\", fill = \"Cut\",\n       title = \"Raincloud plot of Diamonds' Carat\",\n       subtitle = \"Distribution of Carat across Cuts in Diamonds of J Colour above $10,000 in price\") +\n  \n  # Scales\n  scale_y_continuous(limits = c(1.5, 3.0)) +\n  \n  scale_fill_brewer(palette = \"Set2\") +\n  \n  # Theme\n  theme_classic() +\n  theme(legend.position = \"none\",\n        axis.title = element_text(hjust = 1,\n                                  face = \"bold\"))\n\n\n\nFigure 11: Raincloud plot to show distribution using ggdist\n\n\n\n\n\nThe list of geoms available for use in ggdist can be accessed here, and are shown in the adjoining figure.\nNote: Rain-cloud Plots are made by combining stat_halfeye() + stat_dotsinterval()\n\n\n\n\nCredits: {ggdist} by Matthew Kay"
  },
  {
    "objectID": "Chapter11.html#packages-for-colour-palettes-in-r",
    "href": "Chapter11.html#packages-for-colour-palettes-in-r",
    "title": "Chapter 11",
    "section": "Packages for colour palettes in R",
    "text": "Packages for colour palettes in R\n\nRColorBrewer:\n\nDescription: This package sources color palettes from ColorBrewer, delivering a diverse range of qualitative, sequential, and diverging color schemes for ggplot.\nExample:\n\nviridis:\n\nDescription: Designed for both colorblind individuals and black-and-white printing, viridis provides perceptually uniform color maps that enhance data visualization.\nExample:\n\nviridisLite:\n\nDescription: A streamlined version of viridis, viridisLite offers the same high-quality color maps with reduced dependencies for efficient use in ggplot.\nExample:\n\nwesanderson:\n\nDescription: Inspired by Wes Anderson films, this package provides a unique and aesthetically pleasing set of color palettes, adding a distinctive touch to ggplot visuals.\nExample:\n\nggsci:\n\nDescription: Drawing inspiration from scientific journals like Nature and Science, ggsci offers color palettes that lend a professional and research-oriented look to ggplot visualizations.\nExample:\n\nnord:\n\nDescription: Inspired by the Nord color scheme, this package delivers modern and elegant color palettes for ggplot, adding a contemporary feel to data visualizations.\nExample:\n\niWantHue:\n\nDescription: Enabling users to generate and explore color palettes based on criteria such as color count and harmony, iWantHue provides flexibility and customization for ggplot visuals.\nExample:\n\ncolorspace:\n\nDescription: Based on the HCL (Hue-Chroma-Luminance) color space, colorspace offers perceptually uniform and visually appealing color palettes for ggplot, enhancing the aesthetic quality of visualizations.\nExample:\n\ndichromat:\n\nDescription: Specifically catering to individuals with color vision deficiencies, dichromat provides color palettes that prioritize accessibility for improved data visualization experiences in ggplot.\nExample:\n\nggthemes:\n\nDescription: Inspired by popular data visualization libraries and software like Excel, Tableau, and Stata, ggthemes offers a variety of color palettes and themes to diversify ggplot visuals.\nExample:"
  },
  {
    "objectID": "Chapter7.html#setting-up-the-visualization",
    "href": "Chapter7.html#setting-up-the-visualization",
    "title": "Chapter 7",
    "section": "7.2.1 Setting up the visualization",
    "text": "7.2.1 Setting up the visualization\nDrawing networks only amongst the most important characters.\n\nCodesw_graph |&gt; \n  \n  # Visualizing Netwroks amongst most important characters\n  # filtering by appearances in scenes &gt; 40\n  activate(nodes) |&gt; \n  filter(value &gt; 40) |&gt; \n  \n  ggraph(layout = \"stress\") +\n  geom_edge_link(\n    mapping = aes(alpha = weightage)\n  ) +\n  geom_node_point(\n    mapping = aes(size = value, \n                  colour = colour)\n  ) +\n  geom_node_text(\n    mapping = aes(label = firstname),\n    check_overlap = TRUE,\n    repel = TRUE\n  ) +\n  scale_size_area(max_size = 10) +\n  theme_void() + \n  theme(legend.position = \"none\")"
  },
  {
    "objectID": "Chapter7.html#footnotes",
    "href": "Chapter7.html#footnotes",
    "title": "Chapter 7",
    "section": "Footnotes",
    "text": "Footnotes\n\nThe layouts have been picked up (copied) from RDocumentation webpage: ggraph (version 2.1.0) layout_tbl_graph_igraph: using igraph layout algorithms for layout_tbl_graph↩︎"
  },
  {
    "objectID": "Chapter8.html#plot-and-axis-titles",
    "href": "Chapter8.html#plot-and-axis-titles",
    "title": "Chapter 8",
    "section": "8.1 Plot and axis titles",
    "text": "8.1 Plot and axis titles\n\nCode# Pipe the 'holep' dataframe through a series of operations using the magrittr pipe operator %&gt;%\nholep |&gt;\n  \n  # Select the top 200 rows based on the 'num_votes' column\n  slice_max(order_by = num_votes, n = 200) |&gt;\n  \n  # Arrange the data in descending order of 'num_votes'\n \n  arrange(desc(num_votes)) |&gt;\n  \n  # Add new columns: 'id' (row number) and \n  # 'primary_title' (conditional labeling)\n  mutate(\n    id = row_number(),\n    primary_title = if_else(id &lt;= 20,\n      primary_title,\n      NA\n    )\n  ) |&gt;\n  \n  # Create a ggplot scatterplot\n  ggplot(aes(x = runtime_minutes, y = average_rating)) +\n  geom_smooth(method = \"lm\", col = \"lightblue\", se = FALSE) +\n  geom_jitter(aes(size = num_votes), alpha = 0.2) +\n  geom_text(aes(label = primary_title), \n            check_overlap = TRUE, \n            col = \"black\") +\n \n   # Customize axis scales and size scale\n  scale_x_continuous(breaks = c(0, 15, 30, 45, 60, 90, 120), \n                     limits = c(0, 120)) +\n  scale_size_continuous(range = c(1, 10), \n                        labels = scales::label_number_si(), \n                        trans = \"sqrt\") +\n  \n  # Set themes for the plot\n  cowplot::theme_half_open() +\n  theme(\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    axis.title.x = element_markdown(hjust = 1),\n    axis.title.y = element_markdown(hjust = 1),\n    plot.title = element_markdown(face = \"plain\"),\n    legend.title = element_markdown(),\n    axis.line = element_line(arrow = arrow(angle = 15, \n                                           length = unit(4, \"mm\")))\n  ) +\n \n   # Add labels and annotations\n  labs(\n    x = \"Run-time *(in min.)*\",\n    y = \"Average Rating\",\n    size = \"Number of Votes (on **IMDb**)\",\n    title = \"**IMDb** Holiday TV Show Episodes: Ratings _vs._ Run-time\",\n    subtitle = \"A Scatterplot of the top-200 episodes (by number of votes on IMBDb) of holiday TV shows,\\nwith top 20 labelled with names of episodes\"\n  ) +\n  \n  annotate(\n    geom = \"text\",\n    label = quote(y == a.x + b),\n    x = 90, y = 6,\n    col = \"blue\",\n    fontface = \"italic\"\n  )\n\n\n\nFigure 1: Scatterplot of TV Episodes Ratings vs. Runtime - demonstrating ‘labs’ of ggplot2 - markdown elements"
  },
  {
    "objectID": "Chapter8.html#text-labels",
    "href": "Chapter8.html#text-labels",
    "title": "Chapter 8",
    "section": "8.2 Text labels",
    "text": "8.2 Text labels\n\nCode# Pipe the 'holep' dataframe through a series of operations using the magrittr pipe operator %&gt;%\nholep |&gt;\n  \n  # Group the data by 'parent_primary_title'\n  group_by(parent_primary_title) |&gt;\n \n   # Summarize the data: count of episodes, mean votes, mean ratings, and concatenate unique genres\n  summarise(\n    n = n(),\n    votes = mean(parent_num_votes),\n    ratings = mean(parent_average_rating),\n    genre = paste(unique(genres), collapse = \",\")\n  ) |&gt;\n \n  # Select the top 40 rows based on 'votes'\n  slice_max(order_by = votes, n = 40) |&gt;\n  \n  # Arrange the data in descending order of 'votes'\n  arrange(desc(votes)) |&gt;\n  \n  # Add a new column 'gen_col' based on genre classification\n  mutate(gen_col = case_when(\n    str_detect(genre, \"Comedy\") ~ \"Comedy\",\n    str_detect(genre, \"Horror\") ~ \"Horror\",\n    str_detect(genre, \"Action\") ~ \"Action\",\n    str_detect(genre, \"Drama\") ~ \"Drama\",\n    .default = \"Others\"\n  )) |&gt;\n  \n  # Create a ggplot scatterplot\n  ggplot(aes(x = votes, y = ratings, size = n, label = parent_primary_title, color = gen_col)) +\n  geom_text(check_overlap = TRUE, hjust = \"inward\") +\n  \n  # Customize labels, titles, and scales\n  labs(\n    x = \"Number of votes (on IMDb) for the TV Series\",\n    y = \"Average Rating of episodes\",\n    size = \"Number of Holiday Season episodes\",\n    color = \"Genre\",\n    title = \"Most popular TV Series with at least 1 holiday episode\",\n    subtitle = \"A scatter-plot replaced by Text Labels\"\n  ) +\n  scale_size_continuous(range = c(4, 7)) +\n  scale_x_continuous(labels = scales::label_number_si(), \n                     limits = c(0, 1100000)) +\n  scale_color_manual(values = c(\"blue\", \"red\", \"darkgreen\", \"purple\")) +\n  \n  # Set themes for the plot\n  theme_classic() +\n  theme(\n    legend.position = \"bottom\",\n    legend.box = \"vertical\",\n    legend.margin = margin(0, 0, 0, 0),\n    legend.spacing = unit(0, \"pt\"),\n    axis.line.x = element_line(arrow = arrow(angle = 15))\n  )\n\n\n\nFigure 2: Demonstrating the use of Text Labels in place of points in a scatterplot"
  },
  {
    "objectID": "Chapter8.html#building-custom-annotations",
    "href": "Chapter8.html#building-custom-annotations",
    "title": "Chapter 8",
    "section": "8.3 Building custom annotations",
    "text": "8.3 Building custom annotations\n\nCode# IMDb logo image for annotation in the plot\nimg &lt;- image_read(\"https://cdn4.iconfinder.com/data/icons/logos-and-brands/512/171_Imdb_logo_logos-512.png\")\n\n# Extract the top 10 TV series with at least 1 holiday episode based on IMDb votes\ntv10 &lt;- holep |&gt;\n  group_by(parent_tconst, parent_primary_title) |&gt;\n  summarise(\n    start = mean(parent_start_year, na.rm = TRUE),\n    end = mean(parent_end_year, na.rm = TRUE),\n    votes = mean(parent_num_votes, na.rm = TRUE),\n    runtime = mean(parent_runtime_minutes, na.rm = TRUE),\n    rating = mean(parent_average_rating, na.rm = TRUE),\n    num_episodes = n()\n  ) |&gt;\n  ungroup() |&gt;\n  mutate(years = end - start) |&gt;\n  drop_na() |&gt;\n  slice_max(order_by = votes, n = 10)\n\n# Filter the 'holep' dataframe to see only the holiday episodes of the top 10 series\nholep |&gt;\n  filter(parent_primary_title %in% (tv10 |&gt; pull(parent_primary_title))) |&gt;\n  mutate(\n    parent_primary_title =\n      fct(parent_primary_title,\n        levels = (tv10 |&gt; pull(parent_primary_title))\n      )\n  ) |&gt;\n  \n  # Create a ggplot scatterplot\n  ggplot(aes(x = year, y = fct_rev(parent_primary_title))) +\n  ggrepel::geom_text_repel(aes(label = primary_title),\n                           vjust = +1) +\n  geom_segment(\n    data = tv10,\n    aes(x = start, xend = end, y = parent_primary_title, yend = parent_primary_title),\n    alpha = 0.3, lineend = \"round\", lwd = 3\n  ) +\n  geom_point(\n    aes(color = average_rating, size = num_votes),\n    alpha = 0.7\n  ) +\n  \n  # Customize labels, titles, and scales\n  labs(\n    x = NULL, y = NULL,\n    title = \"Holiday Episodes of IMDb's top 10 TV Series\",\n    subtitle = \"Size of dot indicates number of votes, Color indicates Average Rating on IMDb\",\n    colour = \"Average Rating\\n(IMDb)\",\n    size = \"Number of Votes (IMDb)\"\n  ) +\n  scale_color_gradient(low = \"pink\", high = \"purple\") +\n  scale_size_continuous(range = c(2, 8)) +\n  theme_minimal() +\n  theme(\n    legend.position = \"bottom\", \n    plot.title.position = \"plot\"\n  ) +\n  annotate(\n    geom = \"label\",\n    x = 1993,\n    y = 1.5,\n    label = \"Source: IMDb Non-Commercial Datasets\",\n    fontface = \"italic\",\n    hjust = 0,\n    fill = \"#f2c522\"\n  ) +\n  annotation_custom(\n    grob = grid::rasterGrob(img),\n    xmin = 1993,\n    xmax = 1998,\n    ymin = 2,\n    ymax = 5\n  )\n\n\n\nFigure 3: Text Annotations within a plot’s panel area\n\n\n\nBuilding a Visualization with Image annotations on the y-axis\n\nAn attempt to make a nice visualization with annotations for #TidyTuesday: —\n\nCode#==============================================================================#\n# Libraries --------------------------------------------------------------------\n#==============================================================================#\nlibrary(tidyverse)      # Data Wrangling and Plotting\nlibrary(here)           # Files location and loading\nlibrary(summarytools)   # Exploratory Data Analysis\nlibrary(colorfindr)     # To get colour palettes for the Viz\nlibrary(showtext)       # Using Fonts More Easily in R Graphs\nlibrary(ggimage)        # Using Images in ggplot2\nlibrary(fontawesome)    # Social Media icons\nlibrary(ggtext)         # Markdown Text in ggplot2\nlibrary(patchwork)      # For compiling plots\nlibrary(figpatch)       # Images in patchwork\nlibrary(magick)         # Work with Images and Logos\nlibrary(ggimage)        # Background Image\nlibrary(cropcircles)    # Crop Images\nlibrary(cowplot)        # Images on axis ticks\n\n#==============================================================================#\n# Data Load-in------------------------------------------------------------------\n#==============================================================================#\n\ntuesdata &lt;- tidytuesdayR::tt_load('2023-12-19')\nholep &lt;- tuesdata$holiday_episodes\nrm(tuesdata)\n\n#==============================================================================#\n# Data Wrangling----------------------------------------------------------------\n#==============================================================================#\n# Find Top 10 series of IMDb\ntv10 &lt;- holep |&gt; \n  group_by(parent_tconst, parent_primary_title) |&gt; \n  summarise(\n    start = mean(parent_start_year, na.rm = TRUE),\n    end = mean(parent_end_year, na.rm = TRUE),\n    votes = mean(parent_num_votes, na.rm = TRUE),\n    runtime = mean(parent_runtime_minutes, na.rm = TRUE),\n    rating = mean(parent_average_rating, na.rm = TRUE), \n    num_episodes = n()\n  ) |&gt; \n  ungroup() |&gt; \n  mutate(years = end - start) |&gt; \n  drop_na() |&gt; \n  slice_max(order_by = votes, n = 10)\n\n# The Actual Data to be plotted\ndf &lt;- holep |&gt; \n  \n  # See only the holiday episodes of top 10 series\n  filter(\n    parent_primary_title %in% (tv10 |&gt; pull(parent_primary_title))\n  ) |&gt; \n  # An ordered factor to display TV Series Ranking wise in the plot\n  mutate(\n    parent_primary_title = \n      fct(parent_primary_title,\n          levels = (tv10 |&gt; pull(parent_primary_title))))\n\n#==============================================================================#\n# Options & Visualization Parameters--------------------------------------------\n#==============================================================================#\n\n# Load fonts\nfont_add_google(\"Ubuntu Condensed\", \n                family = \"title_font\")       # Font for titles\nfont_add_google(\"Saira Extra Condensed\", \n                family = \"caption_font\")     # Font for the caption\nfont_add_google(\"Exo\", \n                family = \"body_font\")            # Font for plot text\nshowtext_auto()\n\n# Creating Images for 10 Series Titles\n# Image to extract\nimg &lt;- \"\"\n\n# Color Palette\nlibrary(MetBrewer)\nMetBrewer::display_all()\nmypal &lt;- met.brewer(\"Tam\")\n\n# Define colours\nlow_col &lt;- mypal[2]                   # Heat map: low colour\nhi_col &lt;- mypal[5]                    # Heat map: high colour\nbg_col &lt;- \"white\"                    # Background Colour\ntext_col &lt;- mypal[8]                  # Colour for the text\ntext_hil &lt;- mypal[7]                  # Colour for highlighted text\n\n# Define Text Size\nts = 24                              # Text Size\n\n# Caption stuff\nsysfonts::font_add(family = \"Font Awesome 6 Brands\",\n                   regular = here::here(\"docs\", \"Font Awesome 6 Brands-Regular-400.otf\"))\ngithub &lt;- \"&#xf09b\"\ngithub_username &lt;- \"aditya-dahiya\"\nxtwitter &lt;- \"&#xe61b\"\nxtwitter_username &lt;- \"@adityadahiyaias\"\nlinkedin &lt;- \"&#xf08c\"\nlinkedin_username &lt;- \"dr-aditya-dahiya-ias\"\nsocial_caption &lt;- glue::glue(\"&lt;span style='font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{github};&lt;/span&gt; &lt;span style='color: {text_col}'&gt;{github_username}  &lt;/span&gt; &lt;span style='font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{xtwitter};&lt;/span&gt; &lt;span style='color: {text_col}'&gt;{xtwitter_username}&lt;/span&gt; &lt;span style='font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{linkedin};&lt;/span&gt; &lt;span style='color: {text_col}'&gt;{linkedin_username}&lt;/span&gt;\")\n\n# Add text to plot--------------------------------------------------------------\nplot_title &lt;- \"Holiday Episodes of IMDb's top-10 TV Series\"\n\nsubtitle_text &lt;- \"The Office had the most (6) holiday season episodes, while the highest rated episode is Dexter's Dex Takes a Holiday.\"\nplot_subtitle &lt;- paste(strwrap(subtitle_text, 150), collapse = \"\\n\")\n\nplot_caption &lt;- paste0(\"**Data:** IMDb Non-Commercial Datasets. | \", \"**Graphics:** \", social_caption)\n\n\n#==============================================================================#\n# Images for Y-Axis ------------------------------------------------------------\n#==============================================================================#\nurl1 &lt;- \"https://www.tvstyleguide.com/wp-content/uploads/2017/05/the_vampire_diaries_logo-1.jpg\"\nurl2 &lt;- \"https://resizing.flixster.com/-XZAfHZM39UwaGJIFWKAE8fS0ak=/v3/t/assets/p9974290_b_h8_ba.jpg\"\nurl3 &lt;- \"https://cdn1.edgedatg.com/aws/v2/abc/ModernFamily/showimages/cae29355a2f177539897e6db1d9b0861/1600x900-Q90_cae29355a2f177539897e6db1d9b0861.jpg\"\nurl4 &lt;- \"https://1000logos.net/wp-content/uploads/2017/07/emblem-Supernatural.jpg\"\nurl5 &lt;- \"https://pics.filmaffinity.com/House_M_D_TV_Series-298794401-large.jpg\"\nurl6 &lt;- \"https://cdn.britannica.com/63/247263-050-3ABF5622/promotional-still-The-Office-Steve-Carell.jpg\"\nurl7 &lt;- \"https://m.media-amazon.com/images/M/MV5BNjg1MDQ5MjQ2N15BMl5BanBnXkFtZTYwNjI5NjA3._V1_FMjpg_UX1000_.jpg\"\nurl8 &lt;- \"https://rukminim2.flixcart.com/image/850/1000/k0zlsi80/poster/f/p/y/medium-dexter-tv-series-poster-for-room-office-13-inch-x-19-inch-original-imafknhcvrnzxfwy.jpeg\"\nurl9 &lt;- \"https://resizing.flixster.com/-XZAfHZM39UwaGJIFWKAE8fS0ak=/v3/t/assets/p185554_b_v9_bk.jpg\"\nurl10 &lt;- \"https://m.media-amazon.com/images/M/MV5BNDVkYjU0MzctMWRmZi00NTkxLTgwZWEtOWVhYjZlYjllYmU4XkEyXkFqcGdeQXVyNTA4NzY1MzY@._V1_.jpg\"\n\nmk_logo &lt;- function(url){\n  image_read(url) |&gt; \n  image_resize(\"x300\") |&gt; \n  circle_crop(border_size = 1, \n              border_colour = \"black\") |&gt; \n  image_read()\n  }\n\n#==============================================================================#\n# Data Visualization------------------------------------------------------------\n#==============================================================================#\n\np &lt;- df |&gt; \n  ggplot(aes(x = year,\n             y = fct_rev(parent_primary_title))) + \n  ggrepel::geom_text_repel(\n    aes(label = primary_title),\n    family = \"body_font\",\n    col = mypal[7],\n    size = 3, nudge_y = -0.5) +\n  geom_segment(\n    data = tv10,\n    aes(x = start,\n        xend = end,\n        y = parent_primary_title,\n        yend = parent_primary_title),\n    alpha = 0.3,\n    lineend = \"round\",\n    lwd = 4, \n    col = mypal[7]\n  ) +\n  geom_point(\n    aes(color = average_rating,\n        size = num_votes),\n    alpha = 0.96\n  ) +\n  scale_color_gradient(low = low_col, \n                        high = hi_col) +\n  scale_size_continuous(range = c(4, 12),\n                        labels = scales::label_number_si()) +\n  scale_x_continuous(limits = c(1993, 2023),\n                     breaks = seq(1995, 2020, 5),\n                     expand = c(0, 0)) +\n  theme_minimal() +\n  theme(\n    legend.position = \"bottom\"\n  ) +\n  labs(title = plot_title,\n       caption = plot_caption,\n       subtitle = NULL,\n       x = NULL, y = NULL,\n       color = \"Episode Rating (IMDb)\",\n       size = \"Number of Votes (IMDb)\") +\n  guides(size = guide_legend(override.aes = list(colour = text_hil)),\n         alpha = \"none\") + \n  theme(\n    plot.caption =  element_textbox(family = \"caption_font\",\n                                    hjust = 0.5,\n                                    colour = text_col,\n                                    size = ts/2),\n    plot.title   =     element_text(hjust = 0.5,\n                                    size = 2*ts,\n                                    family = \"title_font\",\n                                    face = \"bold\",\n                                    colour = text_col),\n    plot.subtitle    = element_text(hjust = 0,\n                                    size = ts/2,\n                                    family = \"body_font\",\n                                    colour = text_col),\n    plot.background =  element_rect(fill = bg_col,\n                                    color = bg_col,\n                                    linewidth = 0),\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    panel.grid.major.y = element_line(linetype = 2),\n    axis.text       =  element_text(hjust = 0.5,\n                                    size = ts/2,\n                                    family = \"body_font\",\n                                    colour = text_col),\n    legend.title = element_text(family = \"body_font\",\n                                colour = text_col,\n                                vjust = 0.5),\n    legend.key.height = unit(2, \"mm\"),\n    legend.text = element_text(family = \"body_font\",\n                               colour = text_col),\n    plot.title.position = \"plot\",\n    plot.caption.position = \"plot\"\n    )\nscale_fac = 0.9\n\npimage &lt;- axis_canvas(\n  p, \n  axis = \"y\") + \n  draw_image(mk_logo(url1), y = 0.5, scale = scale_fac) +\n  draw_image(mk_logo(url2), y = 1.5, scale = scale_fac) +\n  draw_image(mk_logo(url3), y = 2.5, scale = scale_fac) +\n  draw_image(mk_logo(url4), y = 3.5, scale = scale_fac) +\n  draw_image(mk_logo(url5), y = 4.5, scale = scale_fac) +\n  draw_image(mk_logo(url6), y = 5.5, scale = scale_fac) +\n  draw_image(mk_logo(url7), y = 6.5, scale = scale_fac) +\n  draw_image(mk_logo(url8), y = 7.5, scale = scale_fac) +\n  draw_image(mk_logo(url9), y = 8.5, scale = scale_fac) +\n  draw_image(mk_logo(url10), y = 9.5, scale = scale_fac)\n\n\n# insert the image strip into the plot\nggdraw(insert_yaxis_grob(\n  p, \n  pimage, \n  position = \"left\",\n  width = unit(15, \"mm\")))"
  },
  {
    "objectID": "Chapter8.html#direct-labelling",
    "href": "Chapter8.html#direct-labelling",
    "title": "Chapter 8",
    "section": "8.4 Direct labelling",
    "text": "8.4 Direct labelling\nAn Example using directlabels package (Hocking 2023) is at Figure 4\n\nCodelibrary(directlabels)\n\n# Top 10 TV Series with most holiday season episodes\nnames_series &lt;- holep |&gt; \n  count(parent_primary_title, sort = TRUE) |&gt; \n  filter(n &gt; 10) |&gt; \n  pull(parent_primary_title)\n\nselect_name = \"Holiday Baking Championship\"\nn = 5\n\nholep |&gt; \n  filter(parent_primary_title %in% names_series[1:n]) |&gt; \n  ggplot(\n    aes(x = num_votes,\n        y = average_rating,\n        color = parent_primary_title)\n  ) +\n  # Background Highlighting of specific series\n  geom_point(\n    data = (holep |&gt; filter(parent_primary_title == select_name)),\n    size = 5,\n    color = \"lightgrey\"\n  ) +\n  \n  # Plotting all the points\n  geom_point() +\n  \n  # Text Annotation Arrow\n  annotate(\n    geom = \"curve\",\n    x = (holep |&gt; \n           filter(parent_primary_title == select_name) |&gt; \n           arrange(average_rating) |&gt; \n           slice_head(n = 1) |&gt; \n           pull(num_votes)),\n    y = (holep |&gt; \n           filter(parent_primary_title == select_name) |&gt; \n           arrange(average_rating) |&gt; \n           slice_head(n = 1) |&gt; \n           pull(average_rating)),\n    xend = 80, yend = 4,\n    arrow = arrow(length = unit(2, \"mm\")),\n    col = \"darkgrey\"\n  ) +\n  \n  # Text Annotation\n  annotate(\n    geom = \"label\",\n    x = 80, y = 4,\n    hjust = 0,\n    vjust = 0.5,\n    label = paste0(\"TV Episodes of\\n\", select_name),\n    fill = \"grey\",\n    fontface = \"italic\",\n    label_padding = unit(15, \"mm\"),\n    label_size = unit(0, \"mm\")\n  ) +\n  \n  # Labels and Titles\n  labs(\n    x = \"Number of Votes for the episode on IMDb\",\n    y = \"Average Rating of the Episode\",\n    title = paste0(\"Ratings and Votes for episodes of \", select_name),\n    subtitle = paste0(\"Comparison with other series in the top \", n, \" TV Series by number of holiday episodes\")\n  ) +\n  scale_x_continuous(trans = \"log10\") +\n  scale_color_brewer(palette = \"Set1\") + \n  cowplot::theme_half_open() +\n  theme(\n    axis.title = element_text(hjust = 1),\n    legend.position = \"none\",\n    axis.line = element_line(arrow = arrow(length = unit(3, \"mm\")))\n  ) +\n  \n  # Using directlabels\n  directlabels::geom_dl(\n    aes(label = parent_primary_title),\n    method = \"smart.grid\"\n  )\n\n\n\nFigure 4: Using directlabels and annotations to make reading the scatterplot easier, instead of a legend\n\n\n\nAnother example, which uses geom_mark_ellipse() of ggforce package (Pedersen 2022) to focus on specific groups within a scatter-plot. The Figure 5 shows this.\n\nCodenames_highlight = c(\"Holiday Baking Championship\",\n                    \"Thomas & Friends\")\n\nholep |&gt; \n  filter(parent_primary_title %in% names_series[1:n]) |&gt; \n  ggplot(\n    aes(x = num_votes,\n        y = average_rating,\n        color = parent_primary_title)\n  ) +\n  # Background Highlighting of specific series\n  geom_point(\n    data = (holep |&gt; filter(parent_primary_title %in% names_highlight)),\n    size = 5,\n    color = \"lightgrey\"\n  ) +\n  \n  # Plotting all the points\n  geom_point() +\n  \n \n # Labels and Titles\n  labs(\n    x = \"Number of Votes for the episode on IMDb\",\n    y = \"Average Rating of the Episode\",\n    title = paste0(\"Ratings and Votes for TV Series with most holiday episodes\"),\n    subtitle = paste0(\"Highlighting the TV Series: \", paste0(names_highlight, collapse = \", \"))\n  ) +\n  ggforce::geom_mark_ellipse(\n    data = (holep |&gt; filter(parent_primary_title %in% names_highlight)),\n    aes(label = parent_primary_title,\n        group = parent_primary_title,\n        fill = parent_primary_title),\n    linetype = 2,\n    alpha = 0.2,\n    label.margin = margin(0,0,0,0),\n    con.linetype = 2,\n    label.fill = \"lightgrey\"\n  ) +\n  scale_x_continuous(trans = \"log10\") +\n  scale_color_brewer(palette = \"Set1\") + \n  scale_fill_brewer(palette = \"Set1\") +\n  cowplot::theme_half_open() +\n  theme(\n    axis.title = element_text(hjust = 1),\n    legend.position = \"none\",\n    axis.line = element_line(arrow = arrow(length = unit(3, \"mm\")))\n  )\n\n\n\nFigure 5: Using ellipses to highlight areas of specific groups in a scatterplot"
  },
  {
    "objectID": "Chapter8.html#annotation-across-facets",
    "href": "Chapter8.html#annotation-across-facets",
    "title": "Chapter 8",
    "section": "8.5 Annotation across facets",
    "text": "8.5 Annotation across facets\nSimilarly, using gghighlight package (Yutani 2022), we can annotate different facets in one go, as shown in Figure 6.\n\nCodeholep |&gt; \n  filter(parent_primary_title %in% names_series[1:4]) |&gt; \n  ggplot(\n    aes(x = num_votes,\n        y = average_rating,\n        color = parent_primary_title)\n  ) +\n  \n  # Plotting all the points\n  geom_point(size = 2) +\n  \n  # Faceting by TV Series\n  facet_wrap(~ parent_primary_title) +\n  \n  # gghighlight to annotate\n  gghighlight::gghighlight() +\n \n  # Labels and Titles\n  labs(\n    x = \"Number of Votes for the episode on IMDb\",\n    y = \"Average Rating of the Episode\",\n    title = paste0(\"Ratings and Votes for 4 TV Series with most holiday episodes\"),\n    subtitle = \"Highlighting the TV Series in each panel.\"\n  ) +\n  scale_x_continuous(trans = \"log10\") +\n  scale_color_brewer(palette = \"Set1\") + \n  scale_fill_brewer(palette = \"Set1\") +\n  cowplot::theme_half_open() +\n  theme(\n    axis.title = element_text(hjust = 1),\n    legend.position = \"none\",\n    axis.line = element_line(arrow = arrow(length = unit(3, \"mm\"))),\n    strip.background = element_rect(fill = \"white\")\n  )\n\n\n\nFigure 6: Annotating different facets by using gghighlight"
  },
  {
    "objectID": "Chapter9.html#laying-out-plots-side-by-side",
    "href": "Chapter9.html#laying-out-plots-side-by-side",
    "title": "Chapter 9",
    "section": "9.1 Laying out plots side by side",
    "text": "9.1 Laying out plots side by side\nStarting by defining some basic parameters, colours and annotations for the final plot\n\nCode# Load fonts\nfont_add_google(\"Pragati Narrow\")\nfont_add_google(\"Pacifico\")\nfont_add_google(\"Roboto\")\nshowtext_auto()\nbody_font &lt;- \"Roboto\"              # Font for plot legends, body etc.\ntitle_font &lt;- \"Pacifico\"              # Font for titles, subtitles\ncaption_font &lt;- \"Pragati Narrow\"   # Font for the caption\n\n# Define colours\nmap1_col = c(\"yellow\",             # Colours for Chloropleth g1\n             \"red\")\nmap2_col = c(\"#cdeff7\",          # Colours for Chloropleth g2 \n             \"#1f76f0\")\nts = 45                            # Text Size\nbg_col &lt;- \"white\"                  # Background Colour\ntext_col &lt;- \"black\"                # Colour for the text\ntext_hil &lt;- \"red\"                  # Colour for highlighted text\n  \n# Add text to plot\nplot_title &lt;- \"Diwali Sales: Insights\"\n\nplot_subtitle &lt;- \"#TidyTuesday. Insights about the Diwali sales data.\"\n\nsysfonts::font_add(family = \"Font Awesome 6 Brands\",\n                   regular = here::here(\"docs\", \"Font Awesome 6 Brands-Regular-400.otf\"))\ngithub &lt;- \"&#xf09b\"\ngithub_username &lt;- \"aditya-dahiya\"\nxtwitter &lt;- \"&#xe61b\"\nxtwitter_username &lt;- \"@adityadahiyaias\"\nmastodon &lt;- \"&#xf4f6\"\nmastodon_username &lt;- \"@adityadahiya@mastodon.social\"\nsocial_caption &lt;- glue::glue(\n  \"&lt;span style='font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{github};&lt;/span&gt; &lt;span style='color: #000000'&gt;{github_username}  &lt;/span&gt;\n  &lt;span style='font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{xtwitter};&lt;/span&gt; &lt;span style='color: #000000'&gt;{xtwitter_username}&lt;/span&gt;\"\n)\nplot_caption &lt;- paste0(\"**Data**: kaggle.com&lt;br&gt;\", social_caption)\n\n\nThe first plot g1 (as shown in Figure 1) shows map of India, with number of customers (per million population) from different states in the Data-Set.\n\nCodeg1 &lt;- mapdf |&gt; \n      ggplot(aes(fill = cust_m_pop, \n                 geometry = geometry,\n                 label = state)) +\n      geom_sf() +\n      geom_sf_text(aes(alpha = !is.na(cust_m_pop)),\n                   size = ts/15) +\n      coord_sf() +\n      scale_fill_continuous(low = map1_col[1], \n                            high = map1_col[2],\n                            na.value = bg_col,\n                            trans = \"log10\") +\n      scale_alpha_discrete(range = c(0, 1)) +\n      guides(alpha = \"none\", fill = \"colorbar\") +\n      \n      ggthemes::theme_map() +\n      labs(fill = \"Customer Numbers\\n(per mil. pop.)\",\n           subtitle = \"Customer numbers (per million population)\") +\n      theme(plot.subtitle = element_text(size = ts/3,\n                                      family = body_font,\n                                      hjust = 0.5),\n            legend.text = element_text(size = ts/6,\n                                       family = body_font),\n            legend.title = element_text(size = ts/6,\n                                        family = body_font,\n                                        vjust = 0.5),\n            legend.position = \"right\",\n            legend.background = element_rect(fill = NULL),\n            legend.key.width = unit(2, \"mm\"))\ng1\n\n\n\nFigure 1: Map of India with geom_sf() and geom_sf_text()\n\n\n\nThe second plot g2 (as shown in Figure 2) shows map of India, with average spending per customer in the Diwali Sales dataset from different states.\n\nCodeg2 &lt;- mapdf |&gt; \n      ggplot(aes(fill = purc_cust, \n                 geometry = geometry,\n                 label = state)) +\n      geom_sf() +\n      geom_sf_text(aes(alpha = !is.na(purc_cust)),\n                   size = ts/15) +\n      coord_sf() +\n      scale_fill_continuous(low = map2_col[1], \n                            high = map2_col[2],\n                            na.value = bg_col,\n                            labels = scales::label_comma(prefix = \"Rs.\"),\n                            breaks = c(8000, 10000)) +\n      scale_alpha_discrete(range = c(0, 1)) +\n      guides(alpha = \"none\", fill = \"colorbar\") +\n      \n      ggthemes::theme_map() +\n      labs(fill = \"Average Customer\\nSpending (Rs.)\",\n           subtitle = \"Average customer spending (in Rupees)\") +\n      theme(plot.subtitle = element_text(size = ts/3,\n                                      family = body_font,\n                                      hjust = 0.5),\n            legend.text = element_text(size = ts/6,\n                                       family = body_font),\n            legend.title = element_text(size = ts/6,\n                                        family = body_font,\n                                        vjust = 0.5),\n            legend.position = \"right\",\n            legend.background = element_rect(fill = NULL),\n            legend.key.width = unit(2, \"mm\"))\ng2\n\n\n\nFigure 2: Using geom_sf and geom_sf_text to plot map with average customer spending\n\n\n\nNow, we lay the two plots side by side using patchwork: —\n\nCodeg1 + g2 +\n  plot_layout(guides = \"collect\") &\n  plot_annotation(\n    title = \"Diwali Sales Data\",\n    caption = \"Source: #TidyTuesday, kaggle.com\"\n  ) &\n  theme(\n    plot.title = element_text(hjust = 0.5,\n                              size = ts/2),\n    plot.caption = element_text(hjust = 0.5,\n                                size = ts/5)\n  )\n\n\n\nFigure 3: Using patchwork to combine two plots\n\n\n\nAnother Figure 4 shows the age distribution of customers in the data-set: —\n\nCodeg3 &lt;- diwali |&gt; \n  count(age_group) |&gt; \n  mutate(fill_var = age_group == \"26-35\") |&gt; \n  ggplot(aes(x = n, y = age_group, fill = fill_var)) +\n  geom_col() +\n  labs(subtitle = \"Maximum customers are aged 26-35\",\n       y = \"Customer Age Group\",\n       x = \"Number of customers\") +\n  scale_x_continuous(labels = scales::label_number_si()) +\n  scale_fill_manual(values = c(\"grey\", \"orange\")) +\n  cowplot::theme_minimal_vgrid() +\n  theme(axis.ticks.y = element_blank(),\n        panel.grid = element_line(linetype = 2),\n        axis.line.y = element_blank(),\n        panel.border = element_blank(),\n        plot.subtitle = element_text(hjust = 0.5,\n                                  size = ts/2),\n        axis.text = element_text(size = ts/4),\n        axis.title = element_text(ts/3),\n        legend.position = \"none\")\n\ng3\n\n\n\nFigure 4: Age distribution of the customers in the Diwali Dataset\n\n\n\nAnother Figure 5 shows a heat-map of the products sold category-wise in different states from the data-set: —\n\nCode# Create ordering of groups\nst_vec &lt;- diwali |&gt; \n  count(state, sort = TRUE) |&gt; \n  pull(state) |&gt; \n  rev()\npr_vec &lt;- diwali |&gt; \n  count(product_category, sort = TRUE) |&gt;  \n  pull(product_category)\n  \n  \ng4 &lt;- diwali |&gt; \n  count(state, product_category, wt = orders, sort = TRUE) |&gt; \n  mutate(\n    state = fct(state, levels = st_vec),\n    product_category = fct(product_category, levels = pr_vec)\n  ) |&gt; \n  ggplot(aes(y = state, x = product_category, fill = n)) +\n  geom_tile(col = \"white\") +\n  geom_text(aes(label = n), size = ts/18) +\n  scale_fill_gradient(low = \"white\", \n                      high = \"red\",\n                      na.value = \"white\",\n                      trans = \"log2\",\n                      breaks = c(1, 10, 50, 200, 500)) +\n  labs(x = NULL, y = NULL, \n       fill = \"Number of products sold\",\n       subtitle = \"Certain items are more popular in some states\") +\n  theme_minimal() +\n  theme(panel.grid = element_blank(),\n        axis.text.x = element_text(angle = 90, \n                                   hjust = 1),\n        legend.position = \"right\",\n        legend.title = element_text(angle = 90, \n                                    hjust = 0, \n                                    vjust = 1),\n        axis.text = element_text(size = ts/4),\n        plot.subtitle = element_text(size = ts/4))\ng4\n\n\n\nFigure 5: A heat map using geom_tile() and geom_text()\n\n\n\nCombining the two Figure 4 and Figure 5 using patchwork: —\n\nCodeg3 + g4 +\n  plot_layout(design = \"\n              ABB\n              ABB\") +\n  plot_annotation(\n    title = \"Insights from Diwali Sales Data\",\n    tag_levels = \"I\",\n    tag_prefix = \"Figure \"\n  ) &\n  theme(\n    plot.subtitle = element_text(hjust = 0,\n                                 size = ts/4),\n    plot.title = element_text(hjust = 0.5,\n                              size = ts/1.5),\n    plot.tag.position = \"top\",\n    plot.tag = element_text(face = \"italic\",\n                            size = ts/5)\n  )\n\n\n\nFigure 6: Combining plots using patchwork"
  },
  {
    "objectID": "Chapter9.html#libraries-and-data",
    "href": "Chapter9.html#libraries-and-data",
    "title": "Chapter 9",
    "section": "Libraries and Data",
    "text": "Libraries and Data\n\nlibrary(tidyverse)      # tidy tools data wrangling\nlibrary(ggtext)         # text into ggplot2\nlibrary(sf)             # maps and plotting\nlibrary(here)           # files location and loading\nlibrary(showtext)       # Using Fonts More Easily in R Graphs\nlibrary(ggimage)        # Using images in ggplot2\nlibrary(rvest)          # Get states population data\nlibrary(fontawesome)    # Social Media icons\nlibrary(ggtext)         # Markdown Text in ggplot2\nlibrary(patchwork)      # For combining plots\n\n\nCode# Loading the data\ndiwali &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-11-14/diwali_sales_data.csv') |&gt; \n  janitor::clean_names()\n\nindia_map &lt;- st_read(here(\"data\", \"india_map\", \"India_State_Boundary.shp\")) |&gt; \n  mutate(state = str_to_title(State_Name),\n         .keep = \"unused\")\n\nReading layer `India_State_Boundary' from data source \n  `C:\\Users\\dradi\\Documents\\Post-Harvard Academics\\ggplot2book3e\\data\\india_map\\India_State_Boundary.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 37 features and 1 field\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 7583508 ymin: 753607.8 xmax: 10843390 ymax: 4452638\nProjected CRS: WGS 84 / Pseudo-Mercator\n\nCode# Getting population Data from web scraping\nstate_pop &lt;- rvest::read_html(\"https://www.indiacensus.net/\") |&gt; \n  html_nodes(\"table\")\n\nstate_pop &lt;- state_pop[1] |&gt; \n  html_table() \n\nstate_pop &lt;- state_pop[[1]] |&gt; \n  janitor::clean_names() |&gt; \n  select(2, 4) |&gt; \n  rename(\n    state = state_name,\n    population = estimated_population_in_2023\n  )\n\nstate_pop &lt;- state_pop |&gt; \n  mutate(population = parse_number(population))\n\n# Correct names for some states in india_map\nindia_map &lt;- india_map |&gt; \n  mutate(state = case_when(\n    state == \"Tamilnadu\" ~ \"Tamil Nadu\",\n    state == \"Chhattishgarh\" ~ \"Chhattisgarh\",\n    state == \"Telengana\" ~ \"Telangana\",\n    state == \"Jammu And Kashmir\" ~ \"Jammu & Kashmir\",\n    state == \"Andaman & Nicobar\" ~ \"Andaman & Nicobar Islands\",\n    state == \"Daman And Diu And Dadra And Nagar Haveli\" ~ \"Dadra and Nagar Haveli\",\n    .default = state\n  ))\n\n# Number of customers per capita and Avg. Purchase per customer\ndf1 &lt;- diwali |&gt; \n  count(state, sort = TRUE) |&gt; \n  full_join(state_pop) |&gt; \n  mutate(cust_m_pop = 1000000 * n / population) |&gt; \n  arrange(desc(cust_m_pop)) |&gt;\n  rename(customers = n) |&gt; \n  select(state, customers, cust_m_pop)\n\ndf2 &lt;- diwali |&gt; \n  group_by(state) |&gt; \n  summarise(purchase = sum(amount, na.rm = TRUE)) |&gt; \n  full_join(df1) |&gt; \n  mutate(purc_cust = purchase / customers) |&gt; \n  select(state, cust_m_pop, purc_cust) |&gt; \n  mutate(\n    state = case_when(\n      state == \"Jammu and Kashmir\" ~ \"Jammu & Kashmir\",\n      state == \"Orissa\" ~ \"Odisha\",\n      .default = state)\n  )\n  \n  \nmapdf &lt;- df2 |&gt; \n  full_join(india_map, relationship = \"many-to-many\") |&gt; \n  # Simplifying geometry to drastically reduce plotting time\n  mutate(\n    geometry = st_simplify(geometry, \n                           preserveTopology = FALSE, \n                           dTolerance = 1000)\n  )"
  },
  {
    "objectID": "Chapter9.html#arranging-plots-on-top-of-each-other",
    "href": "Chapter9.html#arranging-plots-on-top-of-each-other",
    "title": "Chapter 9",
    "section": "9.2 Arranging plots on top of each other",
    "text": "9.2 Arranging plots on top of each other\nThe Figure 7 shows the use of inset_element() to depict arranging plots on top of one-another using patchwork.\n\nCodeg3inset &lt;- \n  g3 +\n  labs(subtitle = NULL) + \n  theme(\n    axis.title = element_text(size = ts/5),\n    axis.text = element_text(size = ts/6),\n    plot.background = element_rect(fill = \"white\")\n  )\n\ng1 + \n  theme(\n    legend.position = \"bottom\",\n    legend.key.width = unit(10, \"mm\"),\n    legend.key.height = unit(2, \"mm\")\n  ) +\n  inset_element(\n    g3inset,\n    top = 0.3,\n    bottom = 0,\n    left = 0.5,\n    right = 1\n  )\n\n\n\nFigure 7: A figure with inset horizontal bar plot on bottom-right corner using inset_element()\n\n\n\nAlso, we can use wrap_elements() to wrap arbitrary graphics in a patchwork-compliant patch, as shown in Figure 8 below.\n\nCodelibrary(magick)\n\nimg &lt;- image_read(\"https://static.vecteezy.com/system/resources/previews/010/795/495/non_2x/diwali-lamp-icon-free-vector.jpg\") |&gt; \n  image_resize(\"x200\")\n\n\ng1 + \n  labs(title = \"Diwali Sales Data\",\n       subtitle = \"Customer numbers (per million population)\") +\n  theme(\n    plot.title = element_text(hjust = 0.5, size = ts/1.5),\n    legend.position = \"bottom\",\n    legend.key.width = unit(10, \"mm\"),\n    legend.key.height = unit(2, \"mm\")\n  ) +\n  inset_element(\n    g3inset,\n    top = 0.3,\n    bottom = 0,\n    left = 0.5,\n    right = 1\n  ) +\n  inset_element(\n    p = ggplot() + \n      annotation_raster(raster = img, -Inf, Inf, -Inf, Inf) +\n      theme_void() +\n      coord_fixed(),\n    top = 1,\n    bottom = 0.7,\n    left = 0.6,\n    right = 0.9\n  )\n\n\n\nFigure 8: Using inset_element() to add raster images to patchwork plots"
  },
  {
    "objectID": "Chapter10.html#numeric-position-scales",
    "href": "Chapter10.html#numeric-position-scales",
    "title": "Chapter 10",
    "section": "10.1 Numeric position scales",
    "text": "10.1 Numeric position scales\nThe Figure 1 demonstrates the use of Limits and Zooming-In features in ggplot2.\n\nCodeg1 &lt;- df1 |&gt; \n  ggplot(aes(\n    x = date,\n    y = loc_R\n  )) +\n  geom_point(alpha = 0.05) +\n  geom_smooth(col = \"red\") +\n  labs(\n    y = \"Lines of Code in /R directory of the package\",\n    x = NULL,\n    title = \"Full plot with no axes limits\"\n  ) +\n  scale_y_continuous(labels = scales::label_number_si()) +\n  theme_minimal() +\n  theme(plot.title.position = \"plot\")\n\ng2 &lt;- g1 +\n  scale_y_continuous(labels = scales::label_number_si(accuracy = 1),\n                     limits = c(0, 2000)) +\n  labs(title = \"Viewing packages upto 2K LoC\",\n       y = NULL)\n\ng3 &lt;- g1 +\n  scale_y_continuous(labels = scales::label_number_si(accuracy = 1)) +\n  coord_cartesian(ylim = c(0, 2000)) +\n  labs(title = \"Zooming-in upto 2000 LoC\",\n       y = NULL)\n\n\ng1 + g2 + g3 +\n  plot_annotation(\n    title = \"Scatter plot of Lines of Code in R-Packages over the years\",\n    caption = \"Year of release or the last update of R package\",\n    theme = theme(plot.title = element_text(hjust = 0.5,\n                                            face = \"bold\"),\n                  plot.caption = element_text(hjust = 0.5))\n  )\n\n\n\nFigure 1: Demonstrating use of ylim(), scale_y_*() and coord_cartesian() to manually control limits of a plot\n\n\n\nWe can also demonstrate Visual range expansion in the following example exploring number of R packages updated or released over time on CRAN in Figure 2. We also demonstrate the use of scale_y_continuous(expand = expansion(0)) and scale_x_date(expand = expansion(0)) to remove any extra space between the graph and x-axis labels and y-axis labels.\n\nCodedf1 |&gt; \n  filter(date &lt; as_date(\"2022-11-01\")) |&gt; \n  mutate(year = year(date),\n         month = month(date)) |&gt; \n  group_by(year, month) |&gt; \n  summarize(\n    n = n(),\n    avg_files = mean(files_R, na.rm = TRUE),\n    avg_loc = mean(loc_R, na.rm = TRUE)\n  ) |&gt; \n  mutate(time = make_date(year = year, \n                          month = month)) |&gt; \n  ggplot(aes(x = time, \n             y = n)) + \n  geom_point(pch = 1, alpha = 0.5) +\n  geom_line(linewidth = 1) + \n  labs(title = \"Number of new releases / package updates has risen exponentially\",\n       subtitle = \"Line graph shows new R packages released or updated each month\",\n       x = \"Year\", y = \"Number of packages or updates released\") +\n  scale_y_continuous(expand = expansion(0)) +\n  scale_x_date(expand = expansion(0)) +\n  theme_minimal() +\n  theme(\n    panel.grid.minor = element_blank(),\n    panel.grid.major = element_line(linetype = 2)\n  )\n\n\n\nFigure 2: Number of R packages released / updated each month\n\n\n\nThe best use of expand = expansion(0) comes with heat-maps. Here is an example in Figure 3 demonstrating the number of packages of R updated or released each month of the year, since 1999. We’ve made it interactive using ggiraph to make it more appealing to the user.\n\nCodelibrary(ggiraph)\n\ng1 &lt;- df1 |&gt; \n  mutate(year = year(date),\n         month = month(date, label = TRUE, abbr = FALSE)) |&gt; \n  group_by(year, month) |&gt; \n  summarize(\n    n = n(),\n    avg_files = mean(files_R, na.rm = TRUE),\n    avg_loc = mean(loc_R, na.rm = TRUE)\n  ) |&gt; \n  ungroup() |&gt; \n  mutate(id = row_number()) |&gt; \n  ggplot(\n    aes(x = year, \n        y = month,\n        fill = n)) +\n  geom_tile_interactive(\n    aes(tooltip = paste0(month, \" \", year, \n                         \"\\nPackages released/updated: \", n,\n                         \"\\nAvg. Lines of Code: \", \n                         round(avg_loc, 0)),\n        data_id = id),\n    hover_nearest = FALSE\n  ) +\n  scale_fill_gradient2(low = \"yellow\", \n                       high = \"red\",\n                       trans = \"log10\") +\n  scale_x_continuous(expand = expansion(0)) + \n  scale_y_discrete(expand = expansion(0)) +\n  labs(title = \"R packages updated or released each month over the years\",\n       x = NULL, y = NULL,\n       fill = \"Number of packages\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"bottom\",\n    legend.key.width = unit(15, \"mm\"),\n    panel.grid = element_blank(),\n    plot.title = element_text(hjust = 0.5,\n                              size = 21),\n    axis.text = element_text(size = 15),\n    legend.title = element_text(vjust = 1, \n                                size = 15)\n  )\n\ngirafe(\n  ggobj = g1,\n  options = list(\n    opts_hover(css = \"stroke:black;stroke-width:1px;\")\n  ))\n\n\nFigure 3: An interactive heat-map for number of R package releases or updates each month\n\n\nNow, lets have a look at the average number of Lines of Code in the R packages updated or released each month in an interactive heat-map in Figure 4 . We also can view the trend of average number of lines of code in R packages updated/released over time Figure 5, along with a loess smoother trend-line. In the Figure 5, note the use of coord_cartesian(ylim = c(0, 4000)) to zoom-in on the lower part of y-axis without removing values above 4000 from the plot.\n\nCodelibrary(ggiraph)\n\ndf2 &lt;- df1 |&gt; \n  mutate(year = year(date),\n         month = month(date, label = TRUE, abbr = FALSE)) |&gt; \n  group_by(year, month) |&gt; \n  summarize(\n    n = n(),\n    avg_files = mean(files_R, na.rm = TRUE),\n    avg_loc = mean(loc_R, na.rm = TRUE)\n  ) |&gt; \n  ungroup() |&gt; \n  mutate(id = row_number())\n  \ng2 &lt;- df2 |&gt; \n  ggplot(\n    aes(x = year, \n        y = month,\n        fill = avg_loc)) +\n  geom_tile_interactive(\n    aes(tooltip = paste0(month, \" \", year, \n                         \"\\nPackages updated/released: \", n,\n                         \"\\nAvg. Lines of Code: \", \n                         round(avg_loc, 0)),\n        data_id = id),\n    hover_nearest = FALSE\n  ) +\n  scale_fill_gradient2(low = \"white\", \n                       high = \"blue\",\n                       trans = \"log10\",\n                       na.value = \"white\",\n                       labels = scales::label_number_si()) +\n  scale_x_continuous(expand = expansion(0)) + \n  scale_y_discrete(expand = expansion(0)) +\n  labs(title = \"Average Number of Lines of Code in updated/released R packages\",\n       x = NULL, y = NULL,\n       fill = \"Average number of Lines of Code\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"bottom\",\n    legend.key.width = unit(15, \"mm\"),\n    panel.grid = element_blank(),\n    plot.title = element_text(hjust = 0.5,\n                              size = 15),\n    plot.title.position = \"plot\",\n    axis.text = element_text(size = 12),\n    legend.title = element_text(vjust = 1, \n                                size = 12)\n  )\n\ngirafe(\n  ggobj = g2,\n  options = list(\n    opts_hover(css = \"stroke:black;stroke-width:1px;\")\n  ))\n\n\nFigure 4: An interactive heat-map for average number of Lines of Code in the R packages updated or released during the month\n\n\n\nCodedf2 |&gt; \n  mutate(time = make_date(year = year, \n                          month = month)) |&gt; \n  ggplot(aes(x = time, \n             y = avg_loc)) + \n  geom_smooth(lwd = 1.5,\n              alpha = 0.4,\n              col = \"darkblue\",\n              fill = \"lightblue\") +\n  geom_line() +\n  geom_point(col = \"darkblue\", \n             fill = \"white\",\n             pch = 1) +\n  labs(title = \"Average Lines of Code in R package updates or releases\",\n       subtitle = \"Rose slightly in 2000s, declined slight for next 5 years, and rose significantly during 2018-2022\",\n       x = \"Year\", \n       y = \"Average number of Lines of Code\") +\n  scale_y_continuous(expand = expansion(0),\n                     labels = scales::label_number_si()) +\n  scale_x_date(expand = expansion(0),\n               labels = scales::label_date_short()) +\n  coord_cartesian(ylim = c(0, 4000)) +\n  theme_minimal() +\n  theme(panel.grid = element_line(linetype = 2))\n\n\n\nFigure 5: A line-graph for average number of Lines of Code in the R packages over time\n\n\n\nFinally, the Figure 6 looks at the average number of files in the R package releases/updates over the years, both as a heat map in Figure 6 (a), and as a line graph in Figure 6 (b).\n\nCodeg3 &lt;- df2 |&gt; \n  ggplot(\n    aes(x = year, \n        y = month,\n        fill = avg_files)) +\n  geom_tile_interactive(\n    aes(tooltip = paste0(month, \" \", year, \n                         \"\\nPackages udpated / released: \", n,\n                         \"\\nAvg. Lines of Code: \", \n                         round(avg_loc, 0),\n                         \"\\nAvg. number of Files in Code: \",\n                         avg_files),\n        data_id = id),\n    hover_nearest = FALSE\n  ) +\n  scale_fill_gradient2(low = \"white\", \n                       high = \"darkgreen\",\n                       trans = \"log10\",\n                       na.value = \"white\",\n                       labels = scales::label_number_si()) +\n  scale_x_continuous(expand = expansion(0)) + \n  scale_y_discrete(expand = expansion(0)) +\n  labs(title = \"Average Number of files in /R directory code\",\n       x = NULL, y = NULL,\n       fill = \"Average number of Files\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"bottom\",\n    legend.key.width = unit(15, \"mm\"),\n    panel.grid = element_blank(),\n    plot.title = element_text(hjust = 0.5,\n                              size = 15),\n    plot.title.position = \"plot\",\n    axis.text = element_text(size = 12),\n    legend.title = element_text(vjust = 0.5, \n                                size = 12)\n  )\n\ngirafe(\n  ggobj = g3,\n  options = list(\n    opts_hover(css = \"stroke:black;stroke-width:1px;\")\n  ))\ndf2 |&gt; \n  mutate(time = make_date(year = year, \n                          month = month)) |&gt; \n  ggplot(aes(x = time, \n             y = avg_files)) + \n  geom_line(col = \"darkgrey\") +\n  geom_smooth(lwd = 1.5,\n              alpha = 0.6,\n              col = \"darkgreen\",\n              fill = \"#c5fcd1\") +\n  geom_point(col = \"black\", \n             fill = \"white\",\n             pch = 1) +\n  labs(title = \"Average number of files in /R directory of R packages\",\n       subtitle = \"Rose in early 2000s, plateaued till 2018, and then rose again\",\n       x = \"Year\", \n       y = \"Average Number of files during that month\") +\n  scale_y_continuous(expand = expansion(0),\n                     labels = scales::label_number_si()) +\n  scale_x_date(expand = expansion(0),\n               labels = scales::label_date_short()) +\n  theme_minimal() +\n  theme(\n    panel.grid.minor = element_blank(),\n    panel.grid.major = element_line(linetype = 2)\n  )\n\n\n\n\n(a) An interactive heat-map for average number of files in the /R directory of the R packages updated or released during the month\n\n\n\n\n\n\n(b) A line-graph for average number of files in the /R directory of the updated or newly released R packages over time\n\n\n\nFigure 6: Using heatmap and line graph to look at Average number of file in the /R directory of the updated / released R packages\n\n\n\nNow, let us explore the kind of licenses used by R package updates or releases over the years. The Figure 7 shows the share of different licenses in an interactive stacked bar chart, while Figure 8 shows different characteristics of packages with these licenses: —\n\nCodelibrary(ggiraph)\n\ng4 &lt;- rpkgstats |&gt; \n  mutate(license = as_factor(license)) |&gt; \n  mutate(license = fct_lump_n(license, n = 6)) |&gt; \n  mutate(year = year(date),\n         month = month(date)) |&gt; \n  group_by(year, license) |&gt; \n  count() |&gt; \n  group_by(year) |&gt; \n  mutate(prop = n / sum(n),\n         yeartotal = sum(n)) |&gt; \n  ungroup() |&gt; \n  mutate(id = row_number()) |&gt; \n  ggplot(aes(x = year,\n             y = prop,\n             fill = license)) +\n  geom_col_interactive(aes(\n    tooltip = paste0(\"Year: \", year,\n                     \"\\nTotal Number of packages: \", yeartotal,\n                     \"\\nPackages with \", license, \" License: \", n,\n                     \"\\nPercentage of total: \", round(prop*100, 2), \" %\"),\n    \n    data_id = id\n    ),\n    position = \"stack\") +\n  scale_y_continuous(expand = expansion(0),\n                     labels = scales::label_percent()) +\n  scale_x_continuous(expand = expansion(0),\n                     breaks = seq(1998, 2022, 4)) +\n  scale_fill_brewer_interactive(palette = \"Set2\") +\n  labs(y = \"% Packages with a particular license\",\n       x = \"Year\",\n       fill = \"License\",\n       title = \"Share of license types in R packages over time\",\n       subtitle = \"Recently, MIT+ and GPL-3 licenses have become popular\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"bottom\",\n    axis.line.x = element_line_interactive(),\n    legend.text = element_text(hjust = 0),\n    panel.grid = element_blank()\n  )\n\ngirafe(\n  ggobj = g4,\n  options = list(\n    opts_hover(css = \"fill:darkgrey;stroke:black;stroke-width:0.5px;\"))\n  )\n\n\nFigure 7: Exploring the licenses of R package updates and releases\n\n\n\nCodestrip_text = c(\n  \"Average Data Size\",\n  \"Average Lines of Code\",\n  \"Average No. of vignettes\",\n  \"Number of packages\"\n)\n\nnames(strip_text) &lt;- c(\n  \"avg_dt_size\",\n  \"avg_loc\",\n  \"avg_vignettes\",\n  \"n\"\n)\n\nrpkgstats |&gt; \n  mutate(license = as_factor(license)) |&gt; \n  mutate(license = fct_lump_n(license, n = 6)) |&gt; \n  mutate(year = year(date),\n         month = month(date)) |&gt; \n  group_by(license) |&gt; \n  summarise(\n    avg_loc = mean(loc_R, na.rm = TRUE),\n    avg_vignettes = mean(num_vignettes, na.rm = TRUE),\n    avg_dt_size = mean(data_size_total, na.rm = TRUE),\n    n = n()\n  ) |&gt; \n  arrange(license) |&gt; \n  mutate(id = row_number()) |&gt; \n  mutate(license = fct_reorder(license, -id)) |&gt; \n  select(-id) |&gt; \n  pivot_longer(cols = -license,\n               names_to = \"indicator\",\n               values_to = \"value\") |&gt; \n  mutate(col_var = case_when(\n    license == \"GPL (&gt;= 2)\" ~ \"a\",\n    license == \"MIT + file LICENSE\" ~ \"b\",\n    .default = \"c\"\n  )) |&gt; \n  ggplot(aes(x = value, \n             y = license,\n             fill = col_var)) +\n  geom_col() +\n  facet_wrap(~indicator, \n             scales = \"free_x\", \n             nrow = 1,\n             labeller = as_labeller(strip_text)) + \n  labs(x = NULL, y = NULL, \n       title = \"Characteristics of R packages released under different licenses\",\n       subtitle = \"GPL&gt;=2 packages have longest code and data size, while MIT+ packages have most vignettes\") +\n  scale_x_continuous(labels = scales::label_number_si(),\n                     expand = expansion(0)) +\n  scale_fill_manual(values = c(\"orange\", \"blue\", \"lightgrey\")) +\n  cowplot::theme_minimal_hgrid() +\n  theme(\n    axis.text.x = element_text(angle = 90),\n    legend.position = \"none\",\n    plot.title.position = \"plot\",\n    panel.grid.major.y = element_line(linetype = 2)\n  )\n\n\n\nFigure 8: Faceted plot on average characteristics of packages with difference licenses\n\n\n\nIn the section 10.1.4 Breaks, we use the same data to modify the breaks in an axis. Instead of the stacked bar-plot we made above, we can also make a stream graph using ggstream (Sjoberg 2021) to make the graph more visually appealing, while changing the breaks on x-axis etc. As shown in the stream graph in Figure 9, it gives a better overall view: —\n\nCodelibrary(fontawesome)\nlibrary(showtext)\nlibrary(ggtext)\n\n# Load fonts\nfont_add_google(\"Nova Mono\", \n                family = \"title_font\")       # Font for titles\nfont_add_google(\"Saira Extra Condensed\", \n                family = \"caption_font\")     # Font for the caption\nfont_add_google(\"JetBrains Mono\", \n                family = \"body_font\")        # Font for plot text\nshowtext_auto()\n\ntext_col = \"#01737d\"\n# Caption stuff\nsysfonts::font_add(family = \"Font Awesome 6 Brands\",\n                   regular = here::here(\"docs\", \"Font Awesome 6 Brands-Regular-400.otf\"))\ngithub &lt;- \"&#xf09b\"\ngithub_username &lt;- \"aditya-dahiya\"\nxtwitter &lt;- \"&#xe61b\"\nxtwitter_username &lt;- \"@adityadahiyaias\"\nlinkedin &lt;- \"&#xf08c\"\nlinkedin_username &lt;- \"dr-aditya-dahiya-ias\"\nsocial_caption &lt;- glue::glue(\"&lt;span style='font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{github};&lt;/span&gt; &lt;span style='color: {text_col}'&gt;{github_username}  &lt;/span&gt; &lt;span style='font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{xtwitter};&lt;/span&gt; &lt;span style='color: {text_col}'&gt;{xtwitter_username}&lt;/span&gt; &lt;span style='font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{linkedin};&lt;/span&gt; &lt;span style='color: {text_col}'&gt;{linkedin_username}&lt;/span&gt;\")\n\nplot_caption &lt;- paste0(\"**Data:** Mark Padgham and Noam Ross  |  \", \"**Graphics:** \", social_caption)\n\n\nrpkgstats |&gt; \n  mutate(license = as_factor(license)) |&gt; \n  mutate(license = fct_lump_n(license, n = 6)) |&gt; \n  mutate(year = year(date),\n         month = month(date)) |&gt; \n  group_by(year, license) |&gt; \n  count() |&gt; \n  group_by(year) |&gt; \n  mutate(prop = n / sum(n),\n         yeartotal = sum(n)) |&gt; \n  ungroup() |&gt; \n  mutate(id = row_number()) |&gt; \n  ggplot(\n    aes(\n      x = year,\n      y = n,\n      fill = license,\n      label = license\n    )\n  ) +\n  geom_stream(bw = 0.85,\n              sorting = \"onset\",\n              color = \"#3d3d3d\") +\n  geom_stream_label(aes(color = license),\n                    hjust = \"inward\",\n                    size = 9) +\n  labs(\n    x = NULL, y = NULL,\n    title = \"Share of different licenses in R Packages\",\n    subtitle = \"'MIT + file License' is an increasingly preferred choice in recent years\",\n    caption = plot_caption\n  ) +\n  scale_x_continuous(expand = expansion(0),\n                     breaks = breaks_width(width = 4)) +\n  scale_y_log10() +\n  scale_fill_manual(values = paletteer_d(\"nord::afternoon_prarie\") |&gt; \n                      colorspace::lighten(0.3)) +\n  scale_color_manual(values = paletteer_d(\"nord::afternoon_prarie\") |&gt; \n                       colorspace::darken(0.6)) +\n  cowplot::theme_minimal_vgrid() +\n  theme(\n    legend.position = \"none\",\n    panel.grid.major.x = element_line(linetype = 2),\n    axis.line.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.text.y = element_blank(),\n    plot.title = element_text(family = \"title_font\",\n                              size = 48,\n                              face = \"bold\",\n                              colour = text_col,\n                              hjust = 0.5),\n    plot.subtitle = element_text(family = \"body_font\",\n                                 colour = text_col,\n                                 hjust = 0.5,\n                                 size = 24),\n    plot.caption = element_textbox(family = \"caption_font\",\n                                   colour = text_col,\n                                   hjust = 0.5,\n                                   size = 15),\n    axis.text.x = element_text(size = 18, color = text_col)\n  )\n\n\n\nFigure 9: Visualizing the change in dominance of different licenses over time with a stream graph. Using customized breaks in the x-axis for the graph.\n\n\n\nTo demonstrate transformations of scales (Section 10.1.7), we create a log10 scale on the x-axis in an animated histogram depicting the distribution of the Lines of Code in R packages over the years using {scales} (Wickham and Seidel 2022) and {gganimate} (Pedersen and Robinson 2022), as depicted below: —\n\nCodelibrary(fontawesome)\nlibrary(showtext)\nlibrary(ggtext)\n\n# Load fonts\nfont_add_google(\"Nova Mono\", \n                family = \"title_font\")       # Font for titles\nfont_add_google(\"Saira Extra Condensed\", \n                family = \"caption_font\")     # Font for the caption\nfont_add_google(\"JetBrains Mono\", \n                family = \"body_font\")        # Font for plot text\nshowtext_auto()\n\nplot_caption &lt;- \"Data: Mark Padgham and Noam Ross   |   Graphics: Aditya Dahiya\"\n\n\n# Defining minor breaks for the x-axis\nmb &lt;- unique(\n  as.numeric(\n    (1:10) %o% 10 ^ (0:5)  \n  )  \n)\n\ndf3 &lt;- rpkgstats |&gt; \n  mutate(year = year(date)) |&gt;\n  select(package, year, loc_R) |&gt; \n  filter(loc_R != 0 & !is.na(loc_R))\n  \n\nfill_palette &lt;- paletteer_d(\"khroma::smoothrainbow\")[22:34]\ncol_palette &lt;- fill_palette |&gt; colorspace::darken(0.4)\n\nanim &lt;- df3 |&gt;\n  filter(year &gt; 2010) |&gt; \n  ggplot(aes(loc_R, \n             fill = factor(year),\n             col = factor(year),\n             frame = year)) +\n  geom_density(alpha = 0.4) +\n  scale_x_log10(\n    minor_breaks = mb,\n    expand = expansion(c(0, 0.005)),\n    labels = label_number_si(),\n    breaks = (10^(1:4)),\n    limits = c(10, 10^4)) +\n  scale_y_continuous(expand = expansion()) +\n  scale_fill_manual(values = fill_palette) +\n  scale_color_manual(values = fill_palette) +\n  labs(\n    x = \"Lines of Code in the R Package (Log scale)\",\n    y = NULL,\n    title = \"R packages released/updated in {as.integer(frame_time)}\",\n    caption = plot_caption) +\n  theme_minimal() +\n  theme(\n    panel.grid.minor.y = element_blank(),\n    panel.grid.major.y = element_line(linetype = 2),\n    panel.grid.major.x = element_line(colour = \"#ebebeb\"),\n    panel.grid.minor.x = element_line(colour = \"#ebebeb\"),\n    plot.title = element_text(family = \"title_font\",\n                              size = 36,\n                              hjust = 0.5,\n                              color = col_palette[11]),\n    axis.text = element_text(family = \"body_font\"),\n    axis.title = element_text(family = \"body_font\", \n                              size = 15),\n    legend.position = \"none\",\n    plot.caption = element_text(\n      family = \"caption_font\",\n      hjust = 0.5 ,\n      margin = margin(12, 0, 5, 0),\n      size = 15,\n      colour = col_palette[11])\n  )\n\nanim\n\n# Final animation to render\nanimate(\n  plot = anim + \n    transition_time(year) +\n    shadow_mark(alpha = alpha/4) +\n    ease_aes(\"linear\") +\n    enter_fade() + \n    exit_fade(),\n  fps = 20,\n  duration = 12,\n  end_pause = 40,\n  height = 800,\n  width = 1000\n  )\n\n# anim_save(filename = here::here(\"docs\", \"anim_rpkgs.gif\"))"
  },
  {
    "objectID": "Chapter10.html#libraries-and-data",
    "href": "Chapter10.html#libraries-and-data",
    "title": "Chapter 10",
    "section": "Libraries and Data",
    "text": "Libraries and Data\n\nCodelibrary(tidyverse)     # Data wrangling and plotting\nlibrary(ggthemes)      # ggplot2 themes\nlibrary(patchwork)     # Composing multiple plots\nlibrary(ggiraph)       # Interactive ggplot2 graphs\nlibrary(ggstream)      # Stream graphs in R\nlibrary(paletteer)     # Huge color palettes aggregator\nlibrary(scales)        # Scales for plots\nlibrary(gganimate)     # Animations\n\n\n# Loading Data\nurl &lt;- 'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-12-26/cran_20221122.csv'\nrpkgstats &lt;- readr::read_csv(url)\n\n# Focussing on number of lines of code (LOC) and files in R directory of packages\ndf1 &lt;- rpkgstats |&gt; \n  select(package, version, date, files_R, loc_R)"
  },
  {
    "objectID": "Chapter1.html#ggstream",
    "href": "Chapter1.html#ggstream",
    "title": "Chapter 1",
    "section": "ggstream",
    "text": "ggstream\nggstream (Sjoberg 2021) is a tool designed to provide a straightforward yet robust implementation of streamplots or stream-graphs. Streamplots, essentially stacked area plots, are commonly employed for visualizing time series data. The package introduces a key function, geom_stream(). We can input our data and employ this function to create a fundamental stream graph. The default behavior of geom_stream() utilizes the “mirror” type, arranging streams symmetrically around the X-axis. Alternative options include “ridge,” stacking from the X-axis, and “proportional,” where streams sum up to 1. An example of the versatility of ggstream is shown in Figure 12 .\n\nCodelibrary(fontawesome)\nlibrary(showtext)\nlibrary(ggtext)\n\n# Load fonts\nfont_add_google(\"Nova Mono\", \n                family = \"title_font\")       # Font for titles\nfont_add_google(\"Saira Extra Condensed\", \n                family = \"caption_font\")     # Font for the caption\nfont_add_google(\"JetBrains Mono\", \n                family = \"body_font\")        # Font for plot text\nshowtext_auto()\n\ntext_col = \"#01737d\"\n# Caption stuff\nsysfonts::font_add(family = \"Font Awesome 6 Brands\",\n                   regular = here::here(\"docs\", \"Font Awesome 6 Brands-Regular-400.otf\"))\ngithub &lt;- \"&#xf09b\"\ngithub_username &lt;- \"aditya-dahiya\"\nxtwitter &lt;- \"&#xe61b\"\nxtwitter_username &lt;- \"@adityadahiyaias\"\nlinkedin &lt;- \"&#xf08c\"\nlinkedin_username &lt;- \"dr-aditya-dahiya-ias\"\nsocial_caption &lt;- glue::glue(\"&lt;span style='font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{github};&lt;/span&gt; &lt;span style='color: {text_col}'&gt;{github_username}  &lt;/span&gt; &lt;span style='font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{xtwitter};&lt;/span&gt; &lt;span style='color: {text_col}'&gt;{xtwitter_username}&lt;/span&gt; &lt;span style='font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{linkedin};&lt;/span&gt; &lt;span style='color: {text_col}'&gt;{linkedin_username}&lt;/span&gt;\")\n\nplot_caption &lt;- paste0(\"**Data:** Mark Padgham and Noam Ross  |  \", \"**Graphics:** \", social_caption)\n\n\nrpkgstats |&gt; \n  mutate(license = as_factor(license)) |&gt; \n  mutate(license = fct_lump_n(license, n = 6)) |&gt; \n  mutate(year = year(date),\n         month = month(date)) |&gt; \n  group_by(year, license) |&gt; \n  count() |&gt; \n  group_by(year) |&gt; \n  mutate(prop = n / sum(n),\n         yeartotal = sum(n)) |&gt; \n  ungroup() |&gt; \n  mutate(id = row_number()) |&gt; \n  ggplot(\n    aes(\n      x = year,\n      y = n,\n      fill = license,\n      label = license\n    )\n  ) +\n  geom_stream(bw = 0.85,\n              sorting = \"onset\",\n              color = \"#3d3d3d\") +\n  geom_stream_label(aes(color = license),\n                    hjust = \"inward\",\n                    size = 9) +\n  labs(\n    x = NULL, y = NULL,\n    title = \"Share of different licenses in R Packages\",\n    subtitle = \"'MIT + file License' is an increasingly preferred choice in recent years\",\n    caption = plot_caption\n  ) +\n  scale_x_continuous(expand = expansion(0),\n                     breaks = breaks_width(width = 4)) +\n  scale_y_log10() +\n  scale_fill_manual(values = paletteer_d(\"nord::afternoon_prarie\") |&gt; \n                      colorspace::lighten(0.3)) +\n  scale_color_manual(values = paletteer_d(\"nord::afternoon_prarie\") |&gt; \n                       colorspace::darken(0.6)) +\n  cowplot::theme_minimal_vgrid() +\n  theme(\n    legend.position = \"none\",\n    panel.grid.major.x = element_line(linetype = 2),\n    axis.line.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.text.y = element_blank(),\n    plot.title = element_text(family = \"title_font\",\n                              size = 48,\n                              face = \"bold\",\n                              colour = text_col,\n                              hjust = 0.5),\n    plot.subtitle = element_text(family = \"body_font\",\n                                 colour = text_col,\n                                 hjust = 0.5,\n                                 size = 24),\n    plot.caption = element_textbox(family = \"caption_font\",\n                                   colour = text_col,\n                                   hjust = 0.5,\n                                   size = 15),\n    axis.text.x = element_text(size = 18, color = text_col)\n  )\n\n\n\n\nFigure 12: A stream-plot of licenses used by R packages released or updated over the years"
  },
  {
    "objectID": "Chapter10.html#date-time-position-scales",
    "href": "Chapter10.html#date-time-position-scales",
    "title": "Chapter 10",
    "section": "10.2 Date-time position scales",
    "text": "10.2 Date-time position scales\nThe Figure 10 below demonstrates the use of Breaks (Section 10.2.1), Minor Breaks (Section 10.2.2) and custom labels (Section 10.2.3) taught in the book for date scales in ggplot2.\n\nCodelibrary(fontawesome)    # Social Media icons\nlibrary(ggtext)         # Markdown Text in ggplot2\nlibrary(showtext)\n\n# Load fonts\nfont_add_google(\"Nova Mono\", \n                family = \"title_font\")       # Font for titles\nfont_add_google(\"Saira Extra Condensed\", \n                family = \"caption_font\")     # Font for the caption\nfont_add_google(\"JetBrains Mono\", \n                family = \"body_font\")        # Font for plot text\nshowtext_auto()\n\n# Palettes and Colours\n\nfill_palette &lt;- paletteer::paletteer_d(\"MetBrewer::Hiroshige\") |&gt; \n  colorspace::lighten(0.5)\ncol_palette &lt;- fill_palette |&gt; \n  colorspace::darken(0.8)\ntext_col = col_palette[10]\n\n# Caption stuff\nsysfonts::font_add(family = \"Font Awesome 6 Brands\",\n                   regular = here::here(\"docs\", \"Font Awesome 6 Brands-Regular-400.otf\"))\ngithub &lt;- \"&#xf09b\"\ngithub_username &lt;- \"aditya-dahiya\"\nxtwitter &lt;- \"&#xe61b\"\nxtwitter_username &lt;- \"@adityadahiyaias\"\nlinkedin &lt;- \"&#xf08c\"\nlinkedin_username &lt;- \"dr-aditya-dahiya-ias\"\nsocial_caption &lt;- glue::glue(\"&lt;span style='font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{github};&lt;/span&gt; &lt;span style='color: {text_col}'&gt;{github_username}  &lt;/span&gt; &lt;span style='font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{xtwitter};&lt;/span&gt; &lt;span style='color: {text_col}'&gt;{xtwitter_username}&lt;/span&gt; &lt;span style='font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{linkedin};&lt;/span&gt; &lt;span style='color: {text_col}'&gt;{linkedin_username}&lt;/span&gt;\")\n\nplot_caption &lt;- paste0(\"**Data:** Mark Padgham and Noam Ross  |  \", \"**Graphics:** \", social_caption)\n\n# Number of n top packages to study\nn = 10\n\nt_p &lt;- c(\"ggplot2\", \"tibble\", \"tidyr\", \n         \"readr\", \"dplyr\", \"stringr\", \n         \"purrr\", \"forcats\")\n\n\n# Finding the top n packages\ntop_pkgs &lt;- rpkgstats |&gt; \n  select(imports) |&gt; \n  separate_longer_delim(cols = imports,\n                        delim = \", \") |&gt; \n  drop_na() |&gt; \n  count(imports, sort = TRUE) |&gt; \n  pull(imports)\ntop_pkgs &lt;- top_pkgs[1:n]\n\n# Plot\ng &lt;- rpkgstats |&gt; \n  select(date, imports) |&gt; \n  separate_longer_delim(cols = imports,\n                        delim = \", \") |&gt; \n  drop_na() |&gt; \n  filter(imports %in% top_pkgs) |&gt; \n  mutate(\n    date = floor_date(date, unit = \"year\"),\n    imports = case_when(\n      imports %in% t_p ~ \"tidyverse\",\n      .default = imports\n    )\n  ) |&gt;\n  group_by(date) |&gt; \n  count(imports) |&gt; \n  mutate(prop = n / sum(n)) |&gt; \n  ggplot(aes(\n    x = date,\n    y = prop,\n    fill = imports,\n    label = imports,\n    color = imports\n  )) +\n  geom_stream(\n    type = \"proportional\"\n    ) +\n  geom_stream_label(\n    type = \"proportional\",\n    family = \"body_font\",\n    size = unit(20, \"mm\"),\n    hjust = \"inward\"\n    ) +\n  labs(\n    x = NULL,\n    y = \"% imports (amongst top packages)\",\n    title = \"Top R packages used as imports\",\n    subtitle = \"The core tidyverse packages have become increasingly popular as imports for other R packages!\",\n    caption = plot_caption\n  ) +\n  scale_x_datetime(expand = expansion(),\n                   date_breaks = \"2 years\",\n                   date_labels = \"%Y\") +\n  scale_y_continuous(expand = expansion(0),\n                     labels = label_percent()) +\n  scale_fill_manual(values = fill_palette) +\n  scale_color_manual(values = col_palette) +\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    legend.position = \"none\",\n    panel.grid.major.x = element_line(linetype = 2),\n    axis.ticks.y = element_blank(),\n    plot.title = element_text(family = \"title_font\",\n                              size = unit(120, \"mm\"),\n                              face = \"bold\",\n                              colour = text_col,\n                              hjust = 0.5),\n    plot.subtitle = element_text(family = \"caption_font\",\n                                 colour = text_col,\n                                 hjust = 0.5,\n                                 size = unit(70, \"mm\")),\n    plot.caption = element_textbox(family = \"caption_font\",\n                                   colour = text_col,\n                                   hjust = 0.5,\n                                   size = unit(30, \"mm\")),\n    axis.text = element_text(family = \"body_font\",\n                             size = unit(40, \"mm\"), \n                             color = text_col),\n    axis.title = element_text(family = \"body_font\",\n                             size = unit(50, \"mm\"), \n                             color = text_col,\n                             hjust = 0.5,\n                             margin = margin(0,0,0,0)),\n    plot.background = element_rect(fill = \"white\", colour = \"white\"),\n    plot.title.position = \"plot\"\n  )\nggsave(\n    filename = here::here(\"docs\", \"rpkg_imports.png\"),\n    plot = g,\n    height = unit(10, \"cm\"),\n    width = unit(10, \"cm\")\n  )\n\n\n\n\nFigure 10: A proportional stream-plot showing the percentage of imports (amongst top packages) which belong to a particular R package."
  },
  {
    "objectID": "Chapter10.html#footnotes",
    "href": "Chapter10.html#footnotes",
    "title": "Chapter 10",
    "section": "Footnotes",
    "text": "Footnotes\n\nClarke, Joe; Lim, Ahyoung; Gupte, Pratik R.; Pigott, David M.; van Panhuis, Wilbert G; Brady, Oliver (2023). OpenDengue: data from the OpenDengue database. Version [1.2]. figshare. Dataset. https://doi.org/10.6084/m9.figshare.24259573.v3↩︎"
  },
  {
    "objectID": "Chapter11.html#some-packages-for-colour-palettes-in-r",
    "href": "Chapter11.html#some-packages-for-colour-palettes-in-r",
    "title": "Chapter 11",
    "section": "Some Packages for colour palettes in R\n",
    "text": "Some Packages for colour palettes in R\n\n\n\nRColorBrewer:\n\nThis package sources color palettes from ColorBrewer, delivering a diverse range of qualitative, sequential, and diverging color schemes for ggplot.\n\n\n\nviridis:\n\nDesigned for both colorblind individuals and black-and-white printing, viridis provides perceptually uniform color maps that enhance data visualization.\n\n\n\nviridisLite:\n\nA streamlined version of viridis, viridisLite offers the same high-quality color maps with reduced dependencies for efficient use in ggplot.\n\n\n\nwesanderson:\n\nInspired by Wes Anderson films, this package provides a unique and aesthetically pleasing set of color palettes, adding a distinctive touch to ggplot visuals.\n\n\n\nggsci:\n\nDrawing inspiration from scientific journals like Nature and Science, ggsci offers color palettes that lend a professional and research-oriented look to ggplot visualizations.\n\n\n\nnord:\n\nInspired by the Nord color scheme, this package delivers modern and elegant color palettes for ggplot, adding a contemporary feel to data visualizations.\n\n\n\niWantHue:\n\nEnabling users to generate and explore color palettes based on criteria such as color count and harmony, iWantHue provides flexibility and customization for ggplot visuals.\n\n\n\ncolorspace:\n\nBased on the HCL (Hue-Chroma-Luminance) color space, colorspace offers perceptually uniform and visually appealing color palettes for ggplot, enhancing the aesthetic quality of visualizations.\n\n\n\ndichromat:\n\nSpecifically catering to individuals with color vision deficiencies, dichromat provides color palettes that prioritize accessibility for improved data visualization experiences in ggplot.\n\n\n\nggthemes:\n\nInspired by popular data visualization libraries and software like Excel, Tableau, and Stata, ggthemes offers a variety of color palettes and themes to diversify ggplot visuals."
  },
  {
    "objectID": "Chapter14.html#theory-of-scales-and-guides",
    "href": "Chapter14.html#theory-of-scales-and-guides",
    "title": "Chapter 14",
    "section": "14.1 Theory of scales and guides",
    "text": "14.1 Theory of scales and guides\nScale specification, naming scheme and fundamental scale types are shown in Figure 2.\n\nCodeg &lt;- tb |&gt; \n  ggplot(\n    aes(\n      x = v_continuous,\n      y = v_random_number,\n      colour = v_discrete\n    )\n  ) +\n  geom_point(size = 4) +\n  paletteer::scale_color_paletteer_d(\n    \"palettetown::croconaw\"\n  ) +\n  labs(\n    subtitle = \"ggplot2 automatically assigns scale_*_continuous() to X and Y axis in this plot.\\nThe colour scale becomes scale_colour_discrete()\"\n  ) +\n  theme_cowplot() +\n  theme(\n    legend.position = \"bottom\"\n  )\ng\n\n\n\n\n\n\nFigure 2: The demonstration of Scale specification, naming scheme and fundamental scale types in ggplot2",
    "crumbs": [
      "Home",
      "The Grammer",
      "Chapter 14"
    ]
  },
  {
    "objectID": "Chapter14.html#scale-names",
    "href": "Chapter14.html#scale-names",
    "title": "Chapter 14",
    "section": "14.2 Scale names",
    "text": "14.2 Scale names\nThe scales can be easily names, wither in the main scale_*_*() function using the argument name = \"...\" , or, more easily using the labs() helper function as shown below in Figure 3\n\nCodeg +\n  labs(\n    title = \"A nice graph with a title\",\n    x = \"A continuous variable from 1 to 10\",\n    y = \"A number (1 to 100)\",\n    colour = \"A discrete variable\",\n    subtitle = \"The labs() function helps to easily add titles, subtites, legend titles and axes titles.\"\n  )\n\n\n\n\n\n\nFigure 3: Using labs() helper function to add a title to legends and axis",
    "crumbs": [
      "Home",
      "The Grammer",
      "Chapter 14"
    ]
  },
  {
    "objectID": "Chapter14.html#scale-breaks",
    "href": "Chapter14.html#scale-breaks",
    "title": "Chapter 14",
    "section": "14.3 Scale breaks",
    "text": "14.3 Scale breaks\nThe breaks = argument to the scale_*_*() functions is useful in determining the axis-ticks and lines or the colour levels in the legend to be displayed, as shown below in Figure 4\n\nCodeg1 &lt;- tb |&gt; \n  ggplot(aes(x = v_continuous,\n             y = v_expo,\n             colour = v_discrete)) + \n  geom_point(\n    size = 6\n    ) +\n  scale_x_continuous(\n    breaks = seq(0, 10, 2),\n    name = \"Breaks at even numbers\"\n  ) +\n  scale_y_continuous(\n    name = \"Exponentially increasing numbers\\nBreaks at interval of 2000\",\n    breaks = seq(0, 10000, 2000)\n  ) +\n  labs(\n    title = \"Using breaks argument in scale_*_* functions\",\n    subtitle = \"This plot shows customized breaks at interval of 2 on x-axis and 1000 on y-axis\"\n  ) +\n  theme_cowplot() +\n  theme(legend.position = \"none\")\ng1\n\n\n\n\n\n\nFigure 4: Using breaks argument in scale_*_* functions to show customized intervals of 2 on x-axis, and, 1000 on y-axis",
    "crumbs": [
      "Home",
      "The Grammer",
      "Chapter 14"
    ]
  },
  {
    "objectID": "Chapter14.html#scale-limits",
    "href": "Chapter14.html#scale-limits",
    "title": "Chapter 14",
    "section": "14.4 Scale limits",
    "text": "14.4 Scale limits\nThe Figure 5 shows an example of setting scale limits using the limit = argument in scale_*_*() functions in ggplot2. In this example, Y-axis limited upto 8000; and colour scale limtied to levels between a to h only.\n\nCodeg2 &lt;- g1 +\n  scale_y_continuous(\n    limits = c(0, 8000),\n    name = \"Limits from 0 to 8000\"\n  ) +\n  scale_colour_discrete(\n    limits = letters[1:8],\n    na.value = \"lightgrey\",\n    name = \"Limited to characters between a to h\"\n  ) +\n  labs(\n    title = \"Setting scale limits\",\n    subtitle = \"Y-axis limited upto 8000; and colour scale limtied to a - h only\"\n  ) +\n  theme(legend.position = \"bottom\")\ng2\n\n\n\n\n\n\nFigure 5: Setting scale limits using limit argument in scale_*_* functions: Y-axis limited upto 8000; and colour scale limtied to some levels only\n\n\n\n\nFurther, with the oob = argument we can control the behavior of out-of-bounds data, as shown in Figure 6 below to squish to data onto the nearest limits.\n\nCodeg2 +\n  scale_y_continuous(\n    limits = c(0, 8000),\n    name = \"Limits from 0 to 8000; with squish oob\",\n    oob = squish\n  ) +\n  labs(\n    subtitle = \"Y-axis limited upto 8000, but with out of bounds value squished to 8000\"\n  )\n\n\n\n\n\n\nFigure 6: Using oob argument to limit Y-axis up-to 8000, but with out of bounds value squished to 8000",
    "crumbs": [
      "Home",
      "The Grammer",
      "Chapter 14"
    ]
  },
  {
    "objectID": "Chapter14.html#scale-guides",
    "href": "Chapter14.html#scale-guides",
    "title": "Chapter 14",
    "section": "14.5 Scale guides",
    "text": "14.5 Scale guides\nTo demonstrate the use of guides() function, we customize the colour legend from Figure 4 to generate a customized legend in Figure 7\n\nCodeg4 &lt;- g1 +\n  theme(legend.position = \"bottom\") +\n  labs(\n    title = \"Customized Legend\", \n    colour = \"Using guide_legend() to customize legend\") +\n  guides(\n    colour = guide_legend(\n      direction = \"vertical\",\n      reverse = TRUE,\n      nrow = 2,\n      override.aes = list(\n        size = 4\n      ),\n      theme = theme(\n        legend.text = element_text(\n          face = \"bold\"\n        )\n      )\n    )\n  )\ng4\n\n\n\n\n\n\nFigure 7: Using guides() with guide_legend() to customize legend",
    "crumbs": [
      "Home",
      "The Grammer",
      "Chapter 14"
    ]
  },
  {
    "objectID": "Chapter14.html#scale-transformation",
    "href": "Chapter14.html#scale-transformation",
    "title": "Chapter 14",
    "section": "14.6 Scale transformation",
    "text": "14.6 Scale transformation\nThe continuous scales in Figure 7 can be transformed using the trans argument in the scale_*_*() function, as shown in Figure 8 below.\n\nCodeg4 + \n  scale_y_continuous(\n    trans = \"log2\",\n    name = \"Transformed Y-Axis\\nwith powers of Two\"\n  ) +\n  labs(subtitle = \"Transformed Y-Axis to the powers of 2\",\n       title = \"Transformed Axes\")\n\n\n\n\n\n\nFigure 8: Continuous scale transformation into a log2 scale using trans argument in the scale_*_*() function",
    "crumbs": [
      "Home",
      "The Grammer",
      "Chapter 14"
    ]
  },
  {
    "objectID": "Chapter14.html#legend-merging-and-splitting",
    "href": "Chapter14.html#legend-merging-and-splitting",
    "title": "Chapter 14",
    "section": "14.7 Legend merging and splitting",
    "text": "14.7 Legend merging and splitting\nThe Figure 9 shows us that if we’ve mapped colour to both points and lines, the keys will show both points and lines.\n\nCodeg4 +\n  geom_col(\n    fill = \"transparent\"\n  ) +\n  labs(subtitle = \"Merged Legends - default option in ggplot2\",\n       title = \"Legend merging and splitting (1)\",\n       colour = \"Merged Legends\")\n\n\n\n\n\n\nFigure 9: Merged legends in ggplot2 - the default behaviour\n\n\n\n\nThe Figure 10 shows us how we can split or hide legends for certain geoms - here we-ve hidden the colour legend for lines / column bars - so the key will show only points (and not lines).\n\nCodeg4 +\n  geom_col(\n    fill = \"transparent\",\n    show.legend = FALSE\n  ) +\n  labs(subtitle = \"Splitting / Hiding Legends using show.legend = FALSE in one of the geoms\",\n       title = \"Legend merging and splitting (2)\",\n       colour = \"Legend only for points\")\n\n\n\n\n\n\nFigure 10: Hiding specific legends using show.legend = FALSE in one of the geoms",
    "crumbs": [
      "Home",
      "The Grammer",
      "Chapter 14"
    ]
  },
  {
    "objectID": "Chapter14.html#legend-key-glyphs",
    "href": "Chapter14.html#legend-key-glyphs",
    "title": "Chapter 14",
    "section": "14.8 Legend key glyphs",
    "text": "14.8 Legend key glyphs\nUsing the same graph as the last section, the Figure 11 demonstrates the use of argument key_glyph = within a geom_*() function to change the glyph used in the key of the graph.\n\nCodeg4 +\n  geom_col(\n    fill = \"transparent\",\n    key_glyph = draw_key_path\n  ) +\n  labs(title = \"Changing the glyphs for legends\",\n       colour = \"Customized legend glyph\")\n\n\n\n\n\n\nFigure 11: The use of argument key_glyph with a geom_*() to change the glyph used in the key",
    "crumbs": [
      "Home",
      "The Grammer",
      "Chapter 14"
    ]
  },
  {
    "objectID": "Chapter15.html#linear-coordinate-systems",
    "href": "Chapter15.html#linear-coordinate-systems",
    "title": "Chapter 15",
    "section": "15.1 Linear coordinate systems",
    "text": "15.1 Linear coordinate systems\nLet’s use the example plot in Figure 2 to demonstrate the various changes / customization possible with ggplot2 with coordinates.\n\nCodeg1 &lt;- tb |&gt;\n  ggplot(\n    aes(\n      x = v_integer,\n      y = v_regress\n    )\n  ) +\n  geom_smooth(\n    se = TRUE,\n    colour = \"grey\",\n    fill = \"lightgrey\",\n    alpha = 0.5\n  ) +\n  geom_point(\n    aes(colour = v_discrete),\n    size = 3\n  ) +\n  scale_colour_brewer(palette = \"Dark2\") +\n  theme_minimal() +\n  theme(axis.line = element_line(arrow = arrow()))\ng1\n\n\n\n\n\n\nFigure 2: An example plot which we will later use in various examples of tweaking the Linear Coordinate Systems\n\n\n\n\n15.1.1 Zooming into a plot with coord_cartesian()\n\nThe Figure 3 shows an example of zooming into a plot with coord_cartesian() and its difference from the other option using scale_*_continuous(limits = *) .\n\nCodeg1 +\n  labs(title = \"The Base Plot shows entire data\")\n\ng1 + scale_y_continuous(limits = c(100, 200)) +\n  labs(title = \"Using limits in scale_y_continuous() eliminates\\nall data out of limits\")\n\ng1 + coord_cartesian(ylim = c(100, 200)) +\n  labs(title = \"Using ylim in coord_cartesian() simply zooms-in,\\nand preserves out-of-limits data\")\n\n\n\n\n\n\n\n\n(a) Base Plot\n\n\n\n\n\n\n\n\n\n(b) Limits argument in scale_y_continuous()\n\n\n\n\n\n\n\n\n\n(c) ylim argument in coord_cartesian()\n\n\n\n\n\nFigure 3: Zooming in on a specified portion of Y-Axis: 100 to 200\n\n\n\n15.1.2 Flipping the axes with coord_flip()\n\nThe Figure 4 shows examples of flipping the coordinates, and reasoning as to why it may be better than changing X-axis and Y-axis variables manually, especially if we are using geom_smooth() which uses y ~ x formula by default.\n\nCodeg1 + labs(title = \"The base plot\",\n                subtitle = \"Dependent variable is v_regress, and independent var is v_integer\")\n\ng1 + \n  coord_flip() +\n  labs(title = \"coord_flip()\",\n       subtitle = \"Smoother line still follows v_regress ~ v_integer formula\")\n\ntb |&gt;\n  ggplot(\n    aes(\n      y = v_integer,\n      x = v_regress\n    )\n  ) +\n  geom_smooth(\n    se = TRUE,\n    colour = \"grey\",\n    fill = \"lightgrey\",\n    alpha = 0.5\n  ) +\n  geom_point(\n    aes(colour = v_discrete),\n    size = 3\n  ) +\n  scale_color_brewer(palette = \"Dark2\") +\n  theme_minimal() +\n  theme(axis.line = element_line(arrow = arrow())) + \n  labs(title = \"Exchanging x and y variable\",\n       subtitle = \"Smoother line now follows v_integer ~ v_regress formula\")\n\n\n\n\n\n\n\n\n(a) The base plot\n\n\n\n\n\n\n\n\n\n(b) Smoother line still follows v_regress ~ v_integer formula\n\n\n\n\n\n\n\n\n\n(c) Smoother line now follows v_integer ~ v_regress formula\n\n\n\n\n\nFigure 4: Demonstrating the use of coord_flip()\n\n\n\n15.1.3 Equal scales with coord_fixed()\n\nThe Figure 5 shows the same three graphs above, but in a much better sense now that coordinates are fixed to be equal.\nCodeg1 + labs(title = \"The base plot\")\n\ng1 + coord_fixed() + labs(title = \"The base plot with coord_fixed()\")\n\n\n\n\n\n\n\n\n\n(a) The base plot\n\n\n\n\n\n\n\n\n\n(b) The base plot with fixed coordinates\n\n\n\n\n\n\nFigure 5: Demonstrating the use of coord_fixed()",
    "crumbs": [
      "Home",
      "The Grammer",
      "Chapter 15"
    ]
  },
  {
    "objectID": "Chapter15.html#non-linear-coordinate-systems",
    "href": "Chapter15.html#non-linear-coordinate-systems",
    "title": "Chapter 15",
    "section": "15.2 Non-linear coordinate systems",
    "text": "15.2 Non-linear coordinate systems\nThe Figure 6 demonstrates five types of coordinate systems - first three linear, and the last two non-linear.\n\nCodetb &lt;- tibble(\n  x_random = runif(100, min = 0, max = 100),\n  y_random = (1.5 * x_random) + (rnorm(100, 0, 25))\n)\n\ng1 &lt;- ggplot(tb, aes(x_random, y_random)) +\n  geom_point() +\n  geom_smooth(se = FALSE) +\n  labs(title = \"Cartesian Coordinates\") +\n  theme_minimal()\n\ng1 \n\ng1 + coord_flip() + \n  labs(title = \"Flipped Coordinates\",\n       subtitle = \"coord_flipped()\")\n\ng1 + coord_fixed() +\n  labs(title = \"Fixed Coordinates\",\n       subtitle = \"coord_fixed()\")\n\ng1 + coord_polar() +\n  labs(title = \"Polar Coordinates\",\n       subtitle = \"coord_polar() transforms x-axis into theta (angle) and y-axis into radius\")\n\ng1 + coord_trans(x = \"log10\") +\n  labs(title = \"Transformed Coordinates\",\n       subtitle = \"coord_trans() with x-axis on log10 scale\")\n\n\n\n\n\n\n\n\n(a) coord_cartesian()\n\n\n\n\n\n\n\n\n\n(b) coord_flip()\n\n\n\n\n\n\n\n\n\n(c) coord_fixed()\n\n\n\n\n\n\n\n\n\n(d) coord_polar()\n\n\n\n\n\n\n\n\n\n(e) coord_trans()\n\n\n\n\n\nFigure 6: A demonstration of Polar Coordinates, Flipped Coordinates, Transformed Coordinates and Fixed Coordinates\n\n\n\n15.2.1 Transformations with coord_trans()\n\nThe impact of coord_trans() can be demonstrated in Figure 7 shown below.\n\nCodeg1 +\n  coord_trans(x = \"log2\") +\n  scale_x_continuous(breaks = 2^(1:8)) +\n  theme(panel.grid.minor = element_blank()) +\n  labs(\n    title = \"Transformation to Log 2 scale\",\n    subtitle = \"Note that x-axis has equidistant powers of 2\"\n  )\n\n\n\n\n\n\nFigure 7: Use of coord_trans() to change the graph into a non-linear one\n\n\n\n\n15.2.2 Polar coordinates with coord_polar()\n\nThe Figure 8 demonstrates various uses of coord_polar()\n\nCodetb2 &lt;- tibble(\n  Type = sample(LETTERS[1:4], size = 10, replace = T)\n)\n\ng2 &lt;- tb2 |&gt; \n  ggplot(aes(x = \"1\", fill = Type)) +\n  geom_bar() +\n  labs(title = \"A Stacked Bar-Chart\") +\n  theme_void() +\n  theme(legend.position = \"bottom\")\n\ng2\n\n\ng2 + \n  coord_polar() +\n  labs(title = \"coord_polar()\",\n       subtitle = \"Without use of expand = expansion(0)\")\n\ng2 + \n  coord_polar() +\n  scale_x_discrete(expand = expansion(0)) +\n  labs(title = \"Bulls-Eye Chart\",\n       subtitle = \"Using expand = expansion(0) in scale_x_discrete()\")\n\ng2 + \n  coord_polar(theta = \"y\") +\n  labs(title = \"Pie Chart\",\n       subtitle = \"Using theta = 'y' in coord_polar()\")\n\n\n\n\n\n\n\n\n(a) A Stacked bar chart\n\n\n\n\n\n\n\n\n\n(b) Chart with coord_polar()\n\n\n\n\n\n\n\n\n\n(c) Bulls-Eye Chart\n\n\n\n\n\n\n\n\n\n(d) Pie-Chart\n\n\n\n\n\nFigure 8: Using polar coordinates\n\n\n\n15.2.3 Map projections with coord_map()\n\nHere, in Figure 9, we show the map of Canada with different projections.\n\nCodeg3 &lt;- map_data(\n  database = \"world\",\n  regions = \"canada\"\n) |&gt; \n  ggplot(\n    aes(\n      x = long,\n      y = lat,\n      group = group\n    )\n  ) +\n  geom_polygon(\n    fill = \"white\",\n    colour = \"black\"\n  ) +\n  theme(legend.position = \"none\") +\n  labs(title = \"Canada's Map: coord_cartesian()\")\n\ng3 + \n  coord_quickmap() +\n  labs(title = \"Canada's Map: coord_quickmap()\")\n\ng3 + \n  coord_map() +\n  labs(title = \"Canada's Map: coord_map()\")\n\ng3 + \n  coord_map(\"ortho\") +\n  labs(title = \"Canada's Map: coord_map(projection = `ortho`)\")\n\n\n\n\n\n\n\n\n(a) Base map in coord_cartesian()\n\n\n\n\n\n\n\n\n\n(b) coord_quickmap()\n\n\n\n\n\n\n\n\n\n(c) coord_map()\n\n\n\n\n\nFigure 9: Map of Canada with different coordinates",
    "crumbs": [
      "Home",
      "The Grammer",
      "Chapter 15"
    ]
  },
  {
    "objectID": "Chapter16.html#exercises",
    "href": "Chapter16.html#exercises",
    "title": "Chapter 16",
    "section": "16.7 Exercises",
    "text": "16.7 Exercises"
  },
  {
    "objectID": "Chapter16.html#question-1",
    "href": "Chapter16.html#question-1",
    "title": "Chapter 16",
    "section": "Question 1",
    "text": "Question 1\nDiamonds: display the distribution of price conditional on cut and carat. Try faceting by cut and grouping by carat. Try faceting by carat and grouping by cut. Which do you prefer?\nThe Figure 1 shows the output of both grouping and faceting by cut and carat respectively. As we can see in Figure 1 (a), the better option out of the two is faceting by cut and grouping by carat.\n\n\n\nCode\ndiamonds |&gt; \n  mutate(carat = cut_width(carat, 1)) |&gt; \n  ggplot(aes(price, group = carat, colour = carat)) +\n  geom_density() +\n  facet_grid( ~ cut) +\n  theme_minimal() +\n  scale_x_continuous(\n    labels = scales::label_number(scale_cut = scales::cut_short_scale())\n  ) +\n  guides(\n    colour = guide_legend(nrow = 1)\n  ) +\n  theme(legend.position = \"bottom\",\n        axis.text.x = element_text(angle = 0)) +\n  labs(title = \"Faceting by cut and grouping by carat\",\n       subtitle = \"Cut has been ground into 6 intervals of width 1 each\",\n       x = \"Price, in US $\",\n       y = \"Density\",\n       colour = \"Carat\")\n\ndiamonds |&gt; \n  mutate(carat = cut_width(carat, 1)) |&gt; \n  ggplot(aes(price, group = cut, colour = cut)) +\n  geom_density() +\n  facet_grid( ~ carat) +\n  theme_minimal() +\n  scale_x_continuous(\n    labels = scales::label_number(scale_cut = scales::cut_short_scale())\n  ) +\n  guides(\n    colour = guide_legend(nrow = 1)\n  ) +\n  scale_color_brewer(palette = \"Dark2\") +\n  theme(legend.position = \"bottom\",\n        axis.text.x = element_text(angle = 0)) +\n  labs(title = \"Faceting by carat and grouping by cut\",\n       subtitle = \"Cut has been ground into 6 intervals of width 1 each\",\n       x = \"Price, in US $\",\n       y = \"Density\",\n       colour = \"Cut of the diamond\")\n\n\n\n\n\n(a) Faceting by cut and grouping by carat\n\n\n\n\n\n\n\n(b) Faceting by carat and grouping by cut\n\n\n\nFigure 1: Distribution of price conditional on cut and carat"
  },
  {
    "objectID": "Chapter16.html#question-2",
    "href": "Chapter16.html#question-2",
    "title": "Chapter 16",
    "section": "Question 2",
    "text": "Question 2\nDiamonds: compare the relationship between price and carat for each colour. What makes it hard to compare the groups? Is grouping better or faceting? If you use faceting, what annotation might you add to make it easier to see the differences between panels?\nThe Figure 2 shows the use of grouping (Figure 2 (a)) and faceting (Figure 2 (b)) in comparing the relationship of price and carat for each colour of the diamonds. Using grouping, as shown in Figure 2 (a), leads to over-plotting and makes it nearly impossible to compare across different colours. Using faceting, as shown in Figure 2 (b), we can compare the correlations, but there is no common line with which we can easily compare the panels.\nThus, we can add an annotation of an A-B line using geom_abline() with slope of mean(price) / mean(carat), as shown in Figure 2 (c), to make it easier to compare the relationship between price and carat for each colour, and even compare across colours.\n\n\n\nCode\ndiamonds |&gt; \n  ggplot(aes(x = carat, y = price, color = color, group = color)) +\n  geom_point(size = 0.75) +\n  scale_color_brewer(palette = \"Dark2\") +\n   labs(x = \"Carat\", y = \"Price, in US $\", \n       title = \"Grouping by Color of the diamond\",\n       subtitle = \"The overplotting - too many points - mnakes it hard to compare groups\")\n\n\ndiamonds |&gt; \n  ggplot(aes(x = carat, y = price)) +\n  geom_point(size = 0.5) +\n  facet_wrap(~ color, nrow = 2) +\n  scale_y_continuous(labels = label_number(scale_cut = cut_short_scale(),\n                                           prefix = \"$ \")) +\n  labs(x = \"Carat\", y = \"Price, in US $\", \n       title = \"Faceting by Color of the diamond\",\n       subtitle = \"The lack of an (annotation a comparison line) makes it hard to compare groups\")\n\n\nslope_var = mean(diamonds$price, na.rm = T) / mean(diamonds$carat, na.rm = T)\n\ndiamonds |&gt; \n  ggplot(aes(x = carat, y = price)) +\n  geom_point(size = 0.5, alpha = 0.25) +\n  geom_abline(slope = slope_var) +\n  facet_wrap(~ color, nrow = 2) +\n  scale_y_continuous(labels = label_number(scale_cut = cut_short_scale(),\n                                           prefix = \"$ \")) +\n  labs(x = \"Carat\", y = \"Price, in US $\", \n       title = \"Faceting by Color of the diamond\",\n       subtitle = \"A comparison line allows us to measure and compare the\\ncoorelations in different colours of diamonds\")\n\n\n\n\n\n(a) Grouping by color of diamond\n\n\n\n\n\n\n\n(b) Faceting by color of diamond\n\n\n\n\n\n\n\n(c) Adding an abline annotation to improve comparison in the faceted plot\n\n\n\nFigure 2: Comparing the relationship between price and carat for each colour"
  },
  {
    "objectID": "Chapter16.html#question-4",
    "href": "Chapter16.html#question-4",
    "title": "Chapter 16",
    "section": "Question 4",
    "text": "Question 4\nRecreate the following plot. It facets mpg2 by class, overlaying a smooth curve fit to the full dataset.\nThe code shown below recreates the figure in Figure 3. The clever trick to use is that the faceting variable (class) of mpg2 dataset can be set to NULL , i.e. removed to form another data.frame mpg3 . This exploits the fact that ggplot2 uses a missing faceting variable to be represented in each facet of the plot. Thus, there is a common smooth line across facets.\n\n\nCode\nmpg2 &lt;- subset(mpg, cyl != 5 & drv %in% c(\"4\", \"f\") & class != \"2seater\")\nmpg3 &lt;- mpg2 |&gt; \n  select(-class)\n\nmpg3 &lt;- mpg2 |&gt; \n  mutate(class = NULL)\n\nmpg2 |&gt;\n  ggplot(aes(x = displ, y = hwy)) +\n  geom_point() +\n  geom_smooth(data = mpg3, se = FALSE) +\n  facet_wrap(~ class)\n\n\n\n\n\nFigure 3: Recreating the plot in question no. 4 using facet_wrap() and setting faceting variable to NULL for the smooth line plotting"
  },
  {
    "objectID": "Chapter16.html#question-3",
    "href": "Chapter16.html#question-3",
    "title": "Chapter 16",
    "section": "Question 3",
    "text": "Question 3\nWhy is facet_wrap() generally more useful than facet_grid()?\nThe facet_wrap() and facet_grid() are both used for creating multiple plots (facets) based on one or more categorical variables. The choice between them depends on the structure of your data and the specific visualization goals.\nHere are some reasons why facet_wrap() might be considered more useful than facet_grid() in certain situations:\n\nAutomatic Layout: facet_wrap() automatically determines the layout of the facets based on the number of levels in the faceting variable. This means you don’t need to specify the number of rows or columns, making it more convenient, especially when you have many levels in the faceting variable.\nSingle Variable Faceting: If you only have one categorical variable to facet by, facet_wrap() is generally more concise to use than facet_grid(), which requires specifying rows and columns even if you only have one variable.\nVariable Number of Panels: If the number of levels in the faceting variable varies across different subsets of your data, facet_wrap() adapts to this variability by adjusting the layout accordingly. facet_grid() requires specifying the number of rows and columns, which might not be flexible enough for varying data.\nFree Scales: facet_wrap() can be used to create plots with different scales for each facet (e.g., free y-axis scales), which can be useful for comparing distributions across groups without being constrained by a single scale. facet_grid() does not provide this feature directly.\nNon-Rectangular Grids: If your facets don’t form a regular grid (e.g., if you want to arrange them in a circular or irregular pattern), facet_wrap() allows for more flexibility in arranging the facets compared to facet_grid().\n\nHowever, facet_grid() has its own advantages, such as allowing you to facet by multiple variables simultaneously, and providing more control over the layout of the facets.\nIn summary, facet_wrap() is generally more useful when you have a single categorical variable to facet by, and you want a flexible layout that adapts to the number of levels in that variable. It’s particularly handy when dealing with a variable number of panels or when you want free scales across facets."
  },
  {
    "objectID": "Chapter17.html#introduction",
    "href": "Chapter17.html#introduction",
    "title": "Chapter 17",
    "section": "17.1 Introduction",
    "text": "17.1 Introduction\nA demonstration on the use of legend.position = \"\" and legend.justification = \"\" with the function theme() function of the ggplot2 is shown in Figure 1 . As we can see in Figure 1 (d), using both arguments together produces the best result.\n\nCodeg1 &lt;- gt::gtcars |&gt; \n  ggplot(aes(hp, mpg_h, colour = bdy_style)) +\n  geom_jitter() +\n  labs(\n    x = \"Engine Horsepower (hp)\",\n    y = \"Mileage (miles per gallon)\",\n    colour = \"Body Style\"\n  ) +\n  paletteer::scale_colour_paletteer_d(\"nbapalettes::clippers_original\") +\n  theme_bw() +\n  theme(plot.subtitle = element_text(hjust = 0.5))\n\ng1 + labs(subtitle = \"Base Plot\")\n\ng1 + theme(legend.position = \"bottom\") + labs(subtitle = \"legend.position = 'bottom'\")\n\ng1 +\n  theme(legend.position = c(1,1)) + \n  labs(subtitle = \"legend.position = c(1,1)\")\n\ng1 + \n  theme(legend.position = c(1,1),\n        legend.justification = c(1.1, 1.1)) +\n  labs(subtitle = \"With added legend.justification = c(1.1, 1.1)\")\n\n\n\n\n\n\n\n\n\n(a) Base Plot\n\n\n\n\n\n\n\n\n\n(b) legend.position = ‘bottom’\n\n\n\n\n\n\n\n\n\n\n\n(c) legend.position = c(1,1)\n\n\n\n\n\n\n\n\n\n(d) With added legend.justification = c(1.1, 1.1)\n\n\n\n\n\n\nFigure 1: Using legend.postition inside and legend.justification arguments within the theme() function of ggplot2",
    "crumbs": [
      "Home",
      "The Grammer",
      "Chapter 17"
    ]
  },
  {
    "objectID": "Chapter17.html#complete-themes",
    "href": "Chapter17.html#complete-themes",
    "title": "Chapter 17",
    "section": "17.2 Complete themes",
    "text": "17.2 Complete themes\nA very good argument to use with theme_*() family of functions is the base_size = argument to fix a base size for all text used in the plot, and base_family = to set the font for the entire plot.\n17.2.1 Exercises\nQuestion 1\nTry out all the themes in ggthemes. Which do you like the best?\nThe various themes of ggthemes are shown in Figure 2. The best one seems to be theme_clean() as it allows easy customization.\nCodeg2 &lt;- g1 + theme(legend.position = \"bottom\")\n\ng2 + ggthemes::theme_calc() + ggtitle(\"theme_calc()\")\n\ng2 + ggthemes::theme_clean() + ggtitle(\"theme_clean()\")\n\ng2 + ggthemes::theme_economist() + ggtitle(\"theme_economist()\")\n\ng2 + ggthemes::theme_excel_new() + ggtitle(\"theme_excel_new()\")\n\ng2 + ggthemes::theme_few() + ggtitle(\"theme_few()\")\n\ng2 + ggthemes::theme_gdocs() + ggtitle(\"theme_gdocs()\")\n\ng2 + ggthemes::theme_wsj() + ggtitle(\"theme_wsj()\")\n\ng2 + ggthemes::theme_solarized_2() + ggtitle(\"theme_soloarized_2()\")\n\n\n\n\n\n\n\n\n\n(a) theme_calc()\n\n\n\n\n\n\n\n\n\n(b) theme_clean()\n\n\n\n\n\n\n\n\n\n\n\n(c) theme_economist()\n\n\n\n\n\n\n\n\n\n(d) theme_excel_new()\n\n\n\n\n\n\n\n\n\n\n\n(e) theme_few()\n\n\n\n\n\n\n\n\n\n(f) theme_gdocs()\n\n\n\n\n\n\n\n\n\n\n\n(g) theme_wsj()\n\n\n\n\n\n\n\n\n\n(h) theme_solarized_2()\n\n\n\n\n\n\nFigure 2: The various themes in ggthemes package\n\n\nQuestion 2\nWhat aspects of the default theme do you like? What don’t you like?\nWhat would you change?\nIn ggplot2, the default theme (theme_gray()) has several aspects that align well with Tufte’s principles and are conducive to clear and effective data visualization:\n\nMinimalist Design: The default theme employs a clean and minimalist design, which is in line with Tufte’s principle of maximizing data-ink ratio. This means that unnecessary elements are minimized, allowing the data to stand out more prominently.\nNeutral Background: The light gray background in the default theme provides a neutral canvas for the data to be presented on. This is generally preferable for readability, especially when using a white background, as it reduces contrast and minimizes visual distractions.\nSimple Grid Lines: The faint grid lines in the default theme help guide the viewer’s eye across the plot without overpowering the data.\n\nHowever, there are a few aspects of the default theme that could be improved to better align with Tufte’s principles, which I generally follow,: —\n\nThinner Axes and Tick Marks: Tufte suggests using thinner axes and tick marks to further reduce visual clutter and draw attention to the data. The default theme could benefit from thinner lines for both axes and tick marks.\nIncreased Font Size for Labels and Titles: While the default font size is generally adequate, increasing the font size slightly for axis labels, titles, and annotations can enhance readability, especially when viewing plots from a distance or on smaller screens.\nAdjustment of Plot Margins: Tufte emphasizes the importance of maximizing the data-ink ratio by minimizing non-data ink, including unnecessary margins. Adjusting the default plot margins to be more compact could help achieve this goal and allow for more space dedicated to the presentation of data.\n\nOverall, while the default theme in ggplot2 aligns well with Tufte’s principles in many aspects, there are opportunities for further refinement to enhance clarity, simplicity, and effectiveness in data visualization. These suggested changes aim to optimize the balance between aesthetic appeal and functional clarity in accordance with Tufte’s principles.\nQuestion 3\nLook at the plots in your favourite scientific journal. What theme do they most resemble? What are the main differences?\nIn many scientific journals, especially those focused on data visualization and analysis, the plots often resemble themes that prioritize clarity, simplicity, and effective communication of information. One common theme that many plots in scientific journals resemble is the “classic” theme in ggplot2, which emphasizes clean lines, minimal distractions, and a focus on the data itself.\nThe example image for a graph / plot from the journal Nature is given below:\n\n\nCredits: https://media.springernature.com/m685/springer-static/image/art%3A10.1038%2Fs41551-017-0079/MediaObjects/41551_2017_Article_BFs415510170079_Fig1_HTML.jpg\n\nThe main differences between the plots in scientific journals and the “classic” ggplot2 theme lie in the specific customizations and adjustments made to suit the needs of the particular journal’s style and the preferences of its audience. Here are some of the main differences that may be observed:\n\nColor Palette: Scientific journals often have specific guidelines for color usage, particularly for distinguishing between different groups or conditions in the data. While the “classic” ggplot2 theme uses a simple default color palette, plots in scientific journals may employ custom color schemes that adhere to the journal’s style guidelines.\nFont Choices: Journals typically have standardized fonts for text, including axis labels, titles, and annotations. While ggplot2 allows for customization of fonts, plots in scientific journals may use fonts that match the journal’s style guide, which may differ from the default fonts in ggplot2.\nAxis and Tick Mark Styles: The style and thickness of axes and tick marks may be adjusted in scientific journal plots to match the journal’s aesthetic preferences or to enhance readability. This could include changes such as thinner lines, different line styles, or adjustments to the length and spacing of tick marks.\nAnnotation and Labeling: Scientific journal plots often include detailed annotations, such as significance indicators, error bars, or additional text descriptions. These annotations may be placed strategically to ensure clarity and precision in conveying the results of the analysis.\nPlot Aspect Ratio and Size: The aspect ratio and overall size of plots in scientific journals may be adjusted to fit within the journal’s page layout and to optimize presentation on both digital and print platforms. This could involve resizing plots to ensure they are legible and visually appealing at different scales.\n\nOverall, while plots in scientific journals share similarities with the “classic” ggplot2 theme in their emphasis on clarity and simplicity, they often incorporate customization to align with the journal’s style guidelines and the preferences of its audience. These customization aim to enhance the effectiveness of the visual communication of data within the context of the specific publication.",
    "crumbs": [
      "Home",
      "The Grammer",
      "Chapter 17"
    ]
  },
  {
    "objectID": "Chapter17.html#exercises",
    "href": "Chapter17.html#exercises",
    "title": "Chapter 17",
    "section": "17.2.1 Exercises",
    "text": "17.2.1 Exercises\n\nQuestion 1\nTry out all the themes in ggthemes. Which do you like the best?\nThe various themes of ggthemes are shown in ?@fig-q1. The best one seems to be theme_clean() as it allows easy customization.\n\n\nCode\ng2 &lt;- g1 + theme(legend.position = \"bottom\")\n\ng2 + ggthemes::theme_calc() + ggtitle(\"theme_calc()\")\n\ng2 + ggthemes::theme_clean() + ggtitle(\"theme_clean()\")\n\ng2 + ggthemes::theme_economist() + ggtitle(\"theme_economist()\")\n\ng2 + ggthemes::theme_excel_new() + ggtitle(\"theme_excel_new()\")\n\ng2 + ggthemes::theme_few() + ggtitle(\"theme_few()\")\n\ng2 + ggthemes::theme_gdocs() + ggtitle(\"theme_gdocs()\")\n\ng2 + ggthemes::theme_wsj() + ggtitle(\"theme_wsj()\")\n\ng2 + ggthemes::theme_solarized_2() + ggtitle(\"theme_soloarized_2()\")\n\n\n\n\n\n\n\nFigure 2: ?(caption)\n\n\n\n\n\n\n\nFigure 3: ?(caption)\n\n\n\n\n\n\n\n\n\nFigure 4: ?(caption)\n\n\n\n\n\n\n\nFigure 5: ?(caption)\n\n\n\n\n\n\n\n\n\nFigure 6: ?(caption)\n\n\n\n\n\n\n\nFigure 7: ?(caption)\n\n\n\n\n\n\n\n\n\nFigure 8: ?(caption)\n\n\n\n\n\n\n\nFigure 9: ?(caption)\n\n\n\n\n\n\n\n\nQuestion 2\nWhat aspects of the default theme do you like? What don’t you like?\nWhat would you change?\nIn ggplot2, the default theme (theme_gray()) has several aspects that align well with Tufte’s principles and are conducive to clear and effective data visualization:\n\nMinimalist Design: The default theme employs a clean and minimalist design, which is in line with Tufte’s principle of maximizing data-ink ratio. This means that unnecessary elements are minimized, allowing the data to stand out more prominently.\nNeutral Background: The light gray background in the default theme provides a neutral canvas for the data to be presented on. This is generally preferable for readability, especially when using a white background, as it reduces contrast and minimizes visual distractions.\nSimple Grid Lines: The faint grid lines in the default theme help guide the viewer’s eye across the plot without overpowering the data.\n\nHowever, there are a few aspects of the default theme that could be improved to better align with Tufte’s principles, which I generally follow,: —\n\nThinner Axes and Tick Marks: Tufte suggests using thinner axes and tick marks to further reduce visual clutter and draw attention to the data. The default theme could benefit from thinner lines for both axes and tick marks.\nIncreased Font Size for Labels and Titles: While the default font size is generally adequate, increasing the font size slightly for axis labels, titles, and annotations can enhance readability, especially when viewing plots from a distance or on smaller screens.\nAdjustment of Plot Margins: Tufte emphasizes the importance of maximizing the data-ink ratio by minimizing non-data ink, including unnecessary margins. Adjusting the default plot margins to be more compact could help achieve this goal and allow for more space dedicated to the presentation of data.\n\nOverall, while the default theme in ggplot2 aligns well with Tufte’s principles in many aspects, there are opportunities for further refinement to enhance clarity, simplicity, and effectiveness in data visualization. These suggested changes aim to optimize the balance between aesthetic appeal and functional clarity in accordance with Tufte’s principles.\n\n\nQuestion 3\nLook at the plots in your favourite scientific journal. What theme do they most resemble? What are the main differences?\nIn many scientific journals, especially those focused on data visualization and analysis, the plots often resemble themes that prioritize clarity, simplicity, and effective communication of information. One common theme that many plots in scientific journals resemble is the “classic” theme in ggplot2, which emphasizes clean lines, minimal distractions, and a focus on the data itself.\nThe example image for a graph / plot from the journal Nature is given below:\n\nThe main differences between the plots in scientific journals and the “classic” ggplot2 theme lie in the specific customizations and adjustments made to suit the needs of the particular journal’s style and the preferences of its audience. Here are some of the main differences that may be observed:\n\nColor Palette: Scientific journals often have specific guidelines for color usage, particularly for distinguishing between different groups or conditions in the data. While the “classic” ggplot2 theme uses a simple default color palette, plots in scientific journals may employ custom color schemes that adhere to the journal’s style guidelines.\nFont Choices: Journals typically have standardized fonts for text, including axis labels, titles, and annotations. While ggplot2 allows for customization of fonts, plots in scientific journals may use fonts that match the journal’s style guide, which may differ from the default fonts in ggplot2.\nAxis and Tick Mark Styles: The style and thickness of axes and tick marks may be adjusted in scientific journal plots to match the journal’s aesthetic preferences or to enhance readability. This could include changes such as thinner lines, different line styles, or adjustments to the length and spacing of tick marks.\nAnnotation and Labeling: Scientific journal plots often include detailed annotations, such as significance indicators, error bars, or additional text descriptions. These annotations may be placed strategically to ensure clarity and precision in conveying the results of the analysis.\nPlot Aspect Ratio and Size: The aspect ratio and overall size of plots in scientific journals may be adjusted to fit within the journal’s page layout and to optimize presentation on both digital and print platforms. This could involve resizing plots to ensure they are legible and visually appealing at different scales.\n\nOverall, while plots in scientific journals share similarities with the “classic” ggplot2 theme in their emphasis on clarity and simplicity, they often incorporate customizations to align with the journal’s style guidelines and the preferences of its audience. These customizations aim to enhance the effectiveness of the visual communication of data within the context of the specific publication."
  },
  {
    "objectID": "Chapter17.html#modifying-theme-components",
    "href": "Chapter17.html#modifying-theme-components",
    "title": "Chapter 17",
    "section": "17.3 Modifying theme components",
    "text": "17.3 Modifying theme components\nThe example in Figure 3 shows heavy customization of the theme elements. The code is also given below.\n\nCode# =============================================================================#\n# About the Dataset-------------------------------------------------------------\n# =============================================================================#\n\n# Source URL: https://hdr.undp.org/data-center/documentation-and-downloads\n# Credits: UNDP Human Development Reports\n# Human development, quantified. One of the most widely recognized measures, \n# the United Nations' Human Development Index amalgamates data on life \n# expectancy, per capita income, and educational attainment into a singular \n# value for each country-year. The UN offers downloadable files and an API \n# encompassing all yearly HDI rankings and sub-indicators spanning from 1990 to\n# 2022. These resources also encompass information from correlated indices like \n# the Inequality-adjusted Human Development Index, Gender Development Index, and \n# Gender Inequality Index.\n\n# =============================================================================#\n# Findings ---------------------------------------------------------------------\n# =============================================================================#\n\n# The best performing countries, in terms of HDI improvement between 1990 and \n# 2022 are: China, Myanmar, Bangladesh, Turkiye, and, Morocco\n# The wrost performing countries, in terms of HDI reduction / least increase\n# between 1990 and 2022 are: Syria, Ukraine, Namibia, Libya, and, San Marino\n\n# =============================================================================#\n# Library Load-in---------------------------------------------------------------\n# =============================================================================#\n\n# Data Wrangling Tools\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(here)\nlibrary(sf)\n\n# Final plot (ggplot2) tools\nlibrary(scales)\nlibrary(fontawesome)\nlibrary(ggtext)\nlibrary(showtext)\nlibrary(colorspace)\n\n\n# =============================================================================#\n# Data Load-in, EDA & Data Wrangling--------------------------------------------\n# =============================================================================#\n\n# Read in the UNDP data\nurl &lt;- \"https://hdr.undp.org/sites/default/files/2023-24_HDR/HDR23-24_Composite_indices_complete_time_series.csv\"\n\nhdi &lt;- read_csv(url)\n\n# Number of countries to highlight in each\nnos &lt;- 5\n\n# A wide format and housekeeping to filter out relevant variables, and also\n# change names of some countries to easily recognizable names\ndfwide &lt;- hdi |&gt; \n  select(iso3, \n         country, \n         region, \n         (contains(\"hdi_\") & !(contains(\"_m_\")) & !(contains(\"_f_\")) & !(contains(\"ihdi\")) & !(contains(\"phdi\")) & !(contains(\"rank\"))\n          )\n         ) |&gt; \n  filter(!(country %in% c(\"East Asia and the Pacific\"))) |&gt; \n  mutate(country = if_else(country == \"T\\xfcrkiye\", \"Turkiye\", country),\n         country = if_else(country == \"Syrian Arab Republic\", \"Syria\", country))\n\n# Long (tidy) format of the data (needed for plotting facets in ggplot2)\ndf1 &lt;- dfwide |&gt; \n  pivot_longer(\n    cols = contains(\"hdi\"),\n    names_to = \"year\",\n    values_to = \"value\"\n  ) |&gt; \n  mutate(year = parse_number(year))\n\n# Improvement amongst countries\ndf_imp &lt;- dfwide |&gt; \n  mutate(improvement = hdi_2022 - hdi_1990) |&gt; \n  select(country, improvement)\n\n# Worst off countries\nleast_imp &lt;- df_imp |&gt; \n  slice_min(order_by = improvement, n = nos) |&gt; \n  pull(country)\n\n# Best improvement countries\nmost_imp &lt;- df_imp |&gt; \n  slice_max(order_by = improvement, n = nos) |&gt; \n  pull(country)\n\nleast_imp\nmost_imp\n# A tibble for actual percentage change in HDI - to show in graph\nchanges &lt;- bind_rows(\n  df_imp |&gt; \n    slice_min(order_by = improvement, n = nos),\n  df_imp |&gt; \n    slice_max(order_by = improvement, n = nos)\n) |&gt; \n  mutate(\n    improvement = round(100 * improvement, 1)\n  )\n\n# Tibble to actually use in plotting\nplotdf &lt;- df1 |&gt; \n  mutate(\n    most_improved = if_else(country %in% most_imp, country, NA),\n    least_improved= if_else(country %in% least_imp, country, NA)\n  ) |&gt; \n  pivot_longer(\n    cols = c(most_improved, least_improved),\n    names_to = \"facet_var\",\n    values_to = \"colour_var\"\n  ) |&gt; \n  mutate(colour_var = fct(colour_var, levels = c(least_imp, most_imp))) |&gt; \n  left_join(changes)\n# =============================================================================#\n# Options & Visualization Parameters--------------------------------------------\n# =============================================================================#\n\n# Load fonts\n# Font for titles\nfont_add_google(\"Racing Sans One\",\n  family = \"title_font\"\n) \n\n# Font for the caption\nfont_add_google(\"Saira Extra Condensed\",\n  family = \"caption_font\"\n) \n\n# Font for plot text\nfont_add_google(\"Jockey One\",\n  family = \"body_font\"\n) \n\nshowtext_auto()\n\n# Define colours\nreds &lt;- paletteer::paletteer_d(\"RColorBrewer::Reds\", direction = -1)[1:nos]\ngreens &lt;- paletteer::paletteer_d(\"RColorBrewer::Greens\", direction = -1)[1:nos]\nmypal &lt;- c(reds, greens)\n\n\nbg_col &lt;- \"#ffffff\"   # Background Colour\ntext_col &lt;- \"#404040\" # Colour for the text\ntext_hil &lt;- '#757575' # Colour for highlighted text\n\n# Define Text Size\nts &lt;- unit(20, units = \"cm\") # Text Size\n\n# Caption stuff\nsysfonts::font_add(\n  family = \"Font Awesome 6 Brands\",\n  regular = here::here(\"docs\", \"Font Awesome 6 Brands-Regular-400.otf\")\n)\ngithub &lt;- \"&#xf09b\"\ngithub_username &lt;- \"aditya-dahiya\"\nxtwitter &lt;- \"&#xe61b\"\nxtwitter_username &lt;- \"@adityadahiyaias\"\nsocial_caption_1 &lt;- glue::glue(\"&lt;span style='font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{github};&lt;/span&gt; &lt;span style='color: {text_hil}'&gt;{github_username}  &lt;/span&gt;\")\nsocial_caption_2 &lt;- glue::glue(\"&lt;span style='font-family:\\\"Font Awesome 6 Brands\\\";'&gt;{xtwitter};&lt;/span&gt; &lt;span style='color: {text_hil}'&gt;{xtwitter_username}&lt;/span&gt;\")\n\n\n# Add text to plot--------------------------------------------------------------\nplot_title &lt;- \"Human Development Index\\n(Changes: 1990 - 2022)\"\nplot_caption &lt;- paste0(\"**Data:** UNDP Human Development Reports\", \" | \", \" **Code:** \", social_caption_1, \" | \", \" **Graphics:** \", social_caption_2)\nsubtitle_text &lt;- \"Since the 1990s, HDI has been used for gauging development. While most nations have seen an enhancement in living standards, the pace of improvement varies. This graph illustrates both the top and bottom performers (% change from 1990 to 2022 in brackets).\"\nplot_subtitle &lt;- str_wrap(subtitle_text, 90)\n\n# ==============================================================================#\n# Data Visualization------------------------------------------------------------\n# ==============================================================================#\n\nstrip_text &lt;- c(\n  \"&lt;b style='color:#CB181DFF'&gt;Least Improvement&lt;/b&gt;\", \n  \"&lt;b style='color:#006D2CFF'&gt;Highest improvement&lt;/b&gt;\"\n  )\nnames(strip_text) &lt;- c(\"least_improved\", \"most_improved\")\n\ng &lt;- plotdf |&gt; \n  ggplot(\n    aes(\n      x = year,\n      y = value,\n      group = country,\n      color = colour_var,\n      alpha = is.na(colour_var),\n      linewidth = is.na(colour_var)\n    )\n  ) +\n  geom_line() +\n  ggrepel::geom_text_repel(\n    data = (plotdf |&gt; filter(year == 2022)),\n    mapping = aes(\n      label = if_else(\n        !is.na(colour_var),\n        paste0(colour_var, \"\\n\", improvement, \" %\"),\n        NA\n      )\n    ),\n    force        = 10,\n    nudge_x      = 2.5,\n    direction    = \"y\",\n    hjust        = 0,\n    segment.size = 0.2,\n    size = 30,\n    lineheight = 0.25,\n    family = \"caption_font\",\n    fontface = \"bold\",\n    box.padding = 0\n  ) +\n  facet_wrap(\n    ~ facet_var,\n    labeller = labeller(facet_var = strip_text)\n  ) +\n  scale_x_continuous(\n    expand = expansion(c(0, 0.35)),\n    breaks = seq(1990, 2022, 8)\n  ) +\n  scale_y_continuous(\n    expand = expansion(0)\n  ) +\n  scale_alpha_discrete(range = c(1, 0.5)) +\n  scale_linewidth_discrete(range = c(2, 0.5)) +\n  scale_colour_manual(\n    values = mypal,\n    na.value = \"lightgrey\"\n  ) +\n  labs(\n    title = plot_title,\n    subtitle = plot_subtitle,\n    caption = plot_caption,\n    x = NULL,\n    y = \"H.D.I  (Human Development Index)\"\n  ) +\n  theme_minimal(\n     base_family = \"body_font\"\n  ) +\n  theme(\n    legend.position = \"none\",\n    panel.grid.minor = element_blank(),\n    panel.grid.major.y = element_line(\n      linewidth = 0.5,\n      colour = \"transparent\"\n    ),\n    panel.grid.major.x = element_line(\n      linewidth = 0.5,\n      linetype = 2,\n      colour = text_hil\n    ),\n    axis.line.x = element_line(\n      colour = text_hil,\n      linewidth = 0.5\n    ),\n    axis.line.y = element_line(\n      colour = text_hil,\n      linewidth = 0.5,\n      arrow = arrow(length = unit(0.4, \"cm\"))\n    ),\n    plot.title.position = \"plot\",\n    plot.title = element_text(\n      colour = text_hil,\n      hjust = 0.5,\n      family = \"title_font\",\n      size = 12 * ts,\n      margin = margin(2,0,0.25,0, \"cm\"),\n      lineheight = 0.25\n    ),\n    plot.subtitle = element_text(\n      hjust = 0.5,\n      lineheight = 0.3,\n      colour = text_hil,\n      size = 5 * ts,\n      margin = margin(0,0,1,0, \"cm\")\n    ),\n    axis.text = element_text(\n      colour = text_col,\n      hjust = 0.5,\n      margin = margin(0,0,0,0),\n      size = 4 * ts\n    ),\n    axis.title = element_text(\n      colour = text_col,\n      hjust = 0.5,\n      margin = margin(0,0,0,0),\n      size = 4 * ts\n    ),\n    plot.caption = element_textbox(\n      family = \"caption_font\",\n      colour = text_hil,\n      size = 3 * ts,\n      hjust = 0.5,\n      margin = margin(0.5,0,0.8,0, \"cm\")\n    ),\n    strip.text = element_markdown(\n      family = \"body_font\",\n      size = 7 * ts,\n      margin = margin(0,0,0.5,0, \"cm\")\n    )\n  )\n\n\n# =============================================================================#\n# Image Saving-----------------------------------------------------------------\n# =============================================================================#\n\nggsave(\n  filename = here::here(\"docs\", \"dip_hdi.png\"),\n  plot = g,\n  width = 40,\n  height = 45,\n  units = \"cm\",\n  bg = bg_col\n)\n\n\n\n\n\n\n\nFigure 3: Heavily customized theme elements using element_text(), element_line() and element_rect()",
    "crumbs": [
      "Home",
      "The Grammer",
      "Chapter 17"
    ]
  },
  {
    "objectID": "Chapter17.html#theme-elements",
    "href": "Chapter17.html#theme-elements",
    "title": "Chapter 17",
    "section": "17.4 Theme elements",
    "text": "17.4 Theme elements\n17.4.6 Exercises\nQuestion 1\nCreate the ugliest plot possible! (Contributed by Andrew D. Steen, University of Tennessee - Knoxville)\nThe example plot, one of the ugliest one can think of, is shown in Figure 4\n\nCode# Load necessary libraries\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Load mtcars dataset\ndata(mtcars)\n\n# Create an intentionally ugly plot\nggplot(mtcars, aes(x = wt, y = mpg)) +\n  geom_point(color = \"red\", size = 5, shape = 18) +\n  geom_smooth(method = \"lm\", color = \"blue\", fill = \"green\", alpha = 0.3, size = 2) +\n  scale_x_continuous(\"Car Weight (1000 lbs)\", breaks = seq(0, 6, by = 1), labels = c(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\")) +\n  scale_y_continuous(\"Miles/(US) gallon\", breaks = seq(10, 35, by = 5), labels = c(\"10\", \"15\", \"20\", \"25\", \"30\", \"35\")) +\n  theme_minimal(base_family = \"Comic Sans MS\", base_size = 20) +\n  theme(panel.background = element_rect(fill = \"black\"),\n        panel.grid.major = element_line(color = \"purple\", size = 1.5),\n        panel.grid.minor = element_line(color = \"orange\", size = 0.5),\n        axis.line = element_line(color = \"yellow\", size = 2),\n        axis.title = element_text(color = \"red\", size = 30, face = \"bold\"),\n        axis.text = element_text(color = \"blue\", size = 25, angle = 45, hjust = 1, vjust = 1),\n        axis.ticks = element_line(color = \"green\", size = 1.5),\n        plot.title = element_text(color = \"brown\", size = 40, face = \"italic\", hjust = 0.5),\n        plot.subtitle = element_text(color = \"magenta\", size = 30, face = \"bold\", hjust = 0.5),\n        plot.caption = element_text(color = \"cyan\", size = 20, face = \"italic\", hjust = 1),\n        legend.title = element_text(color = \"orange\", size = 20, face = \"bold\"),\n        legend.text = element_text(color = \"purple\", size = 15),\n        legend.background = element_rect(fill = \"yellow\", color = \"green\", size = 1.5),\n        legend.key = element_rect(fill = \"blue\", color = \"red\", size = 2),\n        legend.position = \"bottom\",\n        legend.direction = \"vertical\",\n        legend.box = \"vertical\",\n        legend.key.size = unit(2, \"cm\"),\n        plot.background = element_rect(fill = \"grey\"))\n\n\n\n\n\n\nFigure 4: The ugliest possible plot! Everything is too bright and out of order!\n\n\n\n\nQuestion 2\ntheme_dark() makes the inside of the plot dark, but not the outside. Change the plot background to black, and then update the text settings so you can still read the labels.\n\nCodeg1 &lt;- ggplot(mtcars, aes(hp, mpg)) +\n  geom_point() +\n  labs(\n    subtitle = \"Miles per gallon vs. Horsepower for cars in 'mtcars' dataset\",\n    x = \"Engine Horsepower (hp)\",\n    y = \"Miles per gallon\"\n    )\n\ng1 + ggtitle(\"The Base Plot\")\n\ng1 + ggtitle(\"The theme_dark() plot\") + theme_dark()\n\ng1 + ggtitle(\"Completely black plot background\") +\n  theme_dark() +\n  theme(\n    plot.background = element_rect(fill = \"black\", colour = \"black\"),\n    plot.title = element_text(colour = \"white\", face = \"bold\"),\n    plot.subtitle = element_text(colour = \"white\"),\n    axis.title = element_text(colour = \"white\"),\n    axis.text = element_text(colour = \"white\"),\n    axis.ticks = element_line(colour = \"grey50\"),\n    panel.grid = element_line(colour = \"grey20\")\n  )\n\n\n\n\n\n\n\n\n(a) The base plot\n\n\n\n\n\n\n\n\n\n(b) theme_dark() plot\n\n\n\n\n\n\n\n\n\n(c) Completely black plot background and text colour adjustments\n\n\n\n\n\nFigure 5: Customizing the theme_black()\n\n\n\nQuestion 3\nMake an elegant theme that uses “linen” as the background colour and a serif font for the text.\n\nCodelibrary(showtext)\nfont_add_google(\"Marcellus\", \"serif_font\")\nshowtext_auto()\ng1 +\n  ggtitle(\"A nice serif font and linen background for the plot\") +\n  theme_clean(base_family = \"serif_font\", base_size = 18) +\n  theme(\n    plot.background = element_rect(fill = \"linen\"),\n    plot.title = element_text(face = \"bold\", size = 27)\n  )\n\n\n\n\n\n\nFigure 6: Using linen as plot background and a serif font\n\n\n\n\nQuestion 4\nSystematically explore the effects of hjust when you have a multi-line title. Why doesn’t vjust do anything?\nIn ggplot2, the hjust and vjust parameters control the horizontal and vertical alignment of text, respectively. However, when you have a multi-line title, the vjust parameter doesn’t seem to have any noticeable effect. This is because ggplot2 calculates the vertical positioning of multi-line text differently from single-line text.\nWhen you specify a multi-line title, ggplot2 automatically adjusts the vertical alignment of the text to center it within the available space. This behavior overrides the vjust parameter. Instead, ggplot2 focuses on aligning the entire multi-line text block within the plot title area.\nOn the other hand, the hjust parameter still has a significant impact when you have a multi-line title. It controls the horizontal alignment of the entire text block, shifting it left or right within the title area.\nTo systematically explore the effects of hjust with a multi-line title in ggplot2, here’s an example code snippet to illustrate this:\nCode# Create a basic plot with a multi-line title\np &lt;- ggplot(mtcars, aes(x = wt, y = mpg)) +\n  geom_point() +\n  theme_clean(base_size = 16)\n\n# Create a list of hjust values to explore\nhjust_values &lt;- seq(0, 1, by = 0.2)\n\nfor (i in hjust_values) {\n  pp &lt;- p + \n  theme(\n    plot.title = element_text(hjust = i)) +\n    labs(title = glue::glue(\"Effect of hjust with multi-line\\ntitle. [hjust = {i}]\"))\n  \n  print(pp)\n}\n\n\n\n\n\n\n\n\n\n(a) hjust = 0\n\n\n\n\n\n\n\n\n\n(b) hjust = 0.2\n\n\n\n\n\n\n\n\n\n\n\n(c) hjust = 0.4\n\n\n\n\n\n\n\n\n\n(d) hjust = 0.6\n\n\n\n\n\n\n\n\n\n\n\n(e) hjust = 0.8\n\n\n\n\n\n\n\n\n\n(f) hjust = 1\n\n\n\n\n\n\nFigure 7: The impact of hjsut on multi-line title in ggplot2",
    "crumbs": [
      "Home",
      "The Grammer",
      "Chapter 17"
    ]
  },
  {
    "objectID": "Chapter17.html#saving-your-output",
    "href": "Chapter17.html#saving-your-output",
    "title": "Chapter 17",
    "section": "17.5 Saving your output",
    "text": "17.5 Saving your output\nThe code snippet used to produce Figure 3 demonstrates the use of ggsave() function to save images.",
    "crumbs": [
      "Home",
      "The Grammer",
      "Chapter 17"
    ]
  },
  {
    "objectID": "Chapter18.html#exercises",
    "href": "Chapter18.html#exercises",
    "title": "Chapter 18",
    "section": "18.2.1 Exercises",
    "text": "18.2.1 Exercises\nQuestion 1\nCreate an object that represents a pink histogram with 100 bins.\nIn the following code, pink_hist is an object that represents a pink histogram with 100 bins. This object can be added to any ggplot() function call.\n\npink_hist &lt;- geom_histogram(\n    bins = 100,\n    colour = \"#5A0020\",\n    fill = \"pink\",\n    linewidth = 0.5\n  )\n\nWe can use this object pink_hist in the following way to produce Figure 1\n\nCodedf &lt;- tibble(\n  x = rnorm(n = 1000, mean = 50, sd = 10),\n  y = x %/% 10\n  )\n\ndf |&gt; \n  ggplot(aes(x)) +\n  theme_cowplot() +\n  pink_hist\n\n\n\n\n\n\nFigure 1: An object that represents a pink histogram with 100 bins\n\n\n\n\nQuestion 2\nCreate an object that represents a fill scale with the Blues ColorBrewer palette.\nThe object blues_fill represents a scale using ColorBrewer palette “Blues”, which is a discrete palette of 9 different colours.\n\nblues_fill &lt;- scale_fill_brewer(palette = \"Blues\")\n\nThe Figure 2 uses the blues_fill to generate a colored histogram.\n\nCodeggplot(df, aes(x, fill = as_factor(y), group = y)) +\n  geom_histogram(bins = 100) +\n  theme_clean() +\n  theme(legend.position = \"none\") +\n  blues_fill\n\n\n\n\n\n\nFigure 2\n\n\n\n\nQuestion 3\nRead the source code for theme_grey(). What are its arguments? How does it work?\nThe theme_grey() is a function that sets the visual theme for a ggplot object to a grey background with white gridlines. Here’s a summary of its arguments and how it works. Internally, its code creates a theme object t , which it then adds to a ggplot2 plot to generate the desired default theme plot. The folded code shows the actual source code and the table below shows the purpose of each argument: —\n\nCodetheme(\n  line = element_line(\n    colour = \"black\", \n    linewidth = base_line_size, \n    linetype = 1, \n    lineend = \"butt\"\n    ), \n  rect = element_rect(\n    fill = \"white\", \n    colour = \"black\", \n    linewidth = base_rect_size, \n    linetype = 1\n    ), \n  text = element_text(\n    family = base_family, \n    face = \"plain\", \n    colour = \"black\", \n    size = base_size, \n    lineheight = 0.9, \n    hjust = 0.5, \n    vjust = 0.5, \n    angle = 0, \n    margin = margin(), \n    debug = FALSE), \n  axis.line = element_blank(), \n  axis.line.x = NULL, \n  axis.line.y = NULL, \n  axis.text = element_text(\n    size = rel(0.8),\n    colour = \"grey30\"), \n  axis.text.x = element_text(\n    margin = margin(t = 0.8 * half_line/2), \n    vjust = 1\n    ), \n  axis.text.x.top = element_text(\n    margin = margin(b = 0.8 * half_line/2), \n    vjust = 0\n    ), \n  axis.text.y = element_text(\n    margin = margin(r = 0.8 * half_line/2), \n    hjust = 1\n    ), \n  axis.text.y.right = element_text(\n    margin = margin(l = 0.8 * half_line/2), \n    hjust = 0\n    ), \n  axis.text.r = element_text(\n    margin = margin(l = 0.8 * half_line/2, r = 0.8 * half_line/2),\n    hjust = 0.5),\n  axis.ticks = element_line(colour = \"grey20\"), \n  axis.ticks.length = unit(half_line/2, \"pt\"), \n  axis.ticks.length.x = NULL, \n  axis.ticks.length.x.top = NULL, \n  axis.ticks.length.x.bottom = NULL, \n  axis.ticks.length.y = NULL, \n  axis.ticks.length.y.left = NULL, \n  axis.ticks.length.y.right = NULL, \n  axis.minor.ticks.length = rel(0.75), \n  axis.title.x = element_text(\n    margin = margin(t = half_line/2), \n    vjust = 1), \n  axis.title.x.top = element_text(\n    margin = margin(b = half_line/2), \n    vjust = 0\n    ), \n  axis.title.y = element_text(\n    angle = 90,\n    margin = margin(r = half_line/2), \n    vjust = 1\n    ), \n  axis.title.y.right = element_text(\n    angle = -90,\n    margin = margin(l = half_line/2), \n    vjust = 1\n    ), \n  legend.background = element_rect(colour = NA), \n  legend.spacing = unit(2 * half_line, \"pt\"), \n  legend.spacing.x = NULL, \n  legend.spacing.y = NULL, \n  legend.margin = margin(\n    half_line, \n    half_line, \n    half_line, \n    half_line), \n  legend.key = NULL,\n  legend.key.size = unit(1.2, \"lines\"), \n  legend.key.height = NULL, \n  legend.key.width = NULL, \n  legend.key.spacing = unit(half_line, \"pt\"), \n  legend.text = element_text(size = rel(0.8)), \n  legend.title = element_text(hjust = 0), \n  legend.ticks.length = rel(0.2), \n  legend.position = \"right\", \n  legend.direction = NULL, \n  legend.justification = \"center\", \n  legend.box = NULL, \n  legend.box.margin = margin(0, 0, 0, 0, \"cm\"), \n  legend.box.background = element_blank(), \n  legend.box.spacing = unit(2 * half_line, \"pt\"), \n  panel.background = element_rect(fill = \"grey92\", colour = NA), \n  panel.border = element_blank(), \n  panel.grid = element_line(colour = \"white\"), \n  panel.grid.minor = element_line(linewidth = rel(0.5)), \n  panel.spacing = unit(half_line, \"pt\"), panel.spacing.x = NULL, \n  panel.spacing.y = NULL, \n  panel.ontop = FALSE, \n  strip.background = element_rect(fill = \"grey85\", colour = NA), \n  strip.clip = \"inherit\", \n  strip.text = element_text(\n    colour = \"grey10\", \n    size = rel(0.8), \n    margin = margin(\n      0.8 * half_line, \n      0.8 * half_line, \n      0.8 * half_line, \n      0.8 * half_line)\n    ), \n  strip.text.x = NULL, \n  strip.text.y = element_text(angle = -90), \n  strip.text.y.left = element_text(angle = 90), \n  strip.placement = \"inside\",\n  strip.placement.x = NULL, \n  strip.placement.y = NULL, \n  strip.switch.pad.grid = unit(half_line/2, \"pt\"), \n  strip.switch.pad.wrap = unit(half_line/2, \"pt\"), \n  plot.background = element_rect(fill = \"white\"), \n  plot.title = element_text(\n    size = rel(1.2), \n    hjust = 0, \n    vjust = 1, \n    margin = margin(b = half_line)\n    ), \n  plot.title.position = \"panel\",\n  plot.subtitle = element_text(\n    hjust = 0, \n    vjust = 1, \n    margin = margin(b = half_line)\n    ), \n  plot.caption = element_text(\n    size = rel(0.8), \n    hjust = 1,\n    vjust = 1, \n    margin = margin(t = half_line)\n    ), \n  plot.caption.position = \"panel\",\n  plot.tag = element_text(\n    size = rel(1.2),\n    hjust = 0.5, \n    vjust = 0.5\n    ), \n  plot.tag.position = \"topleft\", \n  plot.margin = margin(\n    half_line, \n    half_line, \n    half_line, \n    half_line\n    ), \n  complete = TRUE\n  )\n\n\nArguments and their purpose:\n\n\n\n\n\n\nArgument to base theme() call\nMeaning and Purpose\n\n\n\nline = element_line(colour = \"black\", linewidth = base_line_size, linetype = 1, lineend = \"butt\")\nSpecifies the appearance of lines in the plot, setting the color to black, the line width to the base line size, the line type to solid, and the line end style to “butt”.\n\n\nrect = element_rect(fill = \"white\", colour = \"black\", linewidth = base_rect_size, linetype = 1)\nSets the appearance of rectangles in the plot, defining the fill color as white, the border color as black, the border width as the base rectangle size, and the border line type as solid.\n\n\ntext = element_text(family = base_family, face = \"plain\", colour = \"black\", size = base_size, lineheight = 0.9, hjust = 0.5, vjust = 0.5, angle = 0, margin = margin(), debug = FALSE)\nDefines the appearance of text in the plot, specifying the font family, face, color, size, line height, horizontal and vertical justification, angle, margin, and debug options.\n\n\naxis.line = element_blank()\nRemoves the axis lines from the plot.\n\n\naxis.line.x = NULL\nNo horizontal axis line is specified.\n\n\naxis.line.y = NULL\nNo vertical axis line is specified.\n\n\naxis.text = element_text(size = rel(0.8), colour = \"grey30\")\nSets the appearance of axis text, defining the size relative to the base size and the color as grey30.\n\n\naxis.text.x = element_text(margin = margin(t = 0.8 * half_line/2), vjust = 1)\nSpecifies the appearance of horizontal axis text, setting the margin and vertical justification.\n\n\naxis.text.x.top = element_text(margin = margin(b = 0.8 * half_line/2), vjust = 0)\nSpecifies the appearance of top horizontal axis text, setting the margin and vertical justification.\n\n\naxis.text.y = element_text(margin = margin(r = 0.8 * half_line/2), hjust = 1)\nDefines the appearance of vertical axis text, setting the margin and horizontal justification.\n\n\naxis.text.y.right = element_text(margin = margin(l = 0.8 * half_line/2), hjust = 0)\nSpecifies the appearance of right vertical axis text, setting the margin and horizontal justification.\n\n\naxis.text.r = element_text(margin = margin(l = 0.8 * half_line/2, r = 0.8 * half_line/2), hjust = 0.5)\nDefines the appearance of reverse vertical axis text, setting the margin and horizontal justification.\n\n\naxis.ticks = element_line(colour = \"grey20\")\nSets the appearance of axis ticks, defining the color as grey20.\n\n\naxis.ticks.length = unit(half_line/2, \"pt\")\nSpecifies the length of axis ticks as half the line size.\n\n\naxis.minor.ticks.length = rel(0.75)\nSets the length of minor axis ticks relative to the base size.\n\n\naxis.title.x = element_text(margin = margin(t = half_line/2), vjust = 1)\nDefines the appearance of horizontal axis title, setting the margin and vertical justification.\n\n\naxis.title.x.top = element_text(margin = margin(b = half_line/2), vjust = 0)\nSpecifies the appearance of top horizontal axis title, setting the margin and vertical justification.\n\n\naxis.title.y = element_text(angle = 90, margin = margin(r = half_line/2), vjust = 1)\nSets the appearance of vertical axis title, defining the angle, margin, and vertical justification.\n\n\naxis.title.y.right = element_text(angle = -90, margin = margin(l = half_line/2), vjust = 1)\nSpecifies the appearance of right vertical axis title, defining the angle, margin, and vertical justification.\n\n\nlegend.background = element_rect(color = NA)\nSets the legend background appearance with no border color.\n\n\nlegend.spacing = unit(2 * half_line, \"pt\")\nSpecifies the spacing between legend elements as twice the line size.\n\n\nlegend.margin = margin(half_line, half_line, half_line, half_line)\nSets the margin around the legend.\n\n\npanel.background = element_rect(fill = \"grey92\", colour = NA)\nDefines the appearance of the panel background, setting the fill color as grey92 and removing the border color.\n\n\npanel.grid = element_line(colour = \"white\")\nSpecifies the appearance of panel grid lines, setting the color to white.\n\n\npanel.grid.minor = element_line(linewidth = rel(0.5))\nSets the appearance of minor panel grid lines, defining the line width relative to the base size.\n\n\npanel.spacing = unit(half_line, \"pt\")\nSpecifies the spacing between panels as the half line size.\n\n\nstrip.background = element_rect(fill = \"grey85\", colour = NA)\nSets the appearance of strip background, defining the fill color as grey85 and removing the border color.\n\n\nstrip.text = element_text(colour = \"grey10\", size = rel(0.8), margin = margin(0.8 * half_line, 0.8 * half_line, 0.8 * half_line, 0.8 * half_line))\nDefines the appearance of strip text, setting the color, size, and margin.\n\n\nstrip.text.y = element_text(angle = -90)\nSpecifies the appearance of vertical strip text, defining the angle.\n\n\nstrip.text.y.left = element_text(angle = 90)\nSets the appearance of left vertical strip text, defining the angle.\n\n\nplot.background = element_rect(colour = \"white\")\nDefines the appearance of plot background, setting the border color as white.\n\n\nplot.title = element_text(size = rel(1.2), hjust = 0, vjust = 1, margin = margin(b = half_line))\nSpecifies the appearance of plot title, setting the size, horizontal and vertical justification, and margin.\n\n\nplot.subtitle = element_text(hjust = 0, vjust = 1, margin = margin(b = half_line))\nSets the appearance of plot subtitle, defining the horizontal and vertical justification, and margin.\n\n\nplot.caption = element_text(size = rel(0.8), hjust = 1, vjust = 1, margin = margin(t = half_line))\nDefines the appearance of plot caption, setting the size, horizontal and vertical justification, and margin.\n\n\nplot.tag = element_text(size = rel(1.2), hjust = 0.5, vjust = 0.5)\nSpecifies the appearance of plot tag, setting the size, horizontal and vertical justification.\n\n\nplot.margin = margin(half_line, half_line, half_line, half_line)\nSets the margin around the plot.\n\n\n\nHow it works:\ntheme_grey() creates a set of nice, elegant and default theme settings for ggplot objects that use a grey background with white gridlines. It sets the base sizes, colors, and shapes for various plot elements such as text, lines, rectangles, and points. It also allows customization of line end styles, line join styles, and line mitre limits.\nThe function returns a theme object that can be applied to ggplot objects using the theme() function. When applied, this theme modifies the visual appearance of the plot elements according to the settings specified in theme_grey().\nQuestion 4\nCreate scale_colour_wesanderson(). It should have a parameter to pick the palette from the wesanderson package, and create either a continuous or discrete scale.\nThe following code creates a scale_colour_wesanderson() and scale_fill_wesanderson() functions for this purpose.\n\nscale_colour_wesanderson &lt;- function(palette, type = \"continuous\", ...) {\n  if (type == \"continuous\") {\n    return(\n      scale_colour_gradientn(\n        colours = wesanderson::wes_palette(palette),\n        ...\n      )\n    )\n  } else if (type == \"discrete\") {\n    return(\n      scale_colour_manual(\n        values = wesanderson::wes_palette(palette),\n        ...\n      )\n    )\n  } else {\n    stop(\"Unsupported scale type. Use 'continuous' or 'discrete'.\")\n  }\n}\n\n\nscale_fill_wesanderson &lt;- function(palette, type = \"continuous\", ...) {\n  if (type == \"continuous\") {\n    return(\n      scale_fill_gradientn(\n        colours = wesanderson::wes_palette(palette),\n        ...\n      )\n    )\n  } else if (type == \"discrete\") {\n    return(\n      scale_fill_manual(\n        values = wesanderson::wes_palette(palette),\n        ...\n      )\n    )\n  } else {\n    stop(\"Unsupported scale type. Use 'continuous' or 'discrete'.\")\n  }\n}\n\nThe Figure 3 (b) demonstrates the use of this scale_fill_wesanderson() function using a dataset heatmap from {wesanderson} package itself. (Ram and Wickham 2023).\n\nCodeq4_1 &lt;- wesanderson::heatmap |&gt; \n  ggplot(aes(Var1, Var2, fill = value)) +\n  geom_tile(color = \"white\") +\n  theme_void()\n\nq4_1\nq4_1 +\n  scale_fill_wesanderson(\n    palette = \"Zissou1\",\n    type = \"continuous\"\n    )\n\n\n\n\n\n\n\n\n(a) Base plot\n\n\n\n\n\n\n\n\n\n(b) Upon adding scale_fill_wesanderson() to base plot\n\n\n\n\n\nFigure 3: Demonstrating the use of our custom created function scale_fill_wesanderson()",
    "crumbs": [
      "Home",
      "Advanced Topics",
      "Chapter 18"
    ]
  }
]