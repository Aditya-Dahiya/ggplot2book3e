---
title: "Chapter 15"
subtitle: "Coordinate Systems"
author: "Aditya Dahiya"
date: "2024-03-04"
format: 
  html: 
    code-fold: true
    code-copy: hover
    code-link: true
execute: 
  echo: true
  warning: false
  error: false
filters:
  - social-share
share:
  permalink: "https://aditya-dahiya.github.io/ggplot2book3e/Chapter15.html"
  description: "Solutions Manual (and Beyond) for ggplot2: Elegant Graphics for Data Analysis (3e)"
  twitter: true
  facebook: true
  linkedin: true
  email: true
  mastodon: true
editor_options: 
  chunk_output_type: console
bibliography: references.bib
---

::: {.callout-note appearance="minimal"}
This chapter has no exercises, so I use a dummy dataset to generate some examples of the functions and ggplot2 customization of coordinates discussed in this chapter.
:::

```{r}
#| label: setup

library(tidyverse)
library(scales)
library(gt)
library(gtExtras)
```

To begin with, lets create a dummy data set shown in @fig-tb

```{r}
#| label: fig-tb
#| fig-cap: "A dummy dataset to use in the examples for this Chapters' Solutions / Examples"

set.seed(123)
tb <- tibble(
  v_integer = 1:20,
  v_squared = v_integer ^ 2,
  v_regress = round(
    (v_integer ^ 2) + 
      rnorm(
        20, mean = 0, sd = 1), 
    2),
  v_random = sample(1:100, 20, replace = FALSE),
  v_discrete = sample(LETTERS[1:4], 20, replace = TRUE)
)
tb |> 
  gt() |> 
  cols_align("center") |> 
  gt_theme_538()
```

## 15.1 Linear coordinate systems

Let's use the example plot in @fig-sec15 to demonstrate the various changes / customization possible with ggplot2 with coordinates.

```{r}
#| label: fig-sec15
#| fig-cap: "An example plot which we will later use in various examples of tweaking the Linear Coordinate Systems"

g1 <- tb |>
  ggplot(
    aes(
      x = v_integer,
      y = v_regress
    )
  ) +
  geom_smooth(
    se = TRUE,
    colour = "grey",
    fill = "lightgrey",
    alpha = 0.5
  ) +
  geom_point(
    aes(colour = v_discrete),
    size = 3
  ) +
  scale_colour_brewer(palette = "Dark2") +
  theme_minimal() +
  theme(axis.line = element_line(arrow = arrow()))
g1
```

### 15.1.1 Zooming into a plot with `coord_cartesian()`

The @fig-zoom shows an example of zooming into a plot with `coord_cartesian()` and its difference from the other option using `scale_*_continuous(limits = *)` .

```{r}
#| label: fig-zoom
#| fig-cap: "Zooming in on a specified portion of Y-Axis: 100 to 200"
#| fig-subcap: 
#|   - "Base Plot"
#|   - "Limits argument in scale_y_continuous()"
#|   - "ylim argument in coord_cartesian()"

g1 +
  labs(title = "The Base Plot shows entire data")

g1 + scale_y_continuous(limits = c(100, 200)) +
  labs(title = "Using limits in scale_y_continuous() eliminates\nall data out of limits")

g1 + coord_cartesian(ylim = c(100, 200)) +
  labs(title = "Using ylim in coord_cartesian() simply zooms-in,\nand preserves out-of-limits data")


```

### 15.1.2 Flipping the axes with `coord_flip()`

The @fig-flip shows examples of flipping the coordinates, and reasoning as to why it may be better than changing X-axis and Y-axis variables manually, especially if we are using `geom_smooth()` which uses `y ~ x` formula by default.

```{r}
#| label: fig-flip
#| fig-cap: "Demonstrating the use of coord_flip()"
#| fig-subcap: 
#|   - "The base plot"
#|   - "Smoother line still follows v_regress ~ v_integer formula"
#|   - "Smoother line now follows v_integer ~ v_regress formula"

g1 + labs(title = "The base plot",
                subtitle = "Dependent variable is v_regress, and independent var is v_integer")

g1 + 
  coord_flip() +
  labs(title = "coord_flip()",
       subtitle = "Smoother line still follows v_regress ~ v_integer formula")

tb |>
  ggplot(
    aes(
      y = v_integer,
      x = v_regress
    )
  ) +
  geom_smooth(
    se = TRUE,
    colour = "grey",
    fill = "lightgrey",
    alpha = 0.5
  ) +
  geom_point(
    aes(colour = v_discrete),
    size = 3
  ) +
  scale_color_brewer(palette = "Dark2") +
  theme_minimal() +
  theme(axis.line = element_line(arrow = arrow())) + 
  labs(title = "Exchanging x and y variable",
       subtitle = "Smoother line now follows v_integer ~ v_regress formula")
```

### 15.1.3 Equal scales with `coord_fixed()`

The @fig-coordfixed shows the same three graphs above, but in a much better sense now that coordinates are fixed to be equal.

```{r}
#| label: fig-coordfixed
#| fig-cap: "Demonstrating the use of coord_fixed()"
#| fig-subcap: 
#|   - "The base plot"
#|   - "The base plot with fixed coordinates"
#| layout-ncol: 2

g1 + labs(title = "The base plot")

g1 + coord_fixed() + labs(title = "The base plot with coord_fixed()")

```
