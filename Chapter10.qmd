---
title: "Chapter 10"
subtitle: "Position Scales and axes"
author: "Aditya Dahiya"
date: "2023-12-23"
format: 
  html: 
    code-fold: true
    code-copy: hover
    code-link: true
execute: 
  echo: true
  warning: false
  error: false
  cache: true
filters:
  - social-share
share:
  permalink: "https://aditya-dahiya.github.io/ggplot2book3e/Chapter10.html"
  description: "Solutions Manual (and Beyond) for ggplot2: Elegant Graphics for Data Analysis (3e)"
  twitter: true
  facebook: true
  linkedin: true
  email: true
  mastodon: true
editor_options: 
  chunk_output_type: console
bibliography: references.bib
---

::: {.callout-note appearance="minimal"}
This Chapter has no exercises to solve, so we use [#TidyTuesday](https://github.com/rfordatascience/tidytuesday/tree/master) webpage's [data-set](https://github.com/rfordatascience/tidytuesday/blob/master/data/2023/2023-12-26/readme.md) on R Package Structure (from the paper [Historical Trends in R Package Structure and Interdependency on CRAN](#0) by [Mark Padgham](https://mpadge.github.io/#) and [Noam Ross](https://www.noamross.net/#connect)) to explore and customize Position Scales and axes.
:::

## Libraries and Data

```{r}
#| label: setup
#| warning: false
#| error: false
#| message: false

library(tidyverse)     # Data wrangling and plotting
library(ggthemes)      # ggplot2 themes
library(patchwork)     # Composing multiple plots
library(ggiraph)       # Interactive ggplot2 graphs
library(ggstream)      # Stream graphs in R
library(paletteer)     # Huge color palettes aggregator
library(scales)        # Scales for plots
library(gganimate)     # Animations


# Loading Data
url <- 'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-12-26/cran_20221122.csv'
rpkgstats <- readr::read_csv(url)

# Focussing on number of lines of code (LOC) and files in R directory of packages
df1 <- rpkgstats |> 
  select(package, version, date, files_R, loc_R)
```

## **10.1 Numeric position scales**

### **10.1.1 & 10.1.2: Limits and Zooming in**

```{r}
#| label: fig-lim1
#| fig-cap: "Demonstrating use of ylim(), scale_y_*() and coord_cartesian() to manually control limits of a plot"
#| fig-asp: 0.5
#| fig-width: 10

g1 <- df1 |> 
  ggplot(aes(
    x = date,
    y = loc_R
  )) +
  geom_point(alpha = 0.05) +
  geom_smooth(col = "red") +
  labs(
    y = "Lines of Code in /R directory of the package",
    x = NULL,
    title = "Full plot with no axes limits"
  ) +
  scale_y_continuous(labels = scales::label_number_si()) +
  theme_minimal() +
  theme(plot.title.position = "plot")

g2 <- g1 +
  scale_y_continuous(labels = scales::label_number_si(accuracy = 1),
                     limits = c(0, 2000)) +
  labs(title = "Viewing packages upto 2K LoC",
       y = NULL)

g3 <- g1 +
  scale_y_continuous(labels = scales::label_number_si(accuracy = 1)) +
  coord_cartesian(ylim = c(0, 2000)) +
  labs(title = "Zooming-in upto 2000 LoC",
       y = NULL)


g1 + g2 + g3 +
  plot_annotation(
    title = "Scatter plot of Lines of Code in R-Packages over the years",
    caption = "Year of release or the last update of R package",
    theme = theme(plot.title = element_text(hjust = 0.5,
                                            face = "bold"),
                  plot.caption = element_text(hjust = 0.5))
  )
  
```

### **10.1.3 Visual range expansion**

Exploring number of R packages updated or released over time on CRAN in @fig-exp1, while also demonstrating the use of `scale_y_continuous(expand = expansion(0))` and `scale_x_date(expand = expansion(0))` to remove any extra space between the graph and x-axis labels and y-axis labels.

```{r}
#| label: fig-exp1
#| fig-cap: "Number of R packages released / updated each month"
#| fig-width: 10

df1 |> 
  filter(date < as_date("2022-11-01")) |> 
  mutate(year = year(date),
         month = month(date)) |> 
  group_by(year, month) |> 
  summarize(
    n = n(),
    avg_files = mean(files_R, na.rm = TRUE),
    avg_loc = mean(loc_R, na.rm = TRUE)
  ) |> 
  mutate(time = make_date(year = year, 
                          month = month)) |> 
  ggplot(aes(x = time, 
             y = n)) + 
  geom_point(pch = 1, alpha = 0.5) +
  geom_line(linewidth = 1) + 
  labs(title = "Number of new releases / package updates has risen exponentially",
       subtitle = "Line graph shows new R packages released or updated each month",
       x = "Year", y = "Number of packages or updates released") +
  scale_y_continuous(expand = expansion(0)) +
  scale_x_date(expand = expansion(0)) +
  theme_minimal() +
  theme(
    panel.grid.minor = element_blank(),
    panel.grid.major = element_line(linetype = 2)
  )
```

The best use of `expand = expansion(0)` comes with heat-maps. Here is an example in @fig-hm demonstrating the number of packages of R updated or released each month of the year, since 1999. We've made it interactive using `ggiraph` to make it more appealing to the user.

```{r}
#| label: fig-hm
#| fig-width: 10
#| fig-asp: 0.6
#| fig-cap: "An interactive heat-map for number of R package releases or updates each month"

library(ggiraph)

g1 <- df1 |> 
  mutate(year = year(date),
         month = month(date, label = TRUE, abbr = FALSE)) |> 
  group_by(year, month) |> 
  summarize(
    n = n(),
    avg_files = mean(files_R, na.rm = TRUE),
    avg_loc = mean(loc_R, na.rm = TRUE)
  ) |> 
  ungroup() |> 
  mutate(id = row_number()) |> 
  ggplot(
    aes(x = year, 
        y = month,
        fill = n)) +
  geom_tile_interactive(
    aes(tooltip = paste0(month, " ", year, 
                         "\nPackages released/updated: ", n,
                         "\nAvg. Lines of Code: ", 
                         round(avg_loc, 0)),
        data_id = id),
    hover_nearest = FALSE
  ) +
  scale_fill_gradient2(low = "yellow", 
                       high = "red",
                       trans = "log10") +
  scale_x_continuous(expand = expansion(0)) + 
  scale_y_discrete(expand = expansion(0)) +
  labs(title = "R packages updated or released each month over the years",
       x = NULL, y = NULL,
       fill = "Number of packages") +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    legend.key.width = unit(15, "mm"),
    panel.grid = element_blank(),
    plot.title = element_text(hjust = 0.5,
                              size = 21),
    axis.text = element_text(size = 15),
    legend.title = element_text(vjust = 1, 
                                size = 15)
  )

girafe(
  ggobj = g1,
  options = list(
    opts_hover(css = "stroke:black;stroke-width:1px;")
  ))
```

Now, lets have a look at the average number of Lines of Code in the R packages updated or released each month in an interactive heat-map in @fig-loc . We also can view the trend of average number of lines of code in R packages updated/released over time @fig-loc2, along with a loess smoother trend-line. In the @fig-loc2, note the use of `coord_cartesian(ylim = c(0, 4000))` to zoom-in on the lower part of y-axis without removing values above 4000 from the plot.

```{r}
#| label: fig-loc
#| fig-cap: "An interactive heat-map for average number of Lines of Code in the R packages updated or released during the month"
#| fig-width: 10
#| fig-asp: 0.6

library(ggiraph)

df2 <- df1 |> 
  mutate(year = year(date),
         month = month(date, label = TRUE, abbr = FALSE)) |> 
  group_by(year, month) |> 
  summarize(
    n = n(),
    avg_files = mean(files_R, na.rm = TRUE),
    avg_loc = mean(loc_R, na.rm = TRUE)
  ) |> 
  ungroup() |> 
  mutate(id = row_number())
  
g2 <- df2 |> 
  ggplot(
    aes(x = year, 
        y = month,
        fill = avg_loc)) +
  geom_tile_interactive(
    aes(tooltip = paste0(month, " ", year, 
                         "\nPackages updated/released: ", n,
                         "\nAvg. Lines of Code: ", 
                         round(avg_loc, 0)),
        data_id = id),
    hover_nearest = FALSE
  ) +
  scale_fill_gradient2(low = "white", 
                       high = "blue",
                       trans = "log10",
                       na.value = "white",
                       labels = scales::label_number_si()) +
  scale_x_continuous(expand = expansion(0)) + 
  scale_y_discrete(expand = expansion(0)) +
  labs(title = "Average Number of Lines of Code in updated/released R packages",
       x = NULL, y = NULL,
       fill = "Average number of Lines of Code") +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    legend.key.width = unit(15, "mm"),
    panel.grid = element_blank(),
    plot.title = element_text(hjust = 0.5,
                              size = 15),
    plot.title.position = "plot",
    axis.text = element_text(size = 12),
    legend.title = element_text(vjust = 1, 
                                size = 12)
  )

girafe(
  ggobj = g2,
  options = list(
    opts_hover(css = "stroke:black;stroke-width:1px;")
  ))
```

```{r}
#| label: fig-loc2
#| fig-cap: "A line-graph for average number of Lines of Code in the R packages over time"
#| fig-width: 10
#| fig-asp: 0.5


df2 |> 
  mutate(time = make_date(year = year, 
                          month = month)) |> 
  ggplot(aes(x = time, 
             y = avg_loc)) + 
  geom_smooth(lwd = 1.5,
              alpha = 0.4,
              col = "darkblue",
              fill = "lightblue") +
  geom_line() +
  geom_point(col = "darkblue", 
             fill = "white",
             pch = 1) +
  labs(title = "Average Lines of Code in R package updates or releases",
       subtitle = "Rose slightly in 2000s, declined slight for next 5 years, and rose significantly during 2018-2022",
       x = "Year", 
       y = "Average number of Lines of Code") +
  scale_y_continuous(expand = expansion(0),
                     labels = scales::label_number_si()) +
  scale_x_date(expand = expansion(0),
               labels = scales::label_date_short()) +
  coord_cartesian(ylim = c(0, 4000)) +
  theme_minimal() +
  theme(panel.grid = element_line(linetype = 2))
```

Finally, the @fig-files looks at the average number of files in the R package releases/updates over the years, both as a heat map in @fig-files-1, and as a line graph in @fig-files-2.

```{r}
#| label: fig-files
#| fig-cap: "Using heatmap and line graph to look at Average number of file in the /R directory of the updated / released R packages"
#| fig-subcap: 
#|   - "An interactive heat-map for average number of files in the /R directory of the R packages updated or released during the month"
#|   - "A line-graph for average number of files in the /R directory of the updated or newly released R packages over time"
#| layout-ncol: 1
#| fig-width: 10


g3 <- df2 |> 
  ggplot(
    aes(x = year, 
        y = month,
        fill = avg_files)) +
  geom_tile_interactive(
    aes(tooltip = paste0(month, " ", year, 
                         "\nPackages udpated / released: ", n,
                         "\nAvg. Lines of Code: ", 
                         round(avg_loc, 0),
                         "\nAvg. number of Files in Code: ",
                         avg_files),
        data_id = id),
    hover_nearest = FALSE
  ) +
  scale_fill_gradient2(low = "white", 
                       high = "darkgreen",
                       trans = "log10",
                       na.value = "white",
                       labels = scales::label_number_si()) +
  scale_x_continuous(expand = expansion(0)) + 
  scale_y_discrete(expand = expansion(0)) +
  labs(title = "Average Number of files in /R directory code",
       x = NULL, y = NULL,
       fill = "Average number of Files") +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    legend.key.width = unit(15, "mm"),
    panel.grid = element_blank(),
    plot.title = element_text(hjust = 0.5,
                              size = 15),
    plot.title.position = "plot",
    axis.text = element_text(size = 12),
    legend.title = element_text(vjust = 0.5, 
                                size = 12)
  )

girafe(
  ggobj = g3,
  options = list(
    opts_hover(css = "stroke:black;stroke-width:1px;")
  ))

df2 |> 
  mutate(time = make_date(year = year, 
                          month = month)) |> 
  ggplot(aes(x = time, 
             y = avg_files)) + 
  geom_line(col = "darkgrey") +
  geom_smooth(lwd = 1.5,
              alpha = 0.6,
              col = "darkgreen",
              fill = "#c5fcd1") +
  geom_point(col = "black", 
             fill = "white",
             pch = 1) +
  labs(title = "Average number of files in /R directory of R packages",
       subtitle = "Rose in early 2000s, plateaued till 2018, and then rose again",
       x = "Year", 
       y = "Average Number of files during that month") +
  scale_y_continuous(expand = expansion(0),
                     labels = scales::label_number_si()) +
  scale_x_date(expand = expansion(0),
               labels = scales::label_date_short()) +
  theme_minimal() +
  theme(
    panel.grid.minor = element_blank(),
    panel.grid.major = element_line(linetype = 2)
  )
```

Now, let us explore the kind of licenses used by R package updates or releases over the years. The @fig-license shows the share of different licenses in an interactive stacked bar chart, while @fig-license1 shows different characteristics of packages with these licenses: —

```{r}
#| label: fig-license
#| fig-cap: "Exploring the licenses of R package updates and releases"
#| fig-width: 10
#| fig-asp: 0.6

library(ggiraph)

g4 <- rpkgstats |> 
  mutate(license = as_factor(license)) |> 
  mutate(license = fct_lump_n(license, n = 6)) |> 
  mutate(year = year(date),
         month = month(date)) |> 
  group_by(year, license) |> 
  count() |> 
  group_by(year) |> 
  mutate(prop = n / sum(n),
         yeartotal = sum(n)) |> 
  ungroup() |> 
  mutate(id = row_number()) |> 
  ggplot(aes(x = year,
             y = prop,
             fill = license)) +
  geom_col_interactive(aes(
    tooltip = paste0("Year: ", year,
                     "\nTotal Number of packages: ", yeartotal,
                     "\nPackages with ", license, " License: ", n,
                     "\nPercentage of total: ", round(prop*100, 2), " %"),
    
    data_id = id
    ),
    position = "stack") +
  scale_y_continuous(expand = expansion(0),
                     labels = scales::label_percent()) +
  scale_x_continuous(expand = expansion(0),
                     breaks = seq(1998, 2022, 4)) +
  scale_fill_brewer_interactive(palette = "Set2") +
  labs(y = "% Packages with a particular license",
       x = "Year",
       fill = "License",
       title = "Share of license types in R packages over time",
       subtitle = "Recently, MIT+ and GPL-3 licenses have become popular") +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    axis.line.x = element_line_interactive(),
    legend.text = element_text(hjust = 0),
    panel.grid = element_blank()
  )

girafe(
  ggobj = g4,
  options = list(
    opts_hover(css = "fill:darkgrey;stroke:black;stroke-width:0.5px;"))
  )
```

```{r}
#| label: fig-license1
#| fig-cap: "Faceted plot on average characteristics of packages with difference licenses"
#| fig-width: 10
#| fig-asp: 0.4


strip_text = c(
  "Average Data Size",
  "Average Lines of Code",
  "Average No. of vignettes",
  "Number of packages"
)

names(strip_text) <- c(
  "avg_dt_size",
  "avg_loc",
  "avg_vignettes",
  "n"
)

rpkgstats |> 
  mutate(license = as_factor(license)) |> 
  mutate(license = fct_lump_n(license, n = 6)) |> 
  mutate(year = year(date),
         month = month(date)) |> 
  group_by(license) |> 
  summarise(
    avg_loc = mean(loc_R, na.rm = TRUE),
    avg_vignettes = mean(num_vignettes, na.rm = TRUE),
    avg_dt_size = mean(data_size_total, na.rm = TRUE),
    n = n()
  ) |> 
  arrange(license) |> 
  mutate(id = row_number()) |> 
  mutate(license = fct_reorder(license, -id)) |> 
  select(-id) |> 
  pivot_longer(cols = -license,
               names_to = "indicator",
               values_to = "value") |> 
  mutate(col_var = case_when(
    license == "GPL (>= 2)" ~ "a",
    license == "MIT + file LICENSE" ~ "b",
    .default = "c"
  )) |> 
  ggplot(aes(x = value, 
             y = license,
             fill = col_var)) +
  geom_col() +
  facet_wrap(~indicator, 
             scales = "free_x", 
             nrow = 1,
             labeller = as_labeller(strip_text)) + 
  labs(x = NULL, y = NULL, 
       title = "Characteristics of R packages released under different licenses",
       subtitle = "GPL>=2 packages have longest code and data size, while MIT+ packages have most vignettes") +
  scale_x_continuous(labels = scales::label_number_si(),
                     expand = expansion(0)) +
  scale_fill_manual(values = c("orange", "blue", "lightgrey")) +
  cowplot::theme_minimal_hgrid() +
  theme(
    axis.text.x = element_text(angle = 90),
    legend.position = "none",
    plot.title.position = "plot",
    panel.grid.major.y = element_line(linetype = 2)
  )
```

### **10.1.4 Breaks**

In this section, we use the same data to modify the breaks in an axis.

Instead of the stacked bar-plot we made above, we can also make a stream graph using `ggstream` [@ggstream] to make the graph more visually appealing, while changing the breaks on x-axis etc. As shown in the stream graph in @fig-ggstr, it gives a better overall view: —

```{r}
#| label: fig-ggstr
#| fig-cap: "Visualizing the change in dominance of different licenses over time with a stream graph. Using customized breaks in the x-axis for the graph."
#| fig-width: 10
#| fig-asp: 0.8

library(fontawesome)
library(showtext)
library(ggtext)

# Load fonts
font_add_google("Nova Mono", 
                family = "title_font")       # Font for titles
font_add_google("Saira Extra Condensed", 
                family = "caption_font")     # Font for the caption
font_add_google("JetBrains Mono", 
                family = "body_font")        # Font for plot text
showtext_auto()

text_col = "#01737d"
# Caption stuff
sysfonts::font_add(family = "Font Awesome 6 Brands",
                   regular = here::here("docs", "Font Awesome 6 Brands-Regular-400.otf"))
github <- "&#xf09b"
github_username <- "aditya-dahiya"
xtwitter <- "&#xe61b"
xtwitter_username <- "@adityadahiyaias"
linkedin <- "&#xf08c"
linkedin_username <- "dr-aditya-dahiya-ias"
social_caption <- glue::glue("<span style='font-family:\"Font Awesome 6 Brands\";'>{github};</span> <span style='color: {text_col}'>{github_username}  </span> <span style='font-family:\"Font Awesome 6 Brands\";'>{xtwitter};</span> <span style='color: {text_col}'>{xtwitter_username}</span> <span style='font-family:\"Font Awesome 6 Brands\";'>{linkedin};</span> <span style='color: {text_col}'>{linkedin_username}</span>")

plot_caption <- paste0("**Data:** Mark Padgham and Noam Ross  |  ", "**Graphics:** ", social_caption)


rpkgstats |> 
  mutate(license = as_factor(license)) |> 
  mutate(license = fct_lump_n(license, n = 6)) |> 
  mutate(year = year(date),
         month = month(date)) |> 
  group_by(year, license) |> 
  count() |> 
  group_by(year) |> 
  mutate(prop = n / sum(n),
         yeartotal = sum(n)) |> 
  ungroup() |> 
  mutate(id = row_number()) |> 
  ggplot(
    aes(
      x = year,
      y = n,
      fill = license,
      label = license
    )
  ) +
  geom_stream(bw = 0.85,
              sorting = "onset",
              color = "#3d3d3d") +
  geom_stream_label(aes(color = license),
                    hjust = "inward",
                    size = 9) +
  labs(
    x = NULL, y = NULL,
    title = "Share of different licenses in R Packages",
    subtitle = "'MIT + file License' is an increasingly preferred choice in recent years",
    caption = plot_caption
  ) +
  scale_x_continuous(expand = expansion(0),
                     breaks = breaks_width(width = 4)) +
  scale_y_log10() +
  scale_fill_manual(values = paletteer_d("nord::afternoon_prarie") |> 
                      colorspace::lighten(0.3)) +
  scale_color_manual(values = paletteer_d("nord::afternoon_prarie") |> 
                       colorspace::darken(0.6)) +
  cowplot::theme_minimal_vgrid() +
  theme(
    legend.position = "none",
    panel.grid.major.x = element_line(linetype = 2),
    axis.line.y = element_blank(),
    axis.ticks.y = element_blank(),
    axis.text.y = element_blank(),
    plot.title = element_text(family = "title_font",
                              size = 48,
                              face = "bold",
                              colour = text_col,
                              hjust = 0.5),
    plot.subtitle = element_text(family = "body_font",
                                 colour = text_col,
                                 hjust = 0.5,
                                 size = 24),
    plot.caption = element_textbox(family = "caption_font",
                                   colour = text_col,
                                   hjust = 0.5,
                                   size = 15),
    axis.text.x = element_text(size = 18, color = text_col)
  )
```

To demonstrate the `log10` scale on the x-axis, we use an animated histogram depicting the distribution of the Lines of Code in R packages over the years using {scales} [@scales] and {gganimate} [@gganimate-3], as depicted below: —

```{r}
#| label: fig-anim2
#| eval: false

library(fontawesome)
library(showtext)
library(ggtext)

# Load fonts
font_add_google("Nova Mono", 
                family = "title_font")       # Font for titles
font_add_google("Saira Extra Condensed", 
                family = "caption_font")     # Font for the caption
font_add_google("JetBrains Mono", 
                family = "body_font")        # Font for plot text
showtext_auto()

plot_caption <- "Data: Mark Padgham and Noam Ross   |   Graphics: Aditya Dahiya"


# Defining minor breaks for the x-axis
mb <- unique(
  as.numeric(
    (1:10) %o% 10 ^ (0:5)  
  )  
)

df3 <- rpkgstats |> 
  mutate(year = year(date)) |>
  select(package, year, loc_R) |> 
  filter(loc_R != 0 & !is.na(loc_R))
  

fill_palette <- paletteer_d("khroma::smoothrainbow")[22:34]
col_palette <- fill_palette |> colorspace::darken(0.4)

anim <- df3 |>
  filter(year > 2010) |> 
  ggplot(aes(loc_R, 
             fill = factor(year),
             col = factor(year),
             frame = year)) +
  geom_density(alpha = 0.4) +
  scale_x_log10(
    minor_breaks = mb,
    expand = expansion(c(0, 0.005)),
    labels = label_number_si(),
    breaks = (10^(1:4)),
    limits = c(10, 10^4)) +
  scale_y_continuous(expand = expansion()) +
  scale_fill_manual(values = fill_palette) +
  scale_color_manual(values = fill_palette) +
  labs(
    x = "Lines of Code in the R Package (Log scale)",
    y = NULL,
    title = "R packages released/updated in {as.integer(frame_time)}",
    caption = plot_caption) +
  theme_minimal() +
  theme(
    panel.grid.minor.y = element_blank(),
    panel.grid.major.y = element_line(linetype = 2),
    panel.grid.major.x = element_line(colour = "#ebebeb"),
    panel.grid.minor.x = element_line(colour = "#ebebeb"),
    plot.title = element_text(family = "title_font",
                              size = 36,
                              hjust = 0.5,
                              color = col_palette[11]),
    axis.text = element_text(family = "body_font"),
    axis.title = element_text(family = "body_font", 
                              size = 15),
    legend.position = "none",
    plot.caption = element_text(
      family = "caption_font",
      hjust = 0.5 ,
      margin = margin(12, 0, 5, 0),
      size = 15,
      colour = col_palette[11])
  )

anim

# Final animation to render
animate(
  plot = anim + 
    transition_time(year) +
    shadow_mark(alpha = alpha/4) +
    ease_aes("linear") +
    enter_fade() + 
    exit_fade(),
  fps = 20,
  duration = 12,
  end_pause = 40,
  height = 800,
  width = 1000
  )

# anim_save(filename = here::here("docs", "anim_rpkgs.gif"))
```

![](docs/anim_rpkgs.gif){#fig-anim2 fig-alt="An animated density-plot on Lines of Code in R packages released / updated during a year over the last decade. It shows rightward shift in density-plot: codes are becoming longer!"}
