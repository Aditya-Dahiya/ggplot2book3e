---
title: "Chapter 11"
subtitle: "Colour Scales and Legends"
author: "Aditya Dahiya"
date: "2024-01-01"
format: 
  html: 
    code-fold: true
    code-copy: hover
    code-link: true
execute: 
  echo: true
  warning: false
  error: false
  cache: true
filters:
  - social-share
share:
  permalink: "https://aditya-dahiya.github.io/ggplot2book3e/Chapter11.html"
  description: "Solutions Manual (and Beyond) for ggplot2: Elegant Graphics for Data Analysis (3e)"
  twitter: true
  facebook: true
  linkedin: true
  email: true
  mastodon: true
editor_options: 
  chunk_output_type: console
bibliography: references.bib
---

::: {.callout-note appearance="minimal"}
This Chapter has no exercises to solve, so I use various datasets to explore and customize colour scales and legends in `ggplot2`.
:::

For this Chapter, let's use the [data](#0 "What We Watched: A Netflix Engagement Report") on Engagement (Hours Watched) report from [Netflix](#0) which lists, in descending order, all 18,000+ titles viewed for 50,000+ hours on the platform in the first half of 2023. Credits to the [Data is Plural](https://www.data-is-plural.com/) podcast by [Jeremy Singer-Vine](#0) for circulating this data-set.

```{r}
library(tidyverse)
library(readxl)
library(ggwordcloud)
library(lubridate)

set.seed(42)
netflix <- read_csv(here::here("data", "netflix.csv")) |> 
  slice_head(n = 100) |> 
  janitor::clean_names() |> 
  select(1:3) |> 
  mutate(title = str_remove_all(title, "[^[\\da-zA-Z ]]")) |> 
  mutate(title = str_replace(title, "\\s{3,}.*", "")) |> 
  mutate(month = floor_date(release_date, unit = "month"),
         year = year(release_date))
```

# **11.2 Continuous colour scales**

For depicting use of continuous color scales, we use the [dataset](https://github.com/HarshaDevulapalli/indian-movie-theatres/blob/master/indian-movie-theatres.csv) by [Harsha Devulapalli](https://github.com/HarshaDevulapalli) on [Movie Theaters](https://github.com/HarshaDevulapalli/indian-movie-theatres) in 8 Indian metropolitan Cities. Credits to the [Data is Plural](https://www.data-is-plural.com/) podcast by [Jeremy Singer-Vine](#0) for circulating this data-set.

The @fig-col-c shows use of two fill scales, one for `geom_col()` and other for `geom_point()` , both within the same plot. This is possible with use of `ggnewscale` [@ggnewscale-2] that allows us to specify a new fill or colour scale within the same plot.

```{r}
#| label: fig-col-c
#| fig-cap: "Using multiple continuous colour scales in a lollipop chart"
#| fig-width: 10

# Loading dataset

movies <- read_csv("https://raw.githubusercontent.com/HarshaDevulapalli/indian-movie-theatres/master/indian-movie-theatres.csv")

# Using two fill scales in 1 ggplot object
library(ggnewscale)

plotdf <- movies |> 
  group_by(theatre_chain) |> 
  summarise(
    n = n(),
    avg_price = mean(average_ticket_price, na.rm = TRUE)
  ) |> 
  drop_na() |> 
  filter(n >= 5) |> 
  mutate(
    theatre_chain = factor(theatre_chain),
    theatre_chain = fct_reorder(theatre_chain, avg_price),
    avg_price = round(avg_price, 0)
    )

# Creating a gradient in the geom_col fill
plotdf_fill <- plotdf  |> 
  
  # Group input by rows: to compute on a data frame a row-at-a-time.
  rowwise()  |> 
  
  # Create Vars
  summarise(theatre_chain = theatre_chain,
            avg_price = avg_price,
            fill_col = list(1:avg_price),
            height = 1) %>%
  # Long form
  unnest(cols = fill_col)
  
plotdf |> 
  ggplot(
    aes(x = avg_price,
        y = theatre_chain)) +
  geom_col(
    data = plotdf_fill,
    aes(fill = fill_col,
        x = height),
    width = 0.3,
    position = "stack"
  ) +
  
  # Annotations
  annotate(
    geom = "curve",
    x = plotdf |> filter(theatre_chain == "PVR") |> pull(avg_price),
    y = 9,
    xend = 300,
    yend = 4,
    linetype = 5,
    arrow = arrow(length = unit(2, "mm")),
    col = "darkgrey",
    curvature = -0.5
  ) +
  annotate(
    geom = "curve",
    x = plotdf |> filter(theatre_chain == "Inox") |> pull(avg_price),
    y = 8,
    xend = 300,
    yend = 4,
    linetype = 5,
    arrow = arrow(length = unit(2, "mm")),
    col = "darkgrey",
    curvature = -0.5
  ) +
  annotate(
    geom = "label",
    x = 300,
    y = 4,
    label = "Size of the dot and the number represent\nnumber of Movie Theatres owned by the Chain",
    hjust = "inward", 
    vjust = 1,
    size = 3, 
    fontface = "italic",
    col = "black"
  ) +
  
  # Colour Scales
  paletteer::scale_fill_paletteer_c("ggthemes::Orange-Gold") +
  
  # Using a Second Colour Scale in same ggplot2
  new_scale_fill() +
  # Lollipop Graph, circles
  geom_point(aes(x = avg_price, 
                 size = n,
                 fill = n),
             pch = 21,
             col = "white") +
  geom_text(
    aes(label = n),
    hjust = 0.5,
    vjust = 0.5
  ) +
  paletteer::scale_fill_paletteer_c("grDevices::PinkYl",
                                    direction = -1) +
  scale_size_continuous(range = c(8, 15)) +
  labs(
    x = "Average Ticket Price (in Rs.)",
    y = NULL,
    title = "Ticket prices in Indian Movie Theatre Chains",
    subtitle = "PVR is the most expensive, and also has the most movie theatres.\nThe numbers in circles represent the number of theatres run by the Chain."
  ) +
  scale_x_continuous(expand = expansion(c(0, 0.05))) +
  scale_y_discrete(expand = expansion(c(0.05, 0.1))) +
  theme_minimal() +
  theme(
    legend.position = "none",
    panel.grid.major.y = element_blank(),
    panel.grid.minor.x = element_blank(),
    panel.grid.major.x = element_line(linetype = 2),
    axis.line.x = element_line(arrow = arrow(length = unit(3, "mm"))),
    plot.title = element_text(face = "bold",
                              size = 18,
                              hjust = 0.5),
    plot.subtitle = element_text(face = "italic",
                                 hjust = 0.5),
    plot.title.position = "plot"
  ) 
```

# **11.3 Discrete colour scales**

Now, I use the data-set with `ggwordcloud` [@ggwordcloud] to make word-clouds of top Netflix Titles. The @fig-default shows the top 10 titles on Netflix by number of hours viewed between January - June 2023, with default colour schemes in ggplot2. The word-cloud shows the use of a continuous colour scale for text colour based on the number of hours viewed.

```{r}
#| label: fig-default
#| fig-cap: "Top 10 titles on Netflix by number of hours viewed: January - June 2023"
#| fig-subcap: 
#|   - "A horizontal Bar-Chart"
#|   - "A wordcloud"

g1 <- netflix |> 
  slice_max(order_by = hours_viewed, n = 10) |> 
  ggplot(aes(
    x = hours_viewed, 
    y = reorder(title, hours_viewed),
    fill = title,
    label = title)) +
  geom_col() +
  geom_text(aes(x = 0),
            hjust = "inward",
            vjust = 0.5) +
  labs(x = "Hours viewed on Netflix", y = NULL,
       title = "Top 10 titles on Netflix",
       subtitle = "By number of hours viewed: January - June 2023") +
  scale_x_continuous(expand = expansion(0),
                     labels = scales::label_number_si()) +
  theme_minimal() +
  theme(legend.position = "none",
        axis.text.y = element_blank(),
        panel.grid.minor = element_blank(),
        panel.grid.major.y = element_blank())

g2 <- netflix |> 
  mutate(title = str_replace(title, " Season\\s.*", "")) |> 
  slice_max(order_by = hours_viewed, n = 40) |> 
  ggplot(aes(label = title, 
             size = hours_viewed,
             color = hours_viewed)) +
  geom_text_wordcloud(shape = "circle") +
  scale_size_area(max_size = unit(10, "mm")) +
  labs(title = "Word cloud of top 30 titles on Netflix (Jan-Jun 2023)") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5))

g1
g2
```

The @fig-default2 shows the same plots with `paletteer` [@paletteer] scales.

```{r}
#| label: fig-default2
#| fig-cap: "Top 10 titles on Netflix by number of hours viewed: January - June 2023"
#| fig-subcap: 
#|   - "A horizontal Bar-Chart"
#|   - "A wordcloud"

library(paletteer)

g1 + scale_fill_paletteer_d("ggthemes::Winter")

g2 + scale_color_paletteer_c("oompaBase::redscale")
```

# Packages for colour palettes in `R`

-   **`paletteer`:**
    -   The {paletteer} R package [@paletteer-2], developed by *Emil Hvitfeldt*, serves as a comprehensive repository of diverse color palettes sourced from various R packages. With a unified interface, {paletteer} aims to streamline the usage of these palettes, analogous to the "`caret` of palettes." Featuring a collection of 2538 palettes obtained from CRAN packages, the palettes are categorized into discrete and continuous scales. The [paletteer gallery](https://pmassicotte.github.io/paletteer_gallery/) facilitates easy exploration and implementation of these palettes in data visualization through ggplot2, providing users with copy/pastable R code for seamless integration.
-   **`RColorBrewer`:**
    -   This package sources color palettes from ColorBrewer, delivering a diverse range of qualitative, sequential, and diverging color schemes for ggplot.
-   **`viridis`:**
    -   Designed for both colorblind individuals and black-and-white printing, viridis provides perceptually uniform color maps that enhance data visualization.
-   **`viridisLite`:**
    -   A streamlined version of viridis, viridisLite offers the same high-quality color maps with reduced dependencies for efficient use in ggplot.
-   **`wesanderson`:**
    -   Inspired by Wes Anderson films, this package provides a unique and aesthetically pleasing set of color palettes, adding a distinctive touch to ggplot visuals.
-   **`ggsci`:**
    -   Drawing inspiration from scientific journals like Nature and Science, ggsci offers color palettes that lend a professional and research-oriented look to ggplot visualizations.
-   **`nord`:**
    -   Inspired by the Nord color scheme, this package delivers modern and elegant color palettes for ggplot, adding a contemporary feel to data visualizations.
-   **`iWantHue`:**
    -   Enabling users to generate and explore color palettes based on criteria such as color count and harmony, iWantHue provides flexibility and customization for ggplot visuals.
-   **`colorspace`:**
    -   Based on the HCL (Hue-Chroma-Luminance) color space, colorspace offers perceptually uniform and visually appealing color palettes for ggplot, enhancing the aesthetic quality of visualizations.
-   **`dichromat`:**
    -   Specifically catering to individuals with color vision deficiencies, dichromat provides color palettes that prioritize accessibility for improved data visualization experiences in ggplot.
-   **`ggthemes`:**
    -   Inspired by popular data visualization libraries and software like Excel, Tableau, and Stata, ggthemes offers a variety of color palettes and themes to diversify ggplot visuals.
